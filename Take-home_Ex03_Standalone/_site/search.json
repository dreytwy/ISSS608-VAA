[
  {
    "objectID": "Take-home_Ex03.html",
    "href": "Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "The Task for Take-Home Exercise 3\nIn this take-home exercise, we are required to select one of the module of our proposed Shiny application and complete the following tasks:\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can be run and return the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications, and\nTo select the appropriate Shiny UI components for exposing the parameters determine above.\nInclude a storyboarding section called UI design for the different components of the UIs for the proposed design.\nPrepare the prototype module report as Take-home Exercise 3 submission. The write-up of the take-home exercise must be in Quarto html document format and publish on Netlify on our own coursework page. The report must provide detail discussion and explanation of:\n\nthe data preparation process;\nthe selection of data visualisation techniques used; and\nthe data visualisation design and interactivity principles and best practices implemented.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Take-home_Ex03.html#the-task",
    "href": "Take-home_Ex03.html#the-task",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "In this take-home exercise, we are required to select one of the module of our proposed Shiny application and complete the following tasks:\n\nTo evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN,\nTo prepare and test that the specific R codes can be run and return the correct output as expected,\nTo determine the parameters and outputs that will be exposed on the Shiny applications, and\nTo select the appropriate Shiny UI components for exposing the parameters determine above.\nPrepare the prototype module report as Take-home Exercise 3 submission. The write-up of the take-home exercise must be in Quarto html document format and publish on Netlify on our own coursework page. The report must provide detail discussion and explanation of:\n\nthe data preparation process;\nthe selection of data visualisation techniques used; and\nthe data visualisation design and interactivity principles and best practices implemented.\n\nInclude a storyboarding section called UI design for the different components of the UIs for the proposed design.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "r_packg.html",
    "href": "r_packg.html",
    "title": "🚢 R Packages",
    "section": "",
    "text": "To list, evaluate and determine the necessary R packages needed for our Shiny application are supported in R CRAN.",
    "crumbs": [
      "Required R Packages"
    ]
  },
  {
    "objectID": "r_packg.html#loading-packages",
    "href": "r_packg.html#loading-packages",
    "title": "R Packages",
    "section": "",
    "text": "Utility Tools\nGraphing Tools\n\n\n\n\n\njsonlite - To parse JSON\ntidyverse - Data science tools\nggtext - Tools for text formatting\nknitr - For better table displays\nlubridate - For processing date and time\nhms - For durations\nscales - For breaks and labels\ntidytext - For functions text mining\ntm - For text mining\nSnowBallC - For Porter’s word stemming\nmagick - For graphics and image processing\nSmartEDA - EDA with some graphing\nreactable - For interactive data tables\n\n\npatchwork - For combining ggplot plots\nggraph - For plotting network data\ntidygraph - For graph manipulations\nigraph - Contains functions for network analysis\nggiraph - Interactive plots\nplotly - Interactive plots\nwordcloud- For frequency representation of words\nggh4x - For axis, strip, and facet customizations\nvisNetwork - For interactive visualisation of networks.\nRColorBrewer - Colour schemes for graphics\ncirclize - For circular plots\nggalluvial - For alluvial diagrams\nwordcloud2 - For creating wordclouds\n\n\n\n\nThe code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\n\nShow the code\npacman::p_load(   jsonlite, tidyverse, ggtext,   knitr, lubridate, hms, scales,   tidytext, tm, SnowballC,   magick, patchwork, ggraph,    tidygraph, igraph, ggiraph,    SmartEDA, plotly, wordcloud,    ggh4x, visNetwork,   RColorBrewer, circlize, wordcloud2, ggalluvial,   reactable)",
    "crumbs": [
      "Required R Packages"
    ]
  },
  {
    "objectID": "r_packg.html#part-of-tidyverse",
    "href": "r_packg.html#part-of-tidyverse",
    "title": "🚢 R Packages",
    "section": "🧰 Part of Tidyverse",
    "text": "🧰 Part of Tidyverse\n\n\nstringr - For wrapping text and string manipulation\nreadr - For reading rectangular data (CSV, TSV, etc)\ndplyr - For transforming, filtering, summarising data\nggplot2 - For building data visualisation",
    "crumbs": [
      "Required R Packages"
    ]
  },
  {
    "objectID": "r_packg.html#packages-supported-in-r-cran",
    "href": "r_packg.html#packages-supported-in-r-cran",
    "title": "🚢 R Packages",
    "section": "Packages supported in R CRAN:",
    "text": "Packages supported in R CRAN:\n\n\n\nUtility Tools\nGraphing Tools\n\n\n\n\n\njsonlite - To parse JSON\ntidyverse - Data science tools\nggtext - Tools for text formatting\nknitr - For better table displays\nlubridate - For processing date and time\nhms - For durations\nscales - For breaks and labels\ntidytext - For functions text mining\ntm - For text mining\nSnowBallC - For Porter’s word stemming\nSmartEDA - EDA with some graphing\nreactable - For interactive data tables\nhighcharter- For wrapper function\nconflicted - For managing namespace conflicts\n\n\npatchwork - For combining ggplot plots\nggraph - For plotting network data\ntidygraph - For graph manipulations\nigraph - Contains functions for network analysis\nggiraph - Interactive plots\nplotly - Interactive plots\nwordcloud- For frequency representation of words\nggh4x - For axis, strip, and facet customizations\nvisNetwork - For interactive visualisation of networks.\nRColorBrewer - Colour schemes for graphics\ncirclize - For circular plots\nggalluvial - For alluvial diagrams\nnetworkD3- For D3-based interactive network graphs\nleaflet- For interactive maps\n\n\n\n\n\nWe will use the code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\n\n\nShow the code\npacman::p_load(jsonlite, tidyverse, ggtext,   \n               knitr, lubridate, hms, scales,   \n               tidytext, tm, SnowballC,   \n               patchwork, ggraph,    \n               tidygraph, igraph, ggiraph,    \n               SmartEDA, plotly, wordcloud,    \n               ggh4x, visNetwork, RColorBrewer, \n               circlize, ggalluvial, reactable,\n               networkD3, highcharter, leaflet, conflicted)",
    "crumbs": [
      "Required R Packages"
    ]
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "🌊Introduction to the proposed final product",
    "section": "",
    "text": "In this study, we will be tackling Mini-case 3 of VAST Challenge 2025.\n\n\nOver the past decade, the community of Oceanus has faced numerous transformations and challenges evolving from its fishing-centric origins. Following major crackdowns on illegal fishing activities, suspects have shifted investments into more regulated sectors such as the ocean tourism industry, resulting in growing tensions. This increased tourism has recently attracted the likes of international pop star Sailor Shift, who announced plans to film a music video on the island.\nClepper Jensen, a former analyst at FishEye and now a seasoned journalist for the Hacklee Herald, has been keenly observing these rising tensions. Recently, he turned his attention towards the temporary closure of Nemo Reef. By listening to radio communications and utilizing his investigative tools, Clepper uncovered a complex web of expedited approvals and secretive logistics. These efforts revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group The Green Guardians, pointing towards a story of corruption and manipulation.\nOur task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story.\n\n\n\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following 4 questions.\n\nQuestion 1\nClepper found that messages frequently came in at around the same time each day.\n1a. Develop a graph-based visual analytics approach to identify any daily temporal patterns in communications.\n1b. How do these patterns shift over the two weeks of observations?\n1c. Focus on a specific entity and use this information to determine who has influence over them.\nQuestion 2\nClepper has noticed that people often communicate with (or about) the same people or vessels, and that grouping them together may help with the investigation.\n2a. Use visual analytics to help Clepper understand and explore the interactions and relationships between vessels and people in the knowledge graph.\n2b. Are there groups that are more closely associated? If so, what are the topic areas that are predominant for each group?\n\nFor example, these groupings could be related to: Environmentalism (known associates of Green Guardians), Sailor Shift, and fishing/leisure vessels.\n\nQuestion 3\nIt was noted by Clepper’s intern that some people and vessels are using pseudonyms to communicate.\n3a. Expanding upon your prior visual analytics, determine who is using pseudonyms to communicate, and what these pseudonyms are.\n\nSome that Clepper has already identified include: “Boss”, and “The Lookout”, but there appear to be many more.\nTo complicate the matter, pseudonyms may be used by multiple people or vessels.\n\n3b. Describe how your visualizations make it easier for Clepper to identify common entities in the knowledge graph.\n3c. How does your understanding of activities change given your understanding of pseudonyms?\nQuestion 4\nClepper suspects that Nadia Conti, who was formerly entangled in an illegal fishing scheme, may have continued illicit activity within Oceanus.\n4a. Through visual analytics, provide evidence that Nadia is, or is not, doing something illegal.\n4b. Summarize Nadia’s actions visually. Are Clepper’s suspicions justified?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "Introduction.html#background-and-questions",
    "href": "Introduction.html#background-and-questions",
    "title": "🌊Introduction to the proposed final product",
    "section": "",
    "text": "In this study, we will be tackling Mini-case 3 of VAST Challenge 2025.\n\n\nOver the past decade, the community of Oceanus has faced numerous transformations and challenges evolving from its fishing-centric origins. Following major crackdowns on illegal fishing activities, suspects have shifted investments into more regulated sectors such as the ocean tourism industry, resulting in growing tensions. This increased tourism has recently attracted the likes of international pop star Sailor Shift, who announced plans to film a music video on the island.\nClepper Jensen, a former analyst at FishEye and now a seasoned journalist for the Hacklee Herald, has been keenly observing these rising tensions. Recently, he turned his attention towards the temporary closure of Nemo Reef. By listening to radio communications and utilizing his investigative tools, Clepper uncovered a complex web of expedited approvals and secretive logistics. These efforts revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group The Green Guardians, pointing towards a story of corruption and manipulation.\nOur task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story.\n\n\n\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following 4 questions.\n\nQuestion 1\nClepper found that messages frequently came in at around the same time each day.\n1a. Develop a graph-based visual analytics approach to identify any daily temporal patterns in communications.\n1b. How do these patterns shift over the two weeks of observations?\n1c. Focus on a specific entity and use this information to determine who has influence over them.\nQuestion 2\nClepper has noticed that people often communicate with (or about) the same people or vessels, and that grouping them together may help with the investigation.\n2a. Use visual analytics to help Clepper understand and explore the interactions and relationships between vessels and people in the knowledge graph.\n2b. Are there groups that are more closely associated? If so, what are the topic areas that are predominant for each group?\n\nFor example, these groupings could be related to: Environmentalism (known associates of Green Guardians), Sailor Shift, and fishing/leisure vessels.\n\nQuestion 3\nIt was noted by Clepper’s intern that some people and vessels are using pseudonyms to communicate.\n3a. Expanding upon your prior visual analytics, determine who is using pseudonyms to communicate, and what these pseudonyms are.\n\nSome that Clepper has already identified include: “Boss”, and “The Lookout”, but there appear to be many more.\nTo complicate the matter, pseudonyms may be used by multiple people or vessels.\n\n3b. Describe how your visualizations make it easier for Clepper to identify common entities in the knowledge graph.\n3c. How does your understanding of activities change given your understanding of pseudonyms?\nQuestion 4\nClepper suspects that Nadia Conti, who was formerly entangled in an illegal fishing scheme, may have continued illicit activity within Oceanus.\n4a. Through visual analytics, provide evidence that Nadia is, or is not, doing something illegal.\n4b. Summarize Nadia’s actions visually. Are Clepper’s suspicions justified?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "Introduction.html#the-data",
    "href": "Introduction.html#the-data",
    "title": "🌊Introduction to the proposed final product",
    "section": "1.2 The Data",
    "text": "1.2 The Data\nWe used the dataset provided by VAST Challenge. We were provided a knowledge graph created from transcripts of boat radio communications for two weeks on Oceanus. We were asked to identify people, their roles, and the events and locations they talked to get to the bottom of the story. This graph is a network data that contains nodes that represent the different entities, events, and relationships, and edges which represent the relationships between different nodes.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "Introduction.html#methodology",
    "href": "Introduction.html#methodology",
    "title": "🌊Introduction to the proposed final product",
    "section": "1.3 Methodology",
    "text": "1.3 Methodology\nTo answer these questions, we investigated the communications and relationships among entities. We did this by creating visualisation such as subgraphs of networks, chord diagrams, timeline plots, wordclouds, and circular bar charts. Then we tabled the findings, and discussion/ interpretations.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "Storyboard_ UI_Design.html",
    "href": "Storyboard_ UI_Design.html",
    "title": "Storyboard UI Design",
    "section": "",
    "text": "Our shiny app will look at network and temporal patterns, with the network graph as the core visualizations, with other tables and charts as accompanying visualization.\n\n\n\n\n\n\n\n\nInputsOutputs\n\n\nThe Shiny app will include some of these parts.\n\n\nAs the entire network is very large, containing 1,159 nodes and 3,226 edges, it is not suitable to visualize the entire network. Hence, we will plot with subgraphs and other visualisations.\n\n\n\nFor Nadia’s ego network, we require a reference node (Nadia).\n\n\n\nIn relation to the reference node, this serves to narrow down the network to view. The depth dictates how far from the reference node to network. As Nadia’s networks are at distance 1 or distance 2, we will add an option to toggle whether to render the full network or use the option to render by distance to the reference node.\n\n\n\n\n\nShows the network or visual plot. It will be interactive to enable closer inspection of network or visual elements.\n\n\n\n\nThese are some prototypes of the webpage and shiny application that we are planning to build for the project. The whole concept of this storyboard is mainly to allow the user to utilise interactive visualisations such as timeseries slides, clickable components, or hovers to get to the bottom of the activites brewing at Oceanus such as the Nemo Reef Operation. Hence, enhancing the whole user experience as they follow us along on uncovering the story."
  },
  {
    "objectID": "Storyboard_ UI_Design.html#shiny-applications-on-networks-and-visualisations",
    "href": "Storyboard_ UI_Design.html#shiny-applications-on-networks-and-visualisations",
    "title": "Storyboard UI Design",
    "section": "",
    "text": "InputsOutputs\n\n\nThe Shiny app will include some of these parts.\n\n\nAs the entire network is very large, containing 1,159 nodes and 3,226 edges, it is not suitable to visualize the entire network. Hence, we will plot with subgraphs and other visualisations.\n\n\n\nFor Nadia’s ego network, we require a reference node (Nadia).\n\n\n\nIn relation to the reference node, this serves to narrow down the network to view. The depth dictates how far from the reference node to network. As Nadia’s networks are at distance 1 or distance 2, we will add an option to toggle whether to render the full network or use the option to render by distance to the reference node.\n\n\n\n\n\nShows the network or visual plot. It will be interactive to enable closer inspection of network or visual elements.\n\n\n\n\nThese are some prototypes of the webpage and shiny application that we are planning to build for the project. The whole concept of this storyboard is mainly to allow the user to utilise interactive visualisations such as timeseries slides, clickable components, or hovers to get to the bottom of the activites brewing at Oceanus such as the Nemo Reef Operation. Hence, enhancing the whole user experience as they follow us along on uncovering the story."
  },
  {
    "objectID": "Storyboard_ UI_Design.html#website-look",
    "href": "Storyboard_ UI_Design.html#website-look",
    "title": "Storyboard UI Design",
    "section": "",
    "text": "This would be the prototype of the layout structure with navbar at the top, and sidebar layout at the right side. Codes will be provided as well in panel-tabsets which will support interactivity for Quarto + Shiny visualisations."
  },
  {
    "objectID": "Storyboard_UI_Design.html",
    "href": "Storyboard_UI_Design.html",
    "title": "📓 Storyboard UI Design",
    "section": "",
    "text": "Our shiny app will look at networks and patterns, with the network graph as the core visualizations, and other tables and charts as accompanying visualization.",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#website-look",
    "href": "Storyboard_UI_Design.html#website-look",
    "title": "📓 Storyboard UI Design",
    "section": "Website Look",
    "text": "Website Look\nThis would be the prototype of the layout structure with navbar at the top, and sidebar layout at the right side. Codes will be provided as well in panel-tabsets which will support interactivity for Quarto + Shiny visualisations.",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#shiny-applications-on-networks-and-visualisations",
    "href": "Storyboard_UI_Design.html#shiny-applications-on-networks-and-visualisations",
    "title": "📓 Storyboard UI Design",
    "section": "Shiny Applications on Networks and Visualisations",
    "text": "Shiny Applications on Networks and Visualisations\nPrinciples of usability and interactivity:\nOur shiny compatible visualisations will have timeseries or related interactive shiny compatible subnetworks or visualisations. These may include hovers or other clickable components.\n\nThe ui.R script controls the layout and appearance of a shiny app.\n\nui&lt;- fluidPage() which creates a display to adjust to dimensions\ntitlePanel and sidebarLayout to add to fluidPage. We will create a basic Shiny application with a sidebar.\n\nThe server.R script contains the instructions to build the Shiny app.\n\nserver&lt;- function(input, output) {}\nWe will be using selectInput(), sliderInput(), plotOutput(), etc to assist in the visualisations and interactivity.\n\nshinyApp(ui=ui, server=server)\n\n\n\n\nInputsOutputs\n\n\nThe Shiny app will include some of these parts.\n\nKnowledge graph\nAs the entire network is very large, containing 1,159 nodes and 3,226 edges, it is not suitable to visualize the entire network. Hence, we will plot with subgraphs and other visualisations.\n\n\nReference Node\nFor Nadia’s ego network, we require a reference node (Nadia).\n\n\nNetwork depth\nIn relation to the reference node, this serves to narrow down the network to view. The depth dictates how far from the reference node to network. As Nadia’s networks are at distance 1 or distance 2, we will add an option to toggle whether to render the full network or use the option to render by distance to the reference node.\n\n\n\n\nPlot area\nShows the network or visual plot. It will be interactive to enable closer inspection of network or visual elements.",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Prototype.html#background-and-questions",
    "href": "Prototype.html#background-and-questions",
    "title": "Prototype",
    "section": "1.1 Background and Questions",
    "text": "1.1 Background and Questions\nIn this study, we tackled Mini-case 3 of VAST Challenge 2025.\n\n1.1.1 Background\nOver the past decade, the community of Oceanus has faced numerous transformations and challenges evolving from its fishing-centric origins. Following major crackdowns on illegal fishing activities, suspects have shifted investments into more regulated sectors such as the ocean tourism industry, resulting in growing tensions. This increased tourism has recently attracted the likes of international pop star Sailor Shift, who announced plans to film a music video on the island.\nClepper Jensen, a former analyst at FishEye and now a seasoned journalist for the Hacklee Herald, has been keenly observing these rising tensions. Recently, he turned his attention towards the temporary closure of Nemo Reef. By listening to radio communications and utilizing his investigative tools, Clepper uncovered a complex web of expedited approvals and secretive logistics. These efforts revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group The Green Guardians, pointing towards a story of corruption and manipulation.\nOur task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story.\n\n\n1.1.2 Questions\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following questions.\n\nQuestion 2\nClepper has noticed that people often communicate with (or about) the same people or vessels, and that grouping them together may help with the investigation.\n2.a Use visual analytics to help Clepper understand and explore the interactions and relationships between vessels and people in the knowledge graph.\n2.b Are there groups that are more closely associated? If so, what are the topic areas that are predominant for each group?\n-For example, these groupings could be related to: Environmentalism (known associates of Green Guardians), Sailor Shift, and fishing/leisure vessels.\nQuestion 4\nClepper suspects that Nadia Conti, who was formerly entangled in an illegal fishing scheme, may have continued illicit activity within Oceanus.\n4.a Through visual analytics, provide evidence that Nadia is, or is not, doing something illegal.\n4.b Summarize Nadia’s actions visually. Are Clepper’s suspicions justified?"
  },
  {
    "objectID": "Prototype.html#the-data",
    "href": "Prototype.html#the-data",
    "title": "Prototype",
    "section": "1.2 The Data",
    "text": "1.2 The Data\nWe used the dataset provided by VAST Challenge. We were provided a knowledge graph created from transcripts of boat radio communications for two weeks on Oceanus. We were asked to identify people, their roles, and the events and locations they talked to get to the bottom of the story. This graph is a network data that contains nodes that represent the different entities, events, and relationships, and edges which represent the relationships between different nodes."
  },
  {
    "objectID": "Prototype.html#methodology",
    "href": "Prototype.html#methodology",
    "title": "Prototype",
    "section": "1.3 Methodology",
    "text": "1.3 Methodology\nTo answer these questions, we investigated the communications and relationships among entities. We did this by creating visualisation such as subgraphs of networks, chord diagrams, timeline plots, wordclouds, and circular bar charts. Then we tabled the findings, and discussion/ interpretations.\nBefore we start, we would like to address the difference in the usage of the English language as we mainly use British English in our studies while the data was prepared in American English. For instance, harbor and harbour were synonymous in this study."
  },
  {
    "objectID": "Prototype.html#loading-packages",
    "href": "Prototype.html#loading-packages",
    "title": "🦫 Prototype",
    "section": "1.1 Loading Packages",
    "text": "1.1 Loading Packages"
  },
  {
    "objectID": "Prototype.html#loading-data",
    "href": "Prototype.html#loading-data",
    "title": "Prototype",
    "section": "1.2 Loading Data",
    "text": "1.2 Loading Data\nIn the code chunk below, fromJSON() of jsonlite package was used to import mc3.json file into R and save the output object.\n\n\nShow the code\nmc3_data &lt;- fromJSON(\"data/mc3_graph.json\")\nmc3_schema &lt;- fromJSON(\"data/MC3_schema.json\")\n\n\nIt contains graph data, where nodes can be accessed via nodes and edges via links. This dataset had many columns but we filtered the relevant data during wrangling.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#defining-common-variables",
    "href": "Prototype.html#defining-common-variables",
    "title": "Prototype",
    "section": "1.3 Defining common variables",
    "text": "1.3 Defining common variables\nWe will also set some values for consistency throughout all graphs.\n\nStyle and Colours\n\n\n\n\nShow the code\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",\n  \"Relationship\" = \"#AF8DC3\",\n  \"Nadia Conti\" = \"red\"\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",\n  \"Relationship\" = \"square x\",\n  \"Nadia Conti\" = \"star\"\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#inspecting-knowledge-graph-structure",
    "href": "Prototype.html#inspecting-knowledge-graph-structure",
    "title": "Prototype",
    "section": "1.4 Inspecting knowledge graph structure",
    "text": "1.4 Inspecting knowledge graph structure\nIn the code chunk below glimpse() is used to reveal the structure of mc3_data knowledge graph.\n\nThe CodeThe Result\n\n\nglimpse(mc3_data)\n\n\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ...",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#extracting-the-edges-and-nodes-tables",
    "href": "Prototype.html#extracting-the-edges-and-nodes-tables",
    "title": "Prototype",
    "section": "1.5 Extracting the edges and nodes tables",
    "text": "1.5 Extracting the edges and nodes tables\nNext, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from mc3 tibble dataframe into two separate tibble dataframes called mc3_nodes_raw and mc3_edges_raw respectively.\n\nThe CodeNodes structureEdges structure\n\n\n\n\nShow the code\nmc3_nodes_raw &lt;- as_tibble(mc3_data$nodes)\nmc3_edges_raw &lt;- as_tibble(mc3_data$edges)\n\n\nWe also looked into the nodes and edges structure.\n\n\n\n\nShow the code\nExpData(data=mc3_nodes_raw,type=2)\n\n\n   Index     Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1              type     character     1159             0          0.000\n2      2             label     character     1159             0          0.000\n3      3              name     character       72          1087          0.938\n4      4          sub_type     character     1159             0          0.000\n5      5                id     character     1159             0          0.000\n6      6         timestamp     character      770           389          0.336\n7      7   monitoring_type     character       70          1089          0.940\n8      8          findings     character       70          1089          0.940\n9      9           content     character      584           575          0.496\n10    10   assessment_type     character       33          1126          0.972\n11    11           results     character       32          1127          0.972\n12    12     movement_type     character       33          1126          0.972\n13    13       destination     character       41          1118          0.965\n14    14  enforcement_type     character       21          1138          0.982\n15    15           outcome     character       19          1140          0.984\n16    16     activity_type     character        4          1155          0.997\n17    17      participants       integer        1          1158          0.999\n18    18   thing_collected    data.frame    -2314          2316       1158.000\n19    19         reference     character        1          1158          0.999\n20    20              date     character        5          1154          0.996\n21    21              time     character        3          1156          0.997\n22    22   friendship_type     character        2          1157          0.998\n23    23   permission_type     character       55          1104          0.953\n24    24        start_date     character       90          1069          0.922\n25    25          end_date     character        6          1153          0.995\n26    26       report_type     character       19          1140          0.984\n27    27   submission_date     character       22          1137          0.981\n28    28 jurisdiction_type     character       13          1146          0.989\n29    29   authority_level     character        7          1152          0.994\n30    30 coordination_type     character       73          1086          0.937\n31    31  operational_role     character       38          1121          0.967\n   No_of_distinct_values\n1                      3\n2                     92\n3                     73\n4                     25\n5                   1159\n6                    612\n7                      6\n8                     70\n9                    581\n10                     4\n11                    33\n12                     4\n13                    26\n14                     3\n15                    20\n16                     3\n17                     1\n18                     2\n19                     2\n20                     6\n21                     4\n22                     3\n23                     4\n24                    69\n25                     6\n26                     4\n27                    23\n28                    13\n29                     3\n30                    53\n31                    35\n\n\n\n\n\n\nShow the code\nExpData(data=mc3_edges_raw,type=2)\n\n\n  Index Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1     1            id     character     3169            57          0.018\n2     2   is_inferred       logical     3226             0          0.000\n3     3        source     character     3226             0          0.000\n4     4        target     character     3226             0          0.000\n5     5          type     character     2204          1022          0.317\n  No_of_distinct_values\n1                  3170\n2                     2\n3                  1052\n4                  1156\n5                     4",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#nodes",
    "href": "Prototype.html#nodes",
    "title": "Prototype",
    "section": "3.1 Nodes",
    "text": "3.1 Nodes\n\nNodesDrilling into Node sub_typeEntity subtypesEvent subtypesRelationship subtypes\n\n\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\n\nExpCatViz(data=mc3_nodes_raw,\n          col=\"navyblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below uses ggplot2 functions to reveal the frequency distribution of sub_type field of mc3_nodes_raw.\n\n# Step 1: Count and reorder\nmc3_nodes_ordered &lt;- mc3_nodes_raw %&gt;%\n  count(sub_type) %&gt;%\n  arrange((n)) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot with navy bars, sorted, and horizontal\nggplot(mc3_nodes_ordered, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(x = \"Sub_type\", y = \"Count\",\n    title = \"Distribution of Subtypes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Entity subtypes are filtered.\n\n# Step 1: Filter for type == \"Entity\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Entity\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Entity Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Entity Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Event subtypes are filtered.\n\n# Step 1: Filter for type == \"Event\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Event\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Event Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Event Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the relationship subtypes are filtered.\n\n# Step 1: Filter for type == \"Relationship\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Relationship\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Relationship Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Relationship Subtypes\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Prototype.html#findings-from-eda",
    "href": "Prototype.html#findings-from-eda",
    "title": "Prototype",
    "section": "2.1.1 Findings from EDA",
    "text": "2.1.1 Findings from EDA\n\nNodesEvent TypesRelationship TypesEntity TypesCourse of Action\n\n\nWe will use the EDA findings to determine data to focus on or eliminate. From the bar charts and the original data on mc3_nodes_raw, it was observed that:\n\nNodes were one of three types (Entity, Event, Relationship), where each of these types have their sub_types. Majority were of event type, followed by relationship, and entity.\n\nThere were 25 subtypes. Communications made up the bulk of the sub_type for Events. Coordinates made up the bulk of the sub_type for Relationship. The additional node sub_types not mentioned in the VAST 2025 MC3 Data Description under Node Attributes were: fishing, communication and coordinates.\n\n\n\n\n\nObservations of EDA from Event types:\n\nFindings field were filled when there were monitoring_type.\nContent refers to radio communication content.\nResults field were filled when there were assessment_type performed.\nWhen there is an enforcement_type of enforcement operations or warnings, there might be an outcome at times.\nWhen there is a movement_type, there might be a place of destination at times.\n\n\n\n\n\nObservations of EDA from Relationship types:\n\nWhen the subtype was coordinate, there were data in the field named coordination_types.\nWhen the subtype was operate, there were data in the field named operational_roles.\nWhen there is a jurisdiction_type, there might be an authority_level.\nThere are only restricted or special access data within permission_types.\nWhen there is a report_type of data transmission or environmental report, there might be a submission_date.\n\n\n\n\n\nObservations of EDA from Entity types:\n\nThe 5 id under Group sub-types were not very useful information.\n\n\n\n\n\nElimination and directed focus:\n\nRelative to the entire dataset, there were little assessment_type (3%), movement_type (2%), enforcement_type (2%), permission_type (4%), report_type (2%), authority_level (1%). We will direct our focus on other areas instead of these.\nThere were no to little useful data in the fields named: activity_type, references, dates, time, and friendship_type. These were not utilised.\nWe directed our focus on Event_Communication, Event_Monitoring, and Event_VesselMovement.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#edges",
    "href": "Prototype.html#edges",
    "title": "Prototype",
    "section": "2.2 Edges",
    "text": "2.2 Edges\nThe code chunk below used ExpCATViz() of SmartEDA package to reveal the frequency distribution of all categorical fields in mc3_edges_raw tibble dataframe.\n\nFrequency Distribution of Categorical FieldsFilter by type == sent\n\n\n\n\nShow the code\nExpCatViz(data=mc3_edges_raw,\n          col=\"navyblue\")\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\nEntities are connected by edges to other Entities via an Event or Relationship node. The one exception to this is the Communication Event subtype, which is additionally linked to either an Event or Relationship node. The type field denotes the connector or edge type for the Entities, Event, and Relationship nodes. The edges are one of these: received, evidence_for, sent, NA.\n\n\n\n\nShow the code\n# Step 1: Filter for type == \"sent\"\nfiltered_edges &lt;- mc3_edges_raw %&gt;%\n  filter(type == \"sent\") %&gt;%\n  count(source) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(source = factor(source, levels = rev(unique(source))))  # descending \n\n# Step 2: Plot\nggplot(filtered_edges, aes(x = source, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    title = \"Distribution of 'sent' Edges type by Source\",\n    x = \"Source\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nWhat we understood from the information provided by Vast Challenge on Directional Edges:\n\nFor relationship as colleagues node or friends node, the node will have arrows/ edges pointing towards the relationship node.\nFor other relationships and events, the direction would be following the source and target.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#data-cleaning-and-wrangling",
    "href": "Prototype.html#data-cleaning-and-wrangling",
    "title": "Prototype",
    "section": "3.1 Data Cleaning and Wrangling",
    "text": "3.1 Data Cleaning and Wrangling\n\nCleaning and wrangling nodesUnique Node CountCleaning and wrangling edgesUnique Edges CountOther preparatory work\n\n\n\nconvert values in id field into character data type,\nexclude records with id value are na,\nexclude records with similar id values,\nexclude thing_collected , time , date, friendship_type field, and\nsave the cleaned tibble dataframe into a new tibble datatable called mc3_nodes_cleaned.\n\n\n\nShow the code\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected, -time, -date, -friendship_type)\n\n\n\n\n\n\n# A tibble: 27 × 2\n   column            unique_count\n   &lt;chr&gt;                    &lt;int&gt;\n 1 id                        1159\n 2 timestamp                  612\n 3 content                    581\n 4 label                       92\n 5 name                        73\n 6 findings                    70\n 7 start_date                  69\n 8 coordination_type           53\n 9 operational_role            35\n10 results                     33\n# ℹ 17 more rows\n\n\n\n\n\nrenamed source and target fields to from_id and to_id respectively,\nconverted values in from_id and to_id fields to character data type,\nexcluded values in from_id and to_id which not found in the id field of mc3_nodes_cleaned,\nexcluded records whereby from_id and/or to_id values are missing, and\nsaved the cleaned tibble dataframe and called it mc3_edges_cleaned.\n\n\n\nShow the code\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Parse to_id to get supertype and sub_type for target nodes (e.g., Event_Communication)\n  separate(to_id, into = c(\"to_id_supertype\", \"to_id_sub_type\", \"to_id_num\"),\n           sep = \"_\", remove = FALSE, fill = \"right\", extra = \"merge\") %&gt;%\n  # Filter to ensure from_id and to_id exist in mc3_nodes_cleaned (prevent orphaned edges)\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nprint(\"Columns in mc3_edges_cleaned after initial cleaning:\")\n\n\n[1] \"Columns in mc3_edges_cleaned after initial cleaning:\"\n\n\nShow the code\nprint(colnames(mc3_edges_cleaned))\n\n\n[1] \"id\"              \"is_inferred\"     \"from_id\"         \"to_id\"          \n[5] \"to_id_supertype\" \"to_id_sub_type\"  \"to_id_num\"       \"type\"           \n\n\nShow the code\nprint(\"Head of mc3_edges_cleaned after initial cleaning:\")\n\n\n[1] \"Head of mc3_edges_cleaned after initial cleaning:\"\n\n\nShow the code\nprint(head(mc3_edges_cleaned))\n\n\n# A tibble: 6 × 8\n  id    is_inferred from_id to_id to_id_supertype to_id_sub_type to_id_num type \n  &lt;chr&gt; &lt;lgl&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;     &lt;chr&gt;\n1 2     TRUE        Sam     Rela… Relationship    Suspicious     217       &lt;NA&gt; \n2 3     FALSE       Sam     Even… Event           Communication  370       sent \n3 5     TRUE        Sam     Even… Event           Assessment     600       &lt;NA&gt; \n4 3013  TRUE        Sam     Rela… Relationship    Colleagues     430       &lt;NA&gt; \n5 &lt;NA&gt;  TRUE        Sam     Rela… Relationship    Friends        272       &lt;NA&gt; \n6 &lt;NA&gt;  TRUE        Sam     Rela… Relationship    Colleagues     215       &lt;NA&gt; \n\n\n\n\n\n\nShow the code\n# Find the number of unique types in each column\nunique_counts &lt;- mc3_edges_cleaned %&gt;%\n  summarise_all(n_distinct) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"column\", values_to = \"unique_count\")\n\n# Print the unique counts for each column\nprint(unique_counts)\n\n\n# A tibble: 8 × 2\n  column          unique_count\n  &lt;chr&gt;                  &lt;int&gt;\n1 id                      3170\n2 is_inferred                2\n3 from_id                 1052\n4 to_id                   1156\n5 to_id_supertype           71\n6 to_id_sub_type            21\n7 to_id_num                860\n8 type                       4\n\n\n\n\nNext, code chunk below will be used to create mapping of character id in mc3_nodes_cleaned to row index\n\n\nShow the code\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\n\nNext, the code chunk below was used to join and convert from_id and to_id to integer indices. At the same time we also dropped rows with unmatched nodes.\n\n\nShow the code\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  # Filter out edges where either source or target node was not found\n  filter(!is.na(from) & !is.na(to)) %&gt;%\n  # Select all columns to carry forward to mc3_edges_final\n  select(from, to, id, is_inferred, type, # Original edge attributes\n         from_id, to_id, to_id_supertype, to_id_sub_type, to_id_num # Original IDs and parsed target type\n         )\n\n\nNext the code chunk below was used to subset nodes to only those referenced by edges.\n\n\nShow the code\nused_node_indices &lt;- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\n\nWe then used the code chunk below to rebuild lookup from old index to new index.\n\n\nShow the code\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(used_node_indices)\n)\n\n\nLastly, the code chunk below was used to update edge indices to match new node table.\n\n\nShow the code\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  # Explicitly select all columns that are needed downstream\n  select(from = from_new, to = to_new,\n         id, is_inferred, type,\n         from_id, to_id, to_id_supertype, to_id_sub_type, to_id_num)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#building-the-tidygraph-object",
    "href": "Prototype.html#building-the-tidygraph-object",
    "title": "Prototype",
    "section": "3.2 Building the tidygraph object",
    "text": "3.2 Building the tidygraph object\n\nBuild the object-tbl_graphExamining the object\n\n\n\n\nShow the code\nmc3_graph &lt;- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)\n\n\n\n\n\n\nShow the code\nstr(mc3_graph)\n\n\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 28\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 8\n  .. ..$ id             : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  .. ..$ is_inferred    : logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type           : chr [1:3226] NA \"sent\" NA NA ...\n  .. ..$ from_id        : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  .. ..$ to_id          : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  .. ..$ to_id_supertype: chr [1:3226] \"Relationship\" \"Event\" \"Event\" \"Relationship\" ...\n  .. ..$ to_id_sub_type : chr [1:3226] \"Suspicious\" \"Communication\" \"Assessment\" \"Colleagues\" ...\n  .. ..$ to_id_num      : chr [1:3226] \"217\" \"370\" \"600\" \"430\" ...\n $ :&lt;environment: 0x00000203a082b508&gt; \n - attr(*, \"active\")= chr \"nodes\"",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#visualising-the-knowledge-graph--ggraph",
    "href": "Prototype.html#visualising-the-knowledge-graph--ggraph",
    "title": "Prototype",
    "section": "5.1 Visualising the knowledge graph- ggraph",
    "text": "5.1 Visualising the knowledge graph- ggraph\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\nShow the code\nset.seed(1234)\n\n\nIn the code chunk below, ggraph functions are used to create the whole graph.\n\nThe Graph- ggraphThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`),\n                  size = 2) +\n  geom_node_text(aes(label = type),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nThe entire graph was rather detailed and it was hard to discover useful patterns. In order to gain meaningful visual discovery, we had to look into the details. For instance, we would next plot sub-graphs or interactive graphs."
  },
  {
    "objectID": "Prototype.html#visualising-the-knowledge-graph--visnetwork",
    "href": "Prototype.html#visualising-the-knowledge-graph--visnetwork",
    "title": "Prototype",
    "section": "5.2 Visualising the knowledge graph- VisNetwork",
    "text": "5.2 Visualising the knowledge graph- VisNetwork\nVisNetwork provides the user to understand relationships through interactivity. For instance:\n\nThe individual nodes can be selected from the drop-down menu to view its connected nodes and edges.\nThe hover tooltip provides additional details from fields such as content, coordination_type, findings, destination, operational_role, results, and jurisdiction_type based on the related id information from mc3_nodes_final."
  },
  {
    "objectID": "Prototype.html#the-graph--visnetwork",
    "href": "Prototype.html#the-graph--visnetwork",
    "title": "Prototype",
    "section": "The Graph- VisNetwork",
    "text": "The Graph- VisNetwork\n\n\n\n\n\n\n\n\n\n\nShow the code\n# ---- 1. Define styles and legends ----\n\nevent_subtypes &lt;- c(\n  \"Communication\", \"Monitoring\", \"VesselMovement\", \"Assessment\",\n  \"Collaborate\", \"Endorsement\", \"TourActivity\", \"TransponderPing\",\n  \"Harbor Report\", \"Fishing\", \"Criticize\"\n)\n\nrelationship_subtypes &lt;- c(\n  \"Coordinates\", \"AccessPermission\", \"Operates\", \"Colleagues\",\n  \"Suspicious\", \"Reports\", \"Jurisdiction\", \"Unfriendly\", \"Friends\"\n)\n\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",         # type level\n  \"Relationship\" = \"#AF8DC3\"   # type level\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",              # type level\n  \"Relationship\" = \"square x\"    # type level\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n# ---- 2. Prepare nodes ----\nnodes &lt;- mc3_nodes_final %&gt;%\n  mutate(\n    label = ifelse(is.na(name), id, name),\n    \n    # These parts are for pulling the related data from other fields\n    tooltip_extra = case_when(\n      type == \"Event\" & sub_type == \"Communication\" ~ content,\n      type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n      type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n      type == \"Event\" & sub_type == \"Assessment\" ~ results,\n      type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n      type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n      type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n      TRUE ~ NA_character_\n    ),\n    \n    title = paste0(\n      \"&lt;b&gt;\", label, \"&lt;/b&gt;&lt;br&gt;\",\n      \"Type: \", type, \"&lt;br&gt;\",\n      \"Sub-type: \", sub_type, \"&lt;br&gt;\",\n      ifelse(!is.na(tooltip_extra), paste0(\"&lt;br&gt;&lt;b&gt;Details:&lt;/b&gt; \", tooltip_extra), \"\")\n    ),\n    \n    # Fallback logic: if sub_type is NA or not in styling list, use type instead\n    group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)\n  ) %&gt;%\n  select(id, label, group, title) %&gt;%\n  distinct()\n\n# ---- 3. Prepare directed edges (type == \"sent\") ----\n\nedges &lt;- mc3_edges_final %&gt;%\n  filter(from_id %in% nodes$id & to_id %in% nodes$id) %&gt;%\n  select(from = from_id, to = to_id)\n\n# ---- 4. Build visNetwork ----\n\nnet &lt;- visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visNodes(font = list(\n    size = 14,\n    color = STYLES$node_label_dark,\n    face = STYLES$font_family,\n    vadjust = -15\n  ))\n\n# ---- 5. Apply shape and color per group ----\n\nfor (group_name in names(node_legend_colors_plot)) {\n  net &lt;- net %&gt;% visGroups(\n    groupname = group_name,\n    color = node_legend_colors_plot[[group_name]],\n    shape = node_legend_shapes_plot[[group_name]]\n  )\n}\n# ---- 6. Add legend ----\n\nused_groups &lt;- unique(nodes$group)\n\nlegend_df &lt;- tibble::tibble(\n  label = used_groups,\n  shape = node_legend_shapes_plot[used_groups],\n  color = node_legend_colors_plot[used_groups]\n) %&gt;%\n  distinct(label, .keep_all = TRUE)  # remove duplicates just in case\n\nnet &lt;- net %&gt;% visLegend(\n  addNodes = legend_df,\n  ncol = 2,                         # number of columns\n  position = \"left\",              \n  main = \"Entity (Sub)Types\",      # title\n  useGroups = FALSE                # show custom legend entries\n)\n# ---- 7. Render ----\nnet",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#all-communications",
    "href": "Prototype.html#all-communications",
    "title": "Prototype",
    "section": "6.1 All Communications",
    "text": "6.1 All Communications\nSince the content column determines the important events and relationships, the communication sub_type in the original nodes file would be useful. Thus, the communication to_id_sub_type and from_id_sub_type from the original edges file will also be useful.\n\n6.1.1 Creation of a timeline of all radio communications in table format\n\nThe TableThe Code\n\n\n\n\n\n\n|timestamp           |sender_name |recipient_name       |content                                                                                                                                                                                                                                                                                    |\n|:-------------------|:-----------|:--------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|2040-10-05 10:48:00 |Sam         |Kelly                |Hey Kelly, it's Sam. This permit approval seems fishy. Could you get details on who signed off on it while you're at the harbor? I need to understand these 'special access corridors' before my meeting with Elise tomorrow.                                                              |\n|2040-10-01 08:13:00 |Kelly       |Sam                  |Sam, it's Kelly! Let's meet at Sunrise Point at 7 AM for birdwatching. Bring your new binoculars and some water. I've heard there might be some rare shorebirds passing through this weekend. Can't wait!                                                                                  |\n|2040-10-07 08:11:00 |Kelly       |Sam                  |Hey Sam, it's Kelly! Got some photos of those crates - definitely marked 'fragile' and 'handle with care.' Neptune's crew is being super secretive. They're using special loading equipment I've never seen before. See you at 7 for birdwatching!                                         |\n|2040-10-05 09:45:00 |Nadia Conti |Haacklee Harbor      |Haacklee Harbor, this is Nadia Conti. I need to cancel the special access corridor arrangements for Nemo Reef immediately. Plans have changed due to unforeseen circumstances. Destroy all related documentation. I'll contact you when we're ready to proceed with alternative locations. |\n|2040-10-05 09:49:00 |Nadia Conti |Oceanus City Council |This is Nadia Conti. My cancellation was due to scheduling conflicts with our tourism development initiatives. I wasn't aware of any permit approvals. I'll submit revised documentation for alternative sustainable tourism proposals next week.                                          |\n|2040-10-08 08:18:00 |Nadia Conti |Liam Thorne          |Liam, Nadia here. Need your services urgently. Investigation brewing around Nemo Reef permits. Double your usual fee if you can ensure Harbor Master remains cooperative through next week. Meet at the usual place tomorrow, 10PM.                                                        |\n|2040-10-08 08:25:00 |Nadia Conti |Neptune              |Neptune, this is Nadia. Need clarity on 'underwater foundation work' at Nemo Reef. This extends beyond our agreed scope. Meet me at the marina tomorrow at 6AM to discuss implications and additional resource requirements.                                                               |\n|2040-10-08 08:30:00 |Nadia Conti |Neptune              |Neptune, Nadia here. Just confirming our 0600 meeting at the marina. I've reviewed the modified equipment specs with The Accountant. Please bring detailed timeline for foundation work and cost implications. We need to stay under radar.                                                |\n|2040-10-08 11:23:00 |Nadia Conti |Marlin               |Marlin, Nadia here. I understand you're inquiring about eastern shoal routes. Those are temporary diversions due to equipment transport needs. I'll have Davis provide the necessary documentation tonight. Nothing to be concerned about.                                                 |\n|2040-10-12 08:44:00 |Nadia Conti |Liam Thorne          |Liam, Nadia here. Redirect all remaining operations from southwest immediately. Move equipment to our secondary location. I'll handle EcoVigil through proper channels. Meet me at the usual place at 2100 hours with updated documentation.                                               |\n\n\n\n\n# --- 1. Extract All Communications ---\n# Logic: Sender (source) --sent--&gt; Event_Communication (target) --received--&gt; Recipient (target)\n# This extracts all communication events\n\n# --- 2. Clean and Prepare Nodes ---\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  # Rename 'type' to 'supertype' to reduce confusion with communication type\n  rename(supertype = type) %&gt;%\n  # Select only columns that are needed and are consistently present\n  select(id, name, sub_type, content, timestamp) \n\n# --- 3. Clean and Prepare Edges ---\n# Rename 'type' in edges to 'edge_type' to avoid conflict with node 'supertype'\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target,\n         edge_type = type) %&gt;% # Renamed 'type' to 'edge_type'\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Filter out any edges where from_id or to_id are not in cleaned nodes\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id)\n\nother_communications_df &lt;- mc3_edges_cleaned %&gt;%\n  filter(edge_type == \"sent\") %&gt;% # Start with 'sent' edges\n  # Join with nodes to get content and timestamp of the Event_Communication node\n  left_join(mc3_nodes_cleaned %&gt;% select(id, content, timestamp),\n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(event_id = to_id, event_content = content, event_timestamp = timestamp) %&gt;%\n  # Now, find the recipient of this communication event\n  left_join(mc3_edges_cleaned %&gt;%\n              filter(edge_type == \"received\") %&gt;%\n              select(event_id_match = from_id, recipient_id = to_id),\n            by = c(\"event_id\" = \"event_id_match\")) %&gt;%\n  # Join with nodes to get the sender's name and sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type),\n            by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(sender_id_actual = from_id, sender_name = name, sender_sub_type = sub_type) %&gt;%\n  # Join with nodes to get the recipient's name and sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type),\n            by = c(\"recipient_id\" = \"id\")) %&gt;%\n  rename(recipient_name = name, recipient_sub_type = sub_type) %&gt;%\n  # Select and rename final columns for all communications\n  select(\n    communication_type = edge_type, # This will be \"sent\" from original filter\n    sender_id = sender_id_actual,\n    sender_name,\n    sender_sub_type,\n    recipient_id,\n    recipient_name,\n    recipient_sub_type,\n    event_id,\n    content = event_content,\n    timestamp = event_timestamp\n  ) \n\n# create a timeline visualization or inspect content.\nprint(knitr::kable(head(other_communications_df %&gt;%\n                          select(timestamp, sender_name, \n                                 recipient_name, content), 10),\n                   format = \"markdown\", align = \"l\"))\n\n\n\n\n\n6.1.2 Static Chord Diagram- All Communicators\n\n\n\n\n\n\n\n\n\nFindings:\nThe thickness of each ribbon (chord) represents the magnitude of the relationship. A thicker ribbon represents more frequent communications (sent + received) between a sender and recipient.\nHere, we have an overview of paired communicators who have higher frequencies. We also can see the links between communicators. These are the entities who communicated frequently with others that we might want to focus on:\n\nPerson: The Intern, The Lookout, Clepper Jensen, Davis, Miranda Jordan, Mrs. Money.\nOrganization: Oceanus City Council, Green Guardian\nVessel: Reef Guardian, Neptune, Mako, Remora\nLocation: Himark Habor\nGroup: N/A\n\n\n\n6.1.3 Heatmap of Correspondences\n\nHeatmapThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Count interactions\nadj_df &lt;- other_communications_df %&gt;%\n  count(sender_name, recipient_name, name = \"count\")\n\n# Step 2: Compute total sent and received counts\nsender_order &lt;- adj_df %&gt;%\n  group_by(sender_name) %&gt;%\n  summarise(total_sent = sum(count)) %&gt;%\n  arrange(desc(total_sent)) %&gt;%\n  pull(sender_name)\n\nrecipient_order &lt;- adj_df %&gt;%\n  group_by(recipient_name) %&gt;%\n  summarise(total_received = sum(count)) %&gt;%\n  arrange(desc(total_received)) %&gt;%\n  pull(recipient_name)\n\n# Step 3: Reorder factor levels\nadj_df &lt;- adj_df %&gt;%\n  mutate(\n    sender_name = factor(sender_name, levels = sender_order),\n    recipient_name = factor(recipient_name, levels = recipient_order)\n  )\n\n# Step 4: Plot heatmap\nggplot(adj_df, aes(x = recipient_name, y = sender_name, fill = count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"navyblue\") +\n  labs(\n    title = \"Sender-Recipient Communication Heatmap\",\n    subtitle = \"Top communicators sorted to bottom-left\",\n    x = \"Recipient\",\n    y = \"Sender\",\n    fill = \"Messages\"\n  ) +\n  theme_minimal(base_size = 10) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(size = 12, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    panel.grid = element_blank()\n  )\n\n\n\nFindings:\nAfter extraction of the entities who communicated frequently (from the Static Chord Diagram), we tabled who they communicated with by using the heatmap. E.g. Name1 communicated with Name2.\n\n\n\n\n\n\n\n\nName 1 Subtype\nName1\nName2\n\n\n\n\nPerson\nThe Intern\nThe Lookout, Mrs. Money\n\n\nPerson\nClepper Jensen\nMiranda Jordan\n\n\nPerson\nDavis\nNeptune\n\n\nPerson\nMrs. Money\nThe Intern, The Middleman, Boss\n\n\nVessel\nMako\nRemora, Green Guardians, Oceanus City Council, Neptune, Reef Guardians, Himark Harbor, Davis, Sentinel, Paackland Habor, Samantha Blake, Serenity, Osprey\n\n\nVessel\nRemora\nMako, Neptune, Himark Habor, Davis, Paackland Harbor, V. Miesel Shipping, Marlin, Small Fry\n\n\nVessel\nNeptune\nMako, Himark Habor, Remora, Mrs Money, V. Miesel Shipping, Nadia, Serenity\n\n\nVessel\nReef Guardian\nGreen Guardians, Oceanus City Council, Mako, Paackland Harbor, EcoVigil, Serenity, Defender\n\n\nOrganization\nGreen Guardian\nGreen Guardians, Oceanus City Council, The Lookout, Sentinel, Horizon\n\n\nOrganization\nOceanus City Council\nGreen Guardians, Reef Guardians, Himark Harbor, Sentinel, Paackland Harbor, Liam Thorne, Samantha Blake, Haacklee Harbor\n\n\nLocation\nHimark Habor\nOceanus City Council, Mako, Serenity, Marlin",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#people-and-vessels",
    "href": "Prototype.html#people-and-vessels",
    "title": "Prototype",
    "section": "7.2 People and Vessels",
    "text": "7.2 People and Vessels\nDue to a large number of entity subtypes as people and vessels in 7.1.4, we then looked into the characters’ and vessel’s identity and their actual communication content.\n\n7.2.1 Filter by Vessel and Person only\n\nThe Code\n\n\n\n\nShow the code\nperson_vessel_df &lt;- other_communications_df %&gt;%\n  filter(\n    (sender_sub_type == \"Person\" & recipient_sub_type == \"Vessel\") |\n    (sender_sub_type == \"Vessel\" & recipient_sub_type == \"Person\") |\n    (sender_sub_type == \"Person\" & recipient_sub_type == \"Person\") |\n    (sender_sub_type == \"Vessel\" & recipient_sub_type == \"Vessel\")\n  )\n\n\n\n\n\n\n\n7.2.2 Plotted Timeline- People & Vessels\n\n\nShow the code\n# --- FACTORING and DATETIME CLEANING ---\nperson_vessel_df_for_plot &lt;- person_vessel_df %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    sender_sub_type = factor(sender_sub_type, levels = c(\"Person\", \"Vessel\")),\n    communicating_pair_sorted = paste(pmin(sender_name, recipient_name), pmax(sender_name, recipient_name), sep = \" & \")\n  )\n\n# --- WRAPPING CONTENT AND TOOLTIP ---\nplot_data1 &lt;- person_vessel_df_for_plot %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    date = as.Date(timestamp),\n    time = format(timestamp, \"%H:%M:%S\"),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", date, \"&lt;br&gt;\",\n      \"&lt;b&gt;Time:&lt;/b&gt; \", time, \"&lt;br&gt;\",\n      \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Event_id:&lt;/b&gt; \", event_id, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# Plot\np &lt;-ggplot(plot_data1, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = sender_id,\n    shape = sender_sub_type,\n    text = tooltip_text\n  ),show.legend = c(color = TRUE, shape = FALSE), \n  size = 2, alpha = 0.7) +\n  scale_shape_manual(values = c(\"Person\" = 16, \"Vessel\" = 17)) +\n  facet_wrap(~ sender_sub_type, ncol = 1, scales = \"fixed\") +\n  scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"14:00:00\")),  # reversed to show time top-to-bottom\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\", \"14:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\")\n)+\n  scale_x_date(\n  date_breaks = \"1 day\",\n  date_labels = \"%d %b\"\n)+\n  labs(\n    title = \"Communication Events Over Time (Sender's Perspective)\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    color = \"Sender (subtype, name)\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 8), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# --- Convert to interactive plot ---\nggplotly(p, tooltip = \"tooltip_text\")\n\n\n\n\n\n\n\n7.2.2.1 Findings on People/ Vessels:\n\nCore logic:\n\nIf two names appear as sender and recipient in the same message, they cannot belong to the same person — i.e., they’re not aliases of each other.\nIf two names sent a message at the exact time, they cannot belong to the same person.\nFor instance, if Nadia sent a message to The Accountant, they would not be the same individual. If Nadia sent a message at 10am to The Accountant and The Lookout also sent a message at 10am to The Intern, Nadia and The Lookout cannot be the same person.\n\nSelect only The Accountant, Mrs. Money, Elise: We see close timings between Mrs. Money and Elise on 8 Oct, and 10 Oct. These were on the same topic. Elise then disappears from radar on 10 Oct. She reappears as The Accountant and Mrs. Money on 11 Oct on the same topic and remains only as The Accountant till 14 Oct.\nSelect only Liam and The Middleman: The Middleman disappeared on 7 Oct and appeared as Liam on 8 Oct. On 11 Oct Mrs. Money asked The Middleman if anything was found by conservation vessels. On the same day, Liam reappeared and replied Elise that nothing was found by them.\nSelect only The Boss and Nadia: The Boss disappeared on 5 Oct and reappeared as Nadia on 8 Oct. Likely the same person.\nSelect only Small Fry and Rodriguez: on 2 Oct Rodriguez corresponded with Remora and Mako on meeting at the slip #14. It happened again on 14 Oct as he took on dual roles and responded to the same message with different names. Likely the same person.\nSelect only The Lookout and Sam: on 7 Oct Sam asked Kelly to get information on who authorized the permit. 2 minutes later, The Lookout (Kelly) responded to The Intern (Sam), that it was signed by Jensen from City Council.\nSeawatch only appeared on 10 Oct but Horizon talked to Seawatch on 8 Oct. Therefore, some other entity is Seawatch before or during 8 Oct. Defender told Seawatch on 3 Oct at 8.39am that it increased its patrol and informed Seawatch to maintain vigilance. The Lookout (Seawatch) responded to Sentinel (Defender) at 8.41am that it acknowledged the need for vigilance.\nAfter getting a general idea of the characters’ involvement, we looked at the interactions in 7.3.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#discussion-interpretation-on-all-communications",
    "href": "Prototype.html#discussion-interpretation-on-all-communications",
    "title": "Prototype",
    "section": "7.3 Discussion/ Interpretation on all communications:",
    "text": "7.3 Discussion/ Interpretation on all communications:\nFrom the interactive plot, we were able to select certain names of individuals and/or vessels from the legend and read their conversations. We segmented entities based on our first cut of observations of the following people or vessels and rated them as suspicious or non-suspicious. We tabled out what we have learnt with variables: Sender, Recipient, Commonalities, Rationale, Suspicious?, Date, Event Id, in Section 7.3.1 and 7.3.2.\n\n7.3.1 Suspicious Conversations\n\n\nShow the code\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr) # For separate_rows, if needed for 'Event Id' later\n\n# Create the data frame using tribble, consolidating multi-line entries\ndf_new_data &lt;- tribble(\n  ~Sender, ~Recipient, ~Commonalities, ~Rationale, ~Suspicious_Status, ~Date, ~Event_Id,\n  \"The Lookout (Person)\", \"The Intern (Person)\", \"Mako\", \"Jensen from City Council signed a permit to set a corridor for Mako vessel.\", \"Jensen\", \"5/10\", \"371\",\n  \"Glitters Team aka. Sailor Shift Team\", \"Boss (Person)\", \"Permit, Commissioner Torres\", \"Glitters thanked their Boss who got Commissioner Torres to sign off the permit\", \"Nadia aka The Boss\", \"6/10\", \"389\",\n  \"Remora (Vessel)\", \"Sailor Shift Team aka. Glitters Team\", \"Permit, Commissioner Torres\", \"Davis thanked Nadia who got Commissioner Torres to sign off the permit\", \"Nadia aka The Boss\", \"6/10\", \"388\",\n  \"Mrs. Money (Person)\", \"Mako (Vessel); Neptune (Vessel)\", \"Mako, Remora, Neptune\", \"Mrs. Money is the Financial Controller who provides the payment protocols for Mako and Remora's captions. She also provides the encryption protocols and transfer devices. Mrs. Money coordinates payment protocols for Remora and Mako captains\", \"Elise aka. Mrs. Money\", \"7/10\", \"458 and 464\",\n  \"Neptune/ Neptune Captain\", \"Elise aka. Mrs. Money (Person)\", \"Remora, Mako\", \"Neptune told her to coordinate payment protocols for Remora and Mako captains\", \"Elise aka. Mrs. Money\", \"7/10\", \"456 and 518\",\n  \"Remona (Vessel)\", \"Rodriquez (Person)\", \"Sailor Shift\", \"Nemo Reef selected for Sailor Shift's music shoot.; Nadia personally handled permits for Nemo Reefs after meeting Davis.\", \"Both\", \"2/10\", \"153 and 328\",\n  \"Remona (Vessel)\", \"Nadia (Person)\", \"Delta 3, Sailor Shift\", \"Tourism facade created by Remona and awaiting installation of underwater lighting placements at Nemo Reef.\", \"Both\", \"14/10\", \"943\",\n  \"Davis (Person)\", \"Mako (Vessel)\", \"Rodriquez, Nadia, Neptune\", \"Rodriquez will help with logistics.\", \"Both\", \"2/10\", \"115\",\n  \"Davis (Person)\", \"Mako (Vessel)\", \"Rodriquez, Nadia, Neptune\", \"V. Miesel's Marine Research Permit is CR-7844. There is a 5 day deadline from 8 Oct.\", \"Both\", \"8/10\", \"548\",\n  \"Davis (Person)\", \"Mako (Vessel)\", \"Rodriquez, Nadia, Neptune\", \"V. Miesel approved their operational authority.\", \"Both\", \"12/10\", \"802\",\n  \"Davis (Person)\", \"Remona (Vessel)\", \"Client\", \"Davis wants to maintain client's privacy with Paackland Harbour.\", \"Both, and also Paackland Harbour\", \"4/10\", \"282\",\n  \"Mako (Vessel)\", \"Davis (Person)\", \"Permit CR-7844, Boss\", \"Davis is a captain.\", \"Both\", \"5/10\", \"349\",\n  \"Mako (Vessel)\", \"Boss (Person)\", \"Boss, Samantha\", \"Oceanus Council approved Mako's departure to Nemo Reef with minimal documentation.\", \"Oceanus Council\", \"5/10\", \"365\",\n  \"Boss (Person)\", \"Marko (Vessel)\", \"Mission, Boss\", \"Informed Marko to abort mission as conservation patrols are tracking it\", \"Both\", \"4/10\", \"316\",\n  \"Small Fry aka Rodriquez (Person)\", \"Remora (Vessel, Mako (Vessel)\", \"Slip #14, Glitters Team, Sailor Team\", \"Mako asked Rodriquez when he could come by slip #14.; Small Fry replied he would come by slip #14 in 30 minutes time.; Small Fry surprised that Glitters Team filing for paperwork downtown for protected area of Nemo Reef.\", \"Both\", \"2/10\", \"142, 143 and 156\",\n  \"Neptune\", \"Nadia (Person); Neptune (Vessel)\", \"Equipment specs\", \"Neptune asked to meet Nadia at 0600 and confirm the equipment specs approved by Elise.; Nadia confirmed the time with Neptune and agreed to show her reviewed equipment specs from The Accountant.\", \"Both; Elise aka The Accountant\", \"8/10\", \"537 and 738\",\n  \"Knowles (Vessel)\", \"Davis (Person)\", \"Boss\", \"Instructed by Mako to provide equipment transfer.\", \"Both\", \"14/10\", \"1001 and 1003\",\n  \"Sentinel(Vessel)\", \"Mako (Vessel)\", \"Permit\", \"Mako told Sentinel it was operating under NR-1045.\", \"Mako\", \"7/10\", \"467\",\n  \"Mako (Vessel)\", \"Sentinel (Vessel)\", \"Permit\", \"Sentinel asked the reasons for Mako operating under permit NR-1045\", \"Mako\", \"8/10\", \"574\",\n  \"Mako (Vessel)\", \"Sentinel (Vessel)\", \"Permit\", \"Mako told Sentinel it was operating under permit CR-7844 (marine equipment transport) not NR-1045\", \"Mako\", \"8/10\", \"575\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez\", \"Rodriquez filed for permits under Sailor Shifts Team for 2 commercial and 1 private yatch to perform environmental sampling.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"2/10\", \"130\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez\", \"Rodriquez is connected to a mining consortium with previous violations in protected areas.\", \"Rodriquez is suspicious. The communicators are not suspicious\", \"2/10\", \"134\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez\", \"Rodriquez is connected to Council Knowles and they are related to V. Miesel Shipping which is possibly a shell company which has vessels.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"3/10\", \"201\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez is suspicious\", \"Council Knowles' brother-in-law owns the offshore bank account to V. Miesel Shipping. The company is involved in rare earth extraction.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"3/10\", \"204\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez is suspicious\", \"Knowles accepted cash from Rodriquez.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"3/10\", \"206\"\n)\n\n# Process the data (primarily for consistent whitespace and Event_Id splitting if necessary)\ndf_processed &lt;- df_new_data %&gt;%\n  # Standardize delimiters and remove excess whitespace across all character columns.\n  mutate(\n    across(where(is.character), ~ str_replace_all(.x, \"[,\\n]+\", \", \") %&gt;% str_trim())\n  ) %&gt;%\n  # For Event_Id, replace \"and\" with comma and then separate rows if needed\n  mutate(Event_Id = str_replace_all(Event_Id, \" and \", \", \")) %&gt;%\n  mutate(across(where(is.character), str_trim)) %&gt;%\n  mutate(Event_Id = as.character(Event_Id)) # Ensure Event_Id is character\n\n# Create the reactable table\nreactable(\n  df_processed,\n  filterable = TRUE,\n  searchable = TRUE,\n  paginationType = \"numbers\",\n  defaultPageSize = 5,\n  showPageSizeOptions = TRUE,\n  pageSizeOptions = c(5, 10, 20, 50, 100),\n  striped = TRUE,\n  highlight = TRUE,\n  columns = list(\n    Sender = colDef(name = \"Sender\", minWidth = 120),\n    Recipient = colDef(name = \"Recipient\", minWidth = 120),\n    Commonalities = colDef(name = \"Commonalities\", minWidth = 150),\n    Rationale = colDef(name = \"Rationale\", minWidth = 300),\n    # Rename Suspicious_Status for display\n    Suspicious_Status = colDef(name = \"Suspicious?\", minWidth = 150),\n    # Date column as text, no special date sorting\n    Date = colDef(name = \"Date\", minWidth = 80, align = \"center\"),\n    Event_Id = colDef(name = \"Event Id\", minWidth = 80, align = \"center\")\n  ),\n  theme = reactableTheme(\n    borderColor = \"#dfe2e5\",\n    stripedColor = \"#f6f8fa\",\n    highlightColor = \"#f0f5f9\",\n    cellPadding = \"8px 12px\",\n    style = list(fontFamily = \"Verdana, Geneva, sans-serif\", fontSize = \"14px\"),\n    headerStyle = list(\n      \"&.rt-th:hover\" = list(backgroundColor = \"#e0e6eb\"),\n      fontSize = \"15px\",\n      fontWeight = 600,\n      color = \"#333\",\n      background = \"#f7f7f7\"\n    ),\n    rowSelectedStyle = list(backgroundColor = \"#e6f2ff\", \"&:hover\" = list(backgroundColor = \"#e6f2ff\")),\n    searchInputStyle = list(width = \"100%\", margin = \"5px 0\", padding = \"5px\"),\n    filterInputStyle = list(width = \"100%\", margin = \"2px 0\", padding = \"4px\")\n  )\n)\n\n\n\n\n\n\n\n\n7.3.2 Non-suspicious conversations\n\n\nShow the code\n# Load necessary packages\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr) # For separate_rows\nlibrary(lubridate) # For date parsing\n\n# 1. Manually parse the data into a tribble\n# Each row in the tribble corresponds to a logical entry from provided text.\n# Multi-line strings within a cell are captured using '\\n'.\n# The 'Suspicious?' column is named 'Suspicious_Status' in R to avoid special characters,\n# and will be renamed in the reactable column definition for display.\ndf_raw_input &lt;- tribble(\n  ~Sender, ~Recipient, ~Commonalities, ~Rationale, ~Suspicious_Status, ~Date, ~Event_Id,\n  \"Samantha (Person)\", \"Sailor Shift Team aka Glitters Team (Organization)\", \"Permit, Nemo Reef, Music Video\", \"Samantha was assisting Sailor Shift Team to coordinate the permit and equipment rental for their music video and wanted confirmation on Nemo Reef as their intended location.\", \"Unsure\", \"1/10\", \"64\",\n  \"Sailor Shift Team aka Glitters Team (Organization)\", \"Samantha (Person)\", \"Permit, Nemo Reef,\", \"Glitters Team confirmed with Samantha that they would like to use Nemo Reef as their primary location\", \"Unsure\", \"1/10\", \"66\",\n  \"Mako (Vessel)\", \"Samantha (Person)\", \"Nemo Reef Permit\", \"Mako claims that Samantha has a coordination team. Preparing for an event in a week's time from 6 Oct.\", \"Samantha is not\", \"6/10\", \"380\",\n  \"Mako (Vessel)\", \"Samantha (Person)\", \"Nemo Reef Permit\", \"Samantha advised them to stop activities which might be illegal without permit\", \"Samantha is not\", \"10/10\", \"687\",\n  \"The Lookout (Person)\", \"Sentinel (Vessel)\", \"Marina's Dream, Music Video\", \"Spotted 3 suspicious vessels around Nemo Reef on 3/10.\", \"Both are not\", \"3/10\", \"171\",\n  \"The Lookout (Person)\", \"Sentinel (Vessel)\", \"Marina's Dream, Music Video\", \"Spotted music video production on 13/10\", \"Both are not\", \"13/10\", \"912\",\n  \"The Lookout (Person)\", \"Horizon (Vessel)\", \"Music Video\", \"Found it suspicious to spot lighting rigs and cameras at 12pm. Wanted Horizon to investigate\", \"Both are not\", \"13/10\", \"926\",\n  \"EcoVigil (Vessel)\", \"Liam (Person)\", \"ROVs\", \"Collection of water samples using ROVs\", \"EcoVigil is not\", \"11/10\", \"737 and 751\" # \"and\" will be handled by separate_rows\n)\n\n# 2. Process the data for display and sorting\ndf_processed &lt;- df_raw_input %&gt;%\n  # Standardize delimiters and remove excess whitespace across all character columns.\n  # This flattens multi-line strings within cells and makes 'separate_rows' more reliable.\n  mutate(\n    across(where(is.character), ~ str_replace_all(.x, \"[,\\n]+\", \", \") %&gt;% str_trim())\n  ) %&gt;%\n  # Handle the \"and\" in Event_Id, converting it to a comma for consistent splitting.\n  mutate(Event_Id = str_replace_all(Event_Id, \" and \", \", \")) %&gt;%\n  # Now, use separate_rows for Event_Id if it contains multiple comma-separated values.\n  # 'Date' column appears to be single-valued in this dataset, so it's not included here.\n  # If Date could also have multiple values (e.g., \"1/10, 2/10\"), you would add it to separate_rows.\n  separate_rows(Event_Id, sep = \", \", convert = FALSE) %&gt;%\n  # Trim whitespace again after separation in case of leading/trailing spaces\n  mutate(across(where(is.character), str_trim)) %&gt;%\n  # Convert Date to actual date objects for proper sorting.\n  # Using `dmy` for day/month/year format and assuming the current year (2025).\n  mutate(\n    FullDate = paste0(Date, \"/2025\"), # Add the current year for correct parsing\n    ParsedDate = dmy(FullDate, quiet = TRUE) # Convert to Date object (Day Month Year)\n  ) %&gt;%\n  # Order the data by parsed date and then event ID\n  arrange(ParsedDate, Event_Id) %&gt;%\n  select(-FullDate) %&gt;% # Remove the helper column\n  # Ensure Event_Id is character type for display purposes\n  mutate(Event_Id = as.character(Event_Id))\n\n# 3. Create the reactable table\nreactable(\n  df_processed,\n  filterable = TRUE, # Enable column filters at the top of each column\n  searchable = TRUE, # Add a global search box above the table\n  paginationType = \"numbers\", # Display page numbers (e.g., 1, 2, 3 instead of Prev/Next)\n  defaultPageSize = 5, # Show 5 rows per page by default\n  showPageSizeOptions = TRUE, # Allow users to select different page sizes\n  pageSizeOptions = c(5, 10, 20, 50, 100), # Available page size options\n  striped = TRUE, # Add alternating row colors for better readability\n  highlight = TRUE, # Highlight the row when the user hovers over it\n  # Define the default sorting for the table when it first loads\n  defaultSorted = list(ParsedDate = \"asc\"), # Sort by the hidden ParsedDate column in ascending order\n  columns = list(\n    # The 'ParsedDate' column is used internally for correct date sorting but is not displayed\n    ParsedDate = colDef(\n      show = FALSE\n    ),\n    # Define how each visible column should be displayed and behave\n    Date = colDef(\n      name = \"Date\", # Display name for the column header\n      defaultSortOrder = \"asc\", # Ensure initial sort is ascending for the displayed date\n      minWidth = 80, # Minimum width for the column to ensure content fits\n      align = \"center\" # Align text to the center for better presentation of dates\n    ),\n    Sender = colDef(name = \"Sender\", minWidth = 120),\n    Recipient = colDef(name = \"Recipient\", minWidth = 120),\n    Commonalities = colDef(name = \"Commonalities\", minWidth = 150),\n    Rationale = colDef(name = \"Rationale\", minWidth = 300),\n    # Custom definition for the 'Suspicious_Status' column to display its original name\n    Suspicious_Status = colDef(name = \"Suspicious?\", minWidth = 150),\n    Event_Id = colDef(\n      name = \"Event ID\", # Display name for the column header\n      minWidth = 80, # Minimum width\n      align = \"center\" # Align text to the center\n    )\n  ),\n  # Customize the visual theme of the reactable table for a consistent look and feel\n  theme = reactableTheme(\n    borderColor = \"#dfe2e5\", # Defines the color of table borders\n    stripedColor = \"#f6f8fa\", # Defines the background color of striped rows\n    highlightColor = \"#f0f5f9\", # Defines the background color when a row is hovered over\n    cellPadding = \"8px 12px\", # Sets the padding inside table cells\n    style = list(fontFamily = \"Verdana, Geneva, sans-serif\", fontSize = \"14px\"), # General font family and size for table content\n    headerStyle = list(\n      \"&.rt-th:hover\" = list(backgroundColor = \"#e0e6eb\"), # Hover effect for table headers\n      fontSize = \"15px\", # Font size for headers\n      fontWeight = 600, # Font weight for headers (bold)\n      color = \"#333\", # Text color for headers\n      background = \"#f7f7f7\" # Background color for headers\n    ),\n    rowSelectedStyle = list(backgroundColor = \"#e6f2ff\", \"&:hover\" = list(backgroundColor = \"#e6f2ff\")), # Style for selected rows\n    searchInputStyle = list(width = \"100%\", margin = \"5px 0\", padding = \"5px\"), # Style for the global search input box\n    filterInputStyle = list(width = \"100%\", margin = \"2px 0\", padding = \"4px\") # Style for individual column filter input boxes\n  )\n)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#community-detection-and-centrality-measure--ggraph",
    "href": "Prototype.html#community-detection-and-centrality-measure--ggraph",
    "title": "Prototype",
    "section": "7.5 Community Detection and Centrality Measure- ggraph",
    "text": "7.5 Community Detection and Centrality Measure- ggraph\n\n7.5.1 Community Detection- All\nSince we had an idea of the identity of the characters involved and their sub types, we wanted to uncover the communities they belonged to. We used the Louvian method for community detection to find communities that were densely connected internally but sparse to others.\n\nCommunity DetectionThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)  \n\n# --- STEP 1: Prepare the edge list ---\nedge_df &lt;- other_communications_df %&gt;%\n  select(sender_id, recipient_id) %&gt;%\n  filter(!is.na(sender_id) & !is.na(recipient_id)) %&gt;%\n  rename(from = sender_id, to = recipient_id) %&gt;%\n  distinct()\n\n# Remove self-loops\nedge_df &lt;- edge_df %&gt;% filter(from != to)\n\n# --- STEP 2: Create the graph object (undirected) ---\ng &lt;- tbl_graph(edges = edge_df, directed = FALSE)\n\n# --- STEP 3: Run Louvain community detection ---\ng &lt;- g %&gt;%\n  mutate(community = group_louvain())\n\n# --- STEP 4: Visualize the graph ---\nggraph(g, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(color = as.factor(community)), size = 5) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Community Detection in Communication Network\",\n       color = \"Community\")\n\n\n\n\n\n7.5.2 Centrality Measure- All\nWe then proceeded to use the PageRank centrality algorithm to assign a numerical weight to each node to reflect its importance. The community attribute we previously calculated was then assigned to this graph.\n\nPageRank Centrality AlgorithmThe NetworkThe Code\n\n\n\n\n# A tibble: 10 × 5\n   name                 pagerank degree betweenness closeness\n   &lt;chr&gt;                   &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Mako                   0.0756     37      220.      0.0179\n 2 Reef Guardian          0.0536     25      105.      0.0152\n 3 Oceanus City Council   0.0516     26       47.9     0.0147\n 4 Remora                 0.0436     21       39.0     0.0139\n 5 Neptune                0.0410     19       56.2     0.0145\n 6 V. Miesel Shipping     0.0355     17        9.84    0.0130\n 7 Nadia Conti            0.0354     17       27.9     0.0141\n 8 Himark Harbor          0.0347     17       22.6     0.0130\n 9 Sentinel               0.0331     16       27.8     0.0143\n10 Green Guardians        0.0318     15       27.4     0.0143\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234) \n\n# --- STEP: Compute Centrality Measures ---\ng &lt;- g %&gt;%\n  mutate(\n    pagerank = centrality_pagerank(),\n    degree = centrality_degree(),\n    betweenness = centrality_betweenness(),\n    closeness = centrality_closeness()\n  )\n\n# Show top 10 nodes by PageRank\ng %&gt;%\n  as_tibble() %&gt;%\n  select(name, pagerank, degree, betweenness, closeness) %&gt;%\n  arrange(desc(pagerank)) %&gt;%\n  head(10)\n\n# Visualize by Centrality\nggraph(g, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(size = pagerank, color = as.factor(community)), alpha = 0.8) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 3,\n                 max.iter = 5000) + # &lt;--- Increased this value \n  theme_void() +\n  labs(title = \"Network with PageRank Centrality\",\n       size = \"PageRank\", color = \"Community\")\n\n\n\n\n7.5.2.1 Findings:\n\nThere were around 6 closely associated groups. Community 5 (Clepper and Miranda) appeared to be segmented from the central group, due to the non-involvement from the nature of the investigative work.\nFrom the graph, we extracted the 11 influential nodes to focus on:\n\nCommunity 1: Reef Guardian, EcoVigil\nCommunity 2: Neptune, Remora, Nadia, V. Miesel Shipping, Davis\nCommunity 3: Mako\nCommunity 4: Mrs. Money, Boss, The Middleman\nCommunity 5: N/A as they were not very influential at global level\nCommunity 6: N/A as they were not very influential at global level\n\n\n\n\n\n7.5.3 Wordclouds- Bigram\n\nThe WordcloudsThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 1. Extract node community assignments\ng_node_communities &lt;- g %&gt;%\n  as_tibble() %&gt;%\n  select(sender_name = name, community)\n\n# 2. Join communication content with community assignments\ncontent_with_community &lt;- other_communications_df %&gt;%\n  left_join(g_node_communities, by = c(\"sender_name\")) %&gt;%\n  filter(!is.na(community), !is.na(content))\n\n# 3. Unnest tokens for unigrams\nunigrams &lt;- content_with_community %&gt;%\n  unnest_tokens(word, content, token = \"words\") %&gt;%\n  anti_join(stop_words, by = \"word\") %&gt;%\n  count(community, word, sort = TRUE)\n\n# 4. Unnest tokens for bigrams\nbigrams &lt;- content_with_community %&gt;%\n  unnest_tokens(bigram, content, token = \"ngrams\", n = 2) %&gt;%\n  separate(bigram, into = c(\"word1\", \"word2\"), sep = \" \") %&gt;%\n  filter(!word1 %in% stop_words$word,\n         !word2 %in% stop_words$word) %&gt;%\n  unite(bigram, word1, word2, sep = \" \") %&gt;%\n  count(community, bigram, sort = TRUE)\n\n# 5a. Plot word clouds per community\npar(mfrow = c(2, 3))  # 2 rows, 3 columns layout for 6 communities\nfor (i in sort(unique(bigrams$community))) {\n  words &lt;- bigrams %&gt;% filter(community == i)\n  \n  if (nrow(words) &lt; 1) next  # Skip if no words\n  \n  suppressWarnings({\n    set.seed(432)  # Set seed for reproducibility\n    wordcloud(words = words$bigram,  # &lt;-- FIXED here\n              freq = words$n,\n              max.words = min(20, nrow(words)),\n              scale = c(3, 0.5),\n              colors = brewer.pal(8, \"Dark2\"),\n              random.order = FALSE)\n  })\n  mtext(paste(\"Community\", i), side = 3, line = 1, adj = 0.5, cex = 1.5, col = \"black\")\n}\n\n\n\n\nCertain words stood out more by their size in the unigram and bigrams. To view clearer frequencies and patterns among the community, we furthered the visualisations into circular barcharts of bigrams.\n\n\n\n7.5.4 Circular barchart for Top Bigrams per Community\n\nThe Circular BarchartThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# --- Configuration ---\nnum_top_bigrams_per_community &lt;- 8\nempty_bar_count &lt;- 2 # gaps btw comm.\n#excluded_community &lt;- 5 # too little in community 5\n\n# --- 1. Prepare the Combined Dataset ---\nall_communities_data &lt;- bigrams %&gt;%\n#  filter(community != excluded_community) %&gt;%\n  group_by(community) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_head(n = num_top_bigrams_per_community) %&gt;%\n  ungroup()\n\nall_communities_data$community &lt;- as.factor(all_communities_data$community)\n\nto_add &lt;- data.frame(\n  bigram = NA,\n  n = NA,\n  community = rep(levels(all_communities_data$community), each = empty_bar_count)\n)\n\nplot_data &lt;- rbind(all_communities_data, to_add) %&gt;%\n  arrange(community)\n\nplot_data$id &lt;- seq_len(nrow(plot_data)) # Keep ID as numeric here\n\n# --- 2. Prepare Label Data ---\nlabel_data &lt;- plot_data\nnumber_of_bar &lt;- nrow(label_data)\nlabel_data$angle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar\nlabel_data$hjust &lt;- ifelse(label_data$angle &lt; -90, 1, 0)\nlabel_data$angle &lt;- ifelse(label_data$angle &lt; -90, label_data$angle + 180, label_data$angle)\n\n# --- 3. Prepare Data for Baselines (Community Dividers) ---\nbase_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start = min(id, na.rm = TRUE), # Keep as numeric\n    end = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    title_position = mean(c(start, end))\n  ) %&gt;%\n  ungroup()\n\n# --- 4. Prepare Data for Grid Lines (Optional: Value Scales) ---\nmax_n_value &lt;- max(plot_data$n, na.rm = TRUE)\ngrid_lines_values &lt;- c(20, 40, 60, 80, 100)\ngrid_lines_values &lt;- grid_lines_values[grid_lines_values &lt;= max_n_value]\n\ngrid_segments_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start_id = min(id, na.rm = TRUE), # Keep as numeric\n    end_id = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  )\n\ngrid_data_final &lt;- tibble()\nfor(val in grid_lines_values) {\n  temp_data &lt;- grid_segments_data %&gt;%\n    mutate(y_value = val)\n  grid_data_final &lt;- bind_rows(grid_data_final, temp_data)\n}\n\n# --- Data for grid line LABELS ---\ngrid_label_data &lt;- data.frame(\n  x_pos = max(plot_data$id, na.rm = TRUE) + 2, # Fixed x position outside the plot\n  y_pos = grid_lines_values,\n  label_text = as.character(grid_lines_values)\n)\n\n# --- 5. Make the Unified Plot ---\np &lt;- ggplot(plot_data, aes(x = id, y = n, fill = community)) + # &lt;--- x = id (numeric)\n  # Add background grid lines for value (e.g., 20, 40, 60, 80)\n  geom_segment(data = grid_data_final,\n               aes(x = start_id - 0.5, y = y_value, xend = end_id + 0.5, yend = y_value),\n               inherit.aes = FALSE,\n               color = \"grey\", alpha = 0.8, linewidth = 0.3) +\n\n  # Add text showing the value of each grid line at a fixed position\n  geom_text(data = grid_label_data,\n            aes(x = x_pos, y = y_pos, label = label_text),\n            inherit.aes = FALSE,\n            color = \"grey\", size = 3, angle = 0, fontface = \"bold\", hjust = 0) +\n\n  # Bars for the bigrams (main plot elements)\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"white\", linewidth = 0.1,\n           width = 1.4) + # &lt;--- Add width=1 to remove space between bars if id is numeric\n\n  # Set limits for the y-axis, providing space for labels\n  ylim(-max_n_value * 0.7, max_n_value * 1.2) +\n\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\") # Top, Right, Bottom, Left margins\n  ) +\n  coord_polar(start = 0) +\n\n  # Add bigram labels\n  geom_text(\n    data = label_data,\n    aes(x = id, y = n + 10, label = bigram, hjust = hjust), # &lt;--- x = id (numeric)\n    color = \"black\", fontface = \"bold\", alpha = 0.8, size = 2.8,\n    angle = label_data$angle, inherit.aes = FALSE\n  ) +\n\n  # Add base lines for each community segment\n  geom_segment(\n    data = base_data,\n    aes(x = start - 0.5, y = -10, xend = end + 0.5, yend = -10),\n    colour = \"black\", alpha = 0.8, linewidth = 0.6, inherit.aes = FALSE\n  ) +\n\n  # Add community group labels\n  geom_text(\n    data = base_data,\n    aes(x = title_position, y = -40, label = paste(\"Comm.\", community)),\n    colour = \"black\", alpha = 0.9, size = 2, fontface = \"bold\", inherit.aes = FALSE\n  )+\n  # --- Add the Title ---\n  labs(\n    title = \"Circular Bar Chart by Community\",\n    subtitle = \"Frequencies of key bigrams within each community\", # Updated subtitle\n    caption = paste0(\"AT | Generated: \", Sys.Date())\n  ) +\n  # Apply the Set2 Brewer palette\n  scale_fill_brewer(palette = \"Set2\") +\n  # --- Customize title appearance ---\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 10)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 10)),\n    plot.caption = element_text(hjust = 1, size = 7, color = \"grey50\")\n  )\n\nprint(p)\n\n\n\n\n\n7.5.5 Community Group Membership- All\nThe topic area was gathered from the bigram wordclouds and circular bar chart. The Group Name was created based on knowledge from the Members in the group and the topic area. These were the information from the 6 segmented groups:\n\nThe TableThe Code\n\n\n\n\n\nCommunity Group Membership Summary\n\n\n\n\n\n\n\n\nGroup Number\nTopic Area\nMembers\nGroup Name\n\n\n\n\n1\ngreen guardians, city council, paackland harbor, green guardians, nemo reef, water quality\nDefender, EcoVigil, Green Guardians, Horizon, Liam Thorne, Northern Light, Oceanus City Council, Paackland Harbor, Port Security, Reef Guardian, Seawatch, Sentinel, The Lookout\nConservationist Group\n\n\n2\nnemo reef, miesel shipping, permit, cr 7844, delta 3\nCity Officials, Davis, Elise, Nadia Conti, Neptune, Remora, Rodriguez, Sailor Shifts Team, Small Fry, V. Miesel Shipping\nSailor Shift\n\n\n3\nnemo reef, himark harbor, samantha blake, radio silence\nHaacklee Harbor, Himark Harbor, Knowles, Mako, Marlin, Osprey, Serenity\nMaritime\n\n\n4\nmoney, 0500 meeting, nemo reef, intern reporting, conservation activity, financial projections\nBoss, Glitters Team, Mrs. Money, Samantha Blake, The Accountant, The Intern, The Middleman\nSuspicious Characters\n\n\n5\nsam, kelly, loading equipment\nKelly, Sam\nSam & Kelly\n\n\n6\nmiranda reporting, jensen, project poseidon, conservation vessels, nemo reef\nClepper Jensen, Miranda Jordan\nHacklee Herald\n\n\n\n\n\n\n\nset.seed(1234)\n\n# 6. Create a tidy summary table of members per community\ngrouped_members &lt;- g %&gt;%\n  as_tibble() %&gt;%\n  select(name, community) %&gt;%\n  group_by(community) %&gt;%\n  summarise(\n    Members = paste(sort(name), collapse = \", \"),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    `Group Number` = community,\n    `Topic Area` = case_when(\n      community == 1 ~ \"green guardians, city council, paackland harbor, green guardians, nemo reef, water quality\",\n      community == 2 ~ \"nemo reef, miesel shipping, permit, cr 7844, delta 3\",\n      community == 3 ~ \"nemo reef, himark harbor, samantha blake, radio silence\",\n      community == 4 ~ \"money, 0500 meeting, nemo reef, intern reporting, conservation activity, financial projections\",\n      community == 5 ~ \"sam, kelly, loading equipment\",\n      community == 6 ~ \"miranda reporting, jensen, project poseidon, conservation vessels, nemo reef\",\n      TRUE ~ \"Other\"\n    ),\n    `Group Name` = case_when(\n      community == 1 ~ \"Conservationist Group\",\n      community == 2 ~ \"Sailor Shift\",\n      community == 3 ~ \"Maritime\",\n      community == 4 ~ \"Suspicious Characters\",\n      community == 5 ~ \"Sam & Kelly\",\n      community == 6 ~ \"Hacklee Herald\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  ) %&gt;%\n  select(`Group Number`, `Topic Area`, `Members`, `Group Name`)\n\n# Show the summary table in a clean format\nkable(grouped_members, caption = \"Community Group Membership Summary\", align = \"l\")\n\n\n\n\n7.5.5.1 Findings:\n\nWe focused on the 11 nodes in the suspicious groups named:\n\nSailor Shift (Influential Nodes: Neptune, Remora, Nadia, V. Miesel Shipping, Davis);\nMaritime (Influential Node: Mako);\nConservationist Group: (Influential Nodes: Reef Guardian, EcoVigil); and\nSuspicious Characters (Influential Nodes: Mrs. Money, Boss, The Middleman).\n\nWe held back on the slightly less influential nodes such as: Sam & Kelly, and Hacklee Herald which was where Clepper Jensen worked as a journalist.\n\n\n\n\n7.5.6 Interactive Chord Diagram by Community\nIn 7.1, we previously created a static chord diagram and heatmap to identify node pairs with higher interactions, and the interactions across entity subtypes.\nHere, the interactive chord diagram showed the correspondences among communities at every two hour intervals.\n\n\nShow the code\n# Get community membership from graph object\ncommunity_df &lt;- g %&gt;%\n  as_tibble() %&gt;%\n  select(name, community)\n\n\n\n\n\n\n\n\n\nInteractive Communication Flows Over Time\n\n\n\nUse the slider to view communication over time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.5.6.1 Findings:\nWe noticed some cross community direct and indirect communication occured mainly among influential nodes, suggesting collaboration. These are some sample linkages with arrows regardless of sent or received:\n\n\n\n\n\n\n\nCommunity X\nNode Linkages (Community X -&gt; Community X -&gt; Community Y)\n\n\n\n\nSuspicious Characters\nMrs. Money -&gt; Intern -&gt; The Lookout\nLiam -&gt; Paackland Harbor -&gt; The Middleman\nGlitters Team -&gt; Boss -&gt; Mako\nGlitters Team -&gt; Samantha Blake -&gt; Sailor Shifts Team\n\n\nSailor Shift\nNeptune -&gt; Elise -&gt; Mako\nNeptune -&gt; Davis -&gt; Mako\nRemora -&gt; Neptune -&gt; Boss\nRodriguez -&gt; Remora -&gt; Mako\nRemora -&gt; Small Fry -&gt; Mako\nDavis -&gt; Remora -&gt; Paackland Harbor\nV. Miesel Shipping -&gt; Neptune -&gt; Mako\n\n\nSam & Kelly\nKelly -&gt; Sam - &gt; The Lookout\n\n\nMaritime\nMako -&gt; Himark Harbor -&gt; Oceanus City Council\n\n\nHacklee Herald\nN/A (Only Direct Community X to X communications)\n\n\nConservationist Group\nReef Guardian -&gt; Oceanus City Council -&gt; Nadia\nReef Guardian -&gt; Paackland Harbor -&gt; Mako\nOceanus City Council -&gt; Liam -&gt; Nadia\n\n\n\nWe also noticed that at times, certain individuals sent messages but there were no response back. This could possibly be due to the pseudonyms being used to send or reply to the same content. For instance, there was a message from Davis to Rodriguez on 14 Oct around 1200-1400 but there was no response by Rodriguez. By looking at the content field, we then found out that he was Small Fry due to the responses he provided to Davis which was originally addressed to Rodriguez.\n\n\n\n7.5.7 Community Detection- People & Vessels\nSince our nodes (apart from V. Miesel Shipping) were mostly of people and vessels, in order for us to drill even deeper into people and vessels, we recreated the process for only people and vessels.\n\nCommunity DetectionThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# --- STEP 1: Prepare the edge list ---\nedge_df_pv &lt;- person_vessel_df %&gt;%\n  select(sender_id, recipient_id) %&gt;%\n  filter(!is.na(sender_id) & !is.na(recipient_id)) %&gt;%\n  rename(from = sender_id, to = recipient_id) %&gt;%\n  distinct()\n\n# Optional: remove self-loops\nedge_df_pv &lt;- edge_df_pv %&gt;% filter(from != to)\n\n# --- STEP 2: Create the graph object (undirected) ---\ng_pv &lt;- tbl_graph(edges = edge_df_pv, directed = FALSE)\n\n# --- STEP 3: Run Louvain community detection ---\ng_pv &lt;- g_pv %&gt;%\n  mutate(community = group_louvain())\n\n# --- STEP 4: Visualize the graph ---\nggraph(g_pv, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(color = as.factor(community)), size = 5) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Community Detection in Communication Network\",\n       color = \"Community\")\n\n\n\n\n\n7.5.8 Centrality Measure- People & Vessels\n\nPageRank Centrality AlgorithmThe NetworkThe Code\n\n\n\n\n# A tibble: 10 × 5\n   name          pagerank degree betweenness closeness\n   &lt;chr&gt;            &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Mako            0.105      26      146.      0.0244\n 2 Reef Guardian   0.0741     19       57.2     0.0208\n 3 Neptune         0.0536     14       16.2     0.02  \n 4 Remora          0.0477     12        9.94    0.0182\n 5 Davis           0.0452     11       10.6     0.0182\n 6 Mrs. Money      0.0429     10       34.6     0.0192\n 7 Boss            0.0425     10       34.1     0.0185\n 8 Sentinel        0.0410     10       25.8     0.02  \n 9 Nadia Conti     0.0402     10       15.0     0.0185\n10 Horizon         0.0376      9       11.6     0.0192\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# --- STEP: Compute Centrality Measures ---\ng_pv &lt;- g_pv %&gt;%\n  mutate(\n    pagerank = centrality_pagerank(),\n    degree = centrality_degree(),\n    betweenness = centrality_betweenness(),\n    closeness = centrality_closeness()\n  )\n\n# Show top 10 nodes by PageRank\ng_pv %&gt;%\n  as_tibble() %&gt;%\n  select(name, pagerank, degree, betweenness, closeness) %&gt;%\n  arrange(desc(pagerank)) %&gt;%\n  head(10)\n\n# Visualize by Centrality\nggraph(g_pv, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(size = pagerank, color = as.factor(community)), alpha = 0.8) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Network with PageRank Centrality\",\n       size = \"PageRank\", color = \"Community\")\n\n\n\n\n7.5.8.1 Findings:\n\nThere were 5 closely associated groups. Community 5 (Clepper and Miranda) appeared to be segmented from the central group, due to the non-involvement from the nature of their investigative work.\nFrom the graph, we extracted the 8 influential nodes to focus on:\n\nCommunity 1: Mako\nCommunity 2: Neptune, Remora, Nadia, Davis\nCommunity 3: N/A as they were not very influential at global level\nCommunity 4: Mrs. Money, Boss, The Middleman\nCommunity 5: N/A as they were not very influential at global level\nCommunity 6: N/A as they were not very influential at global level\n\n\n\n\n\n7.5.9 Wordclouds- Bigrams\nWe focused on bigrams here to get more contextual data.\n\nThe WordcloudsThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 5b. Plot word clouds per community\npar(mfrow = c(2, 3))  # 2 rows, 3 columns layout for 5 communities\nfor (i in sort(unique(bigrams$community))) {\n  words &lt;- bigrams %&gt;% filter(community == i)\n  \n  if (nrow(words) &lt; 1) next  # Skip if no words\n  \n  suppressWarnings({\n    set.seed(432)  # Set seed for reproducibility\n    wordcloud(words = words$bigram,  # &lt;-- FIXED here\n              freq = words$n,\n              max.words = min(30, nrow(words)),\n              scale = c(3, 0.5),\n              colors = brewer.pal(8, \"Dark2\"),\n              random.order = FALSE)\n  })\n  mtext(paste(\"Community\", i), side = 3, line = 1, adj = 0.5, cex = 1.5, col = \"black\")\n}\n\n\n\n\n\n7.5.10 Circular barchart for Top Bigrams per Community\n\nThe Circular BarchartThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# --- Configuration ---\nnum_top_bigrams_per_community &lt;- 8\nempty_bar_count &lt;- 2 # gaps btw comm.\n#excluded_community &lt;- 5 # too little in community 5\n\n# --- 1. Prepare the Combined Dataset ---\nall_communities_data &lt;- bigrams %&gt;%\n#  filter(community != excluded_community) %&gt;%\n  group_by(community) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_head(n = num_top_bigrams_per_community) %&gt;%\n  ungroup()\n\nall_communities_data$community &lt;- as.factor(all_communities_data$community)\n\nto_add &lt;- data.frame(\n  bigram = NA,\n  n = NA,\n  community = rep(levels(all_communities_data$community), each = empty_bar_count)\n)\n\nplot_data &lt;- rbind(all_communities_data, to_add) %&gt;%\n  arrange(community)\n\nplot_data$id &lt;- seq_len(nrow(plot_data)) # Keep ID as numeric here\n\n# --- 2. Prepare Label Data ---\nlabel_data &lt;- plot_data\nnumber_of_bar &lt;- nrow(label_data)\nlabel_data$angle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar\nlabel_data$hjust &lt;- ifelse(label_data$angle &lt; -90, 1, 0)\nlabel_data$angle &lt;- ifelse(label_data$angle &lt; -90, label_data$angle + 180, label_data$angle)\n\n# --- 3. Prepare Data for Baselines (Community Dividers) ---\nbase_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start = min(id, na.rm = TRUE), # Keep as numeric\n    end = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    title_position = mean(c(start, end))\n  ) %&gt;%\n  ungroup()\n\n# --- 4. Prepare Data for Grid Lines (Optional: Value Scales) ---\nmax_n_value &lt;- max(plot_data$n, na.rm = TRUE)\ngrid_lines_values &lt;- c(20, 40, 60, 80, 100)\ngrid_lines_values &lt;- grid_lines_values[grid_lines_values &lt;= max_n_value]\n\ngrid_segments_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start_id = min(id, na.rm = TRUE), # Keep as numeric\n    end_id = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  )\n\ngrid_data_final &lt;- tibble()\nfor(val in grid_lines_values) {\n  temp_data &lt;- grid_segments_data %&gt;%\n    mutate(y_value = val)\n  grid_data_final &lt;- bind_rows(grid_data_final, temp_data)\n}\n\n# --- Data for grid line LABELS ---\ngrid_label_data &lt;- data.frame(\n  x_pos = max(plot_data$id, na.rm = TRUE) + 2, # Fixed x position outside the plot\n  y_pos = grid_lines_values,\n  label_text = as.character(grid_lines_values)\n)\n\n# --- 5. Make the Unified Plot ---\np &lt;- ggplot(plot_data, aes(x = id, y = n, fill = community)) + # &lt;--- x = id (numeric)\n  # Add background grid lines for value (e.g., 20, 40, 60, 80)\n  geom_segment(data = grid_data_final,\n               aes(x = start_id - 0.5, y = y_value, xend = end_id + 0.5, yend = y_value),\n               inherit.aes = FALSE,\n               color = \"grey\", alpha = 0.8, linewidth = 0.3) +\n\n  # Add text showing the value of each grid line at a fixed position\n  geom_text(data = grid_label_data,\n            aes(x = x_pos, y = y_pos, label = label_text),\n            inherit.aes = FALSE,\n            color = \"grey\", size = 3, angle = 0, fontface = \"bold\", hjust = 0) +\n\n  # Bars for the bigrams (main plot elements)\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"white\", linewidth = 0.1,\n           width = 1) + # &lt;--- Add width=1 to remove space between bars if id is numeric\n\n  # Set limits for the y-axis, providing space for labels\n  ylim(-max_n_value * 0.7, max_n_value * 1.2) +\n\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\") # Top, Right, Bottom, Left margins\n  ) +\n  coord_polar(start = 0) +\n\n  # Add bigram labels\n  geom_text(\n    data = label_data,\n    aes(x = id, y = n + 10, label = bigram, hjust = hjust), # &lt;--- x = id (numeric)\n    color = \"black\", fontface = \"bold\", alpha = 0.8, size = 2.8,\n    angle = label_data$angle, inherit.aes = FALSE\n  ) +\n\n  # Add base lines for each community segment\n  geom_segment(\n    data = base_data,\n    aes(x = start - 0.5, y = -10, xend = end + 0.5, yend = -10),\n    colour = \"black\", alpha = 0.8, linewidth = 0.6, inherit.aes = FALSE\n  ) +\n\n  # Add community group labels\n  geom_text(\n    data = base_data,\n    aes(x = title_position, y = -40, label = paste(\"Comm.\", community)),\n    colour = \"black\", alpha = 0.9, size = 2, fontface = \"bold\", inherit.aes = FALSE\n  )+\n  # --- Add the Title ---\n  labs(\n    title = \"Circular Bar Chart by Community\",\n    subtitle = \"Frequencies of key bigrams within each community\", # Updated subtitle\n    caption = paste0(\"AT | Generated: \", Sys.Date())\n  ) +\n  # Apply the Set2 Brewer palette\n  scale_fill_brewer(palette = \"Set2\") +\n  # --- Customize title appearance ---\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 10)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 10)),\n    plot.caption = element_text(hjust = 1, size = 7, color = \"grey50\")\n  )\n\nprint(p)\n\n\n\n\n\n7.5.11 Community Group Membership- People & Vessels\nThe topic area was gathered from the bigram wordclouds and circular bar chart. The Group Name was created based on knowledge from the Members in the group and the topic area. These are the information for the 5 segmented groups:\n\nThe TableThe Code\n\n\n\n\n\nCommunity Group Membership Summary\n\n\n\n\n\n\n\n\nGroup Number\nTopic Area\nMembers\nGroup Name\n\n\n\n\n1\nnemo reef, himark harbor, samantha blake, city council\nDefender, EcoVigil, Horizon, Knowles, Mako, Marlin, Osprey, Reef Guardian, Samantha Blake, Seawatch, Sentinel, Serenity\nConservationist Group\n\n\n2\nsouth dock, equipment transfer, security team, nemo reef, delta3, cr 7844\nDavis, Elise, Liam Thorne, Nadia Conti, Neptune, Remora, Rodriguez, Small Fry\nPermit\n\n\n3\nintern reporting, conservation vessels, nemo reef\nKelly, Sam, The Intern, The Lookout\nPseudonym\n\n\n4\n10am tomorrow, 0500 tomorrow, funding channels, alternative funding\nBoss, Mrs. Money, The Accountant, The Middleman\nSuspicious\n\n\n5\nclassification markings, project poseidon, clearance documents, harbor security\nClepper Jensen, Miranda Jordan\nHacklee Herald\n\n\n\n\n\n\n\nset.seed(1234)\n# 6. Create a tidy summary table of members per community\ngrouped_members &lt;- g_pv %&gt;%\n  as_tibble() %&gt;%\n  select(name, community) %&gt;%\n  group_by(community) %&gt;%\n  summarise(\n    Members = paste(sort(name), collapse = \", \"),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    `Group Number` = community,\n    `Topic Area` = case_when(\n      community == 1 ~ \"nemo reef, himark harbor, samantha blake, city council\",\n      community == 2 ~ \"south dock, equipment transfer, security team, nemo reef, delta3, cr 7844\",\n      community == 3 ~ \"intern reporting, conservation vessels, nemo reef\",\n      community == 4 ~ \"10am tomorrow, 0500 tomorrow, funding channels, alternative funding\",\n      community == 5 ~ \"classification markings, project poseidon, clearance documents, harbor security\",\n      TRUE ~ \"Other\"\n    ),\n    `Group Name` = case_when(\n      community == 1 ~ \"Conservationist Group\",\n      community == 2 ~ \"Permit\",\n      community == 3 ~ \"Pseudonym\",\n      community == 4 ~ \"Suspicious\",\n      community == 5 ~ \"Hacklee Herald\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  ) %&gt;%\n  select(`Group Number`, `Topic Area`, `Members`, `Group Name`)\n\n# Show the summary table in a clean format\nkable(grouped_members, caption = \"Community Group Membership Summary\", align = \"l\")\n\n\n\n\n7.5.11.1 Findings:\n\nMovements and changes in membership since section 7.5.6:\n\nMako moved from Maritime to Conservationist.\nSamantha Blake moved from the Suspicious Characters to Conservationist.\nSam and Kelly moved from their own Community to Pseudonym.\nThe Lookout moved from Conservationist Group to Pseudonym.\nThe Intern moved from Suspicious Characters to Pseudonym.\nSailor Shift community renamed to Permit\n\nFrom 11 nodes in section 7.5.6.1, we further narrowed down on the 8 nodes in the suspicious groups named:\n\nPermit (Influential Nodes: Neptune, Remora, Nadia, Davis);\nConservationist Group (Influential Node: Mako);\nSuspicious (Influential Nodes: Mrs. Money, Boss, The Middleman).\n\nWe held back on the slightly less influential nodes such as: Hacklee Herald which was where Clepper Jensen worked as a journalist.\n\n\n\n\n7.5.12 Plotted Community Timeline- People & Vessels\nWe then decided to plot the timeline based on community colours to uncover patterns.\n\n\nShow the code\n# --- FACTORING and DATETIME CLEANING ---\nperson_vessel_df_for_plot &lt;- person_vessel_df %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    sender_sub_type = factor(sender_sub_type, levels = c(\"Person\", \"Vessel\")),\n    communicating_pair_sorted = paste(pmin(sender_name, recipient_name), pmax(sender_name, recipient_name), sep = \" & \")\n  )\n\n# Get community membership from graph object\ncommunity_df &lt;- g_pv %&gt;%\n  as_tibble() %&gt;%\n  select(name, community)\n\n# --- WRAPPING CONTENT AND TOOLTIP ---\nplot_data1 &lt;- person_vessel_df_for_plot %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    date = as.Date(timestamp),\n    time = format(timestamp, \"%H:%M:%S\"),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", date, \"&lt;br&gt;\",\n      \"&lt;b&gt;Time:&lt;/b&gt; \", time, \"&lt;br&gt;\",\n      \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Event_id:&lt;/b&gt; \", event_id, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# Merge with plot_data1 using sender_id == name\nplot_data1 &lt;- plot_data1 %&gt;%\n  left_join(community_df, by = c(\"sender_id\" = \"name\"))\n\n# Plot\np &lt;- ggplot(plot_data1, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = as.factor(community),\n    shape = sender_sub_type,\n    text = tooltip_text\n  ), show.legend = c(color = TRUE, shape = FALSE),\n  size = 2, alpha = 0.7) +\n  scale_shape_manual(values = c(\"Person\" = 16, \"Vessel\" = 17)) +\n  facet_wrap(~ sender_sub_type, ncol = 1, scales = \"fixed\") +\n    scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"14:00:00\")),  # reversed to show time top-to-bottom\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\", \"14:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\")\n)+\n  scale_x_date(\n  date_breaks = \"1 day\",\n  date_labels = \"%d %b\"\n)+\n  labs(\n    title = \"Communication Events Over Time (Sender's Perspective)\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    color = \"Community\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# --- Convert to interactive plot ---\nggplotly(p, tooltip = \"tooltip_text\")\n\n\n\n\n\n\n\n\n7.5.13 Discussion/ Interpretation:\nWe mainly focused on the conversations by 8 influential nodes and some related nodes:\n\nConservation Group (Comm.1): Samantha Blake informed Mako to stop operations on 8 and 10th Oct. Serenity is a private luxury yacht. Osprey was likely a tourism vessel looking for charter from Mako for their tourists.\nPermit (Comm. 2): Neptune, Remora, Nadia, and Davis were working on Nemo Reef operation. This referred to the Music Video Production for Sailor Shift on 14 Oct.\nPseudonym (Comm. 3): Other than communicating among themselves, The Lookout appeared to have also externally corresponded with Sentinel, Reef Guardian and Horizon (conservation based topics), while The Intern also externally corresponded with Mrs. Money.\nSuspicious (Comm. 4): The Middleman had access to Council documents. Mrs. Money had funding from sources that would not flag out to regulators for her operations. Mrs. Money was investigating V. Miesel’s structures. On 5 Oct, Boss told Mrs. Money to disguise financial trails through tourism ventures and destroy evidence of Nemo Reef operations.\nHacklee Herald (Comm. 5): Conversations between Clepper and his intern Miranda which ended on 11 Oct. Miranda mentioned an Oceanus City Council Member meeting with unmarked vessels at night.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#nadias-ego-network--louvain-community",
    "href": "Prototype.html#nadias-ego-network--louvain-community",
    "title": "Prototype",
    "section": "9.1 Nadia’s Ego Network- Louvain community",
    "text": "9.1 Nadia’s Ego Network- Louvain community\n\nEgo NetworkThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# Assume g_full includes Nadia — not g from other_communications_df\ng_igraph &lt;- as.igraph(g)\n\n# Confirm Nadia exists\nif (!\"Nadia Conti\" %in% V(g_igraph)$name) stop(\"Nadia Conti not found in the graph.\")\n\n# Get ego subgraph\nnadia_ego_igraph &lt;- make_ego_graph(g_igraph, order = 1, nodes = which(V(g_igraph)$name == \"Nadia Conti\"), mode = \"all\")[[1]]\n\n# Convert to tidygraph\nnadia_ego_graph &lt;- as_tbl_graph(nadia_ego_igraph)\n\n# Convert to undirected for Louvain\nnadia_ego_graph &lt;- nadia_ego_graph %&gt;% \n  to_undirected() %&gt;% \n  activate(nodes) %&gt;%\n  mutate(\n    community = group_louvain(),\n    pagerank = centrality_pagerank()\n  )\n\n# Plot Nadia's ego network\nggraph(nadia_ego_graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.4) +\n  geom_node_point(aes(size = pagerank, color = as.factor(community)), alpha = 0.9) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  scale_color_brewer(palette = \"Set2\") +\n  theme_void() +\n  labs(\n    title = \"Nadia Conti’s Ego Network\",\n    subtitle = \"Nodes sized by PageRank, colored by Louvain community\",\n    color = \"Community\",\n    size = \"PageRank\"\n  )\n\n\n\n\nWe wanted to find out if there were sub communities within Nadia’s direct network that worked closely together.\nThe orange community were possibly involved in Sailor Shifts’s music video, while the green community were likely regarding ensuring compliance to authorities such as officials, the harbour and conservation team.\nNadia, Liam, and Marlin were the orange nodes that directly linked to the green nodes.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#nadias-sent-and-received-ego-networks--viznetwork",
    "href": "Prototype.html#nadias-sent-and-received-ego-networks--viznetwork",
    "title": "Prototype",
    "section": "9.2 Nadia’s Sent and Received Ego Networks- VizNetwork",
    "text": "9.2 Nadia’s Sent and Received Ego Networks- VizNetwork\n\n9.2.1 Data Preparation\n\nPreparation- Nodes & EdgesThe Code\n\n\n\n\n[1] \"Nadia Conti's ID: Nadia Conti\"\n\n\n[1] \"Nadia Conti's Sub_type: Person\"\n\n\n[1] \"--- Nadia's Sent Communications ---\"\n\n\n\n\n|communication_type |sender_id   |recipient_id         |recipient_name       |recipient_sub_type |event_id                |content                                                                                                                                                                                                                                                                                    |timestamp           |sender_name |sender_sub_type |\n|:------------------|:-----------|:--------------------|:--------------------|:------------------|:-----------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:-----------|:---------------|\n|sent               |Nadia Conti |Haacklee Harbor      |Haacklee Harbor      |Location           |Event_Communication_331 |Haacklee Harbor, this is Nadia Conti. I need to cancel the special access corridor arrangements for Nemo Reef immediately. Plans have changed due to unforeseen circumstances. Destroy all related documentation. I'll contact you when we're ready to proceed with alternative locations. |2040-10-05 09:45:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Oceanus City Council |Oceanus City Council |Organization       |Event_Communication_334 |This is Nadia Conti. My cancellation was due to scheduling conflicts with our tourism development initiatives. I wasn't aware of any permit approvals. I'll submit revised documentation for alternative sustainable tourism proposals next week.                                          |2040-10-05 09:49:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Liam Thorne          |Liam Thorne          |Person             |Event_Communication_529 |Liam, Nadia here. Need your services urgently. Investigation brewing around Nemo Reef permits. Double your usual fee if you can ensure Harbor Master remains cooperative through next week. Meet at the usual place tomorrow, 10PM.                                                        |2040-10-08 08:18:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Neptune              |Neptune              |Vessel             |Event_Communication_536 |Neptune, this is Nadia. Need clarity on 'underwater foundation work' at Nemo Reef. This extends beyond our agreed scope. Meet me at the marina tomorrow at 6AM to discuss implications and additional resource requirements.                                                               |2040-10-08 08:25:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Neptune              |Neptune              |Vessel             |Event_Communication_538 |Neptune, Nadia here. Just confirming our 0600 meeting at the marina. I've reviewed the modified equipment specs with The Accountant. Please bring detailed timeline for foundation work and cost implications. We need to stay under radar.                                                |2040-10-08 08:30:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Marlin               |Marlin               |Vessel             |Event_Communication_584 |Marlin, Nadia here. I understand you're inquiring about eastern shoal routes. Those are temporary diversions due to equipment transport needs. I'll have Davis provide the necessary documentation tonight. Nothing to be concerned about.                                                 |2040-10-08 11:23:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Liam Thorne          |Liam Thorne          |Person             |Event_Communication_795 |Liam, Nadia here. Redirect all remaining operations from southwest immediately. Move equipment to our secondary location. I'll handle EcoVigil through proper channels. Meet me at the usual place at 2100 hours with updated documentation.                                               |2040-10-12 08:44:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |V. Miesel Shipping   |V. Miesel Shipping   |Organization       |Event_Communication_847 |This is Nadia. Documentation for permit #CR-7844 is complete. Meeting The Middleman at 2100 to handle final details. Recommend accelerating timeline due to EcoVigil's ROV approval. Shifting operations from southwest immediately. Will update after meeting.                            |2040-10-12 11:19:00 |Nadia Conti |Person          |\n\n\n[1] \"--- Nadia's Received Communications ---\"\n\n\n\n\n|communication_type |sender_id            |sender_name          |sender_sub_type |recipient_id |event_id                |content                                                                                                                                                                                                                                                                                                  |timestamp           |recipient_name |recipient_sub_type |\n|:------------------|:--------------------|:--------------------|:---------------|:------------|:-----------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:--------------|:------------------|\n|received           |Haacklee Harbor      |Haacklee Harbor      |Location        |Nadia Conti  |Event_Communication_330 |Haacklee Harbor to Nadia Conti. Following your visit yesterday regarding the Nemo Reef event logistics, we've prepared the necessary documentation. Harbor staff is ready to facilitate the special access corridor arrangements as discussed. Please confirm timeline for implementation.               |2040-10-05 09:44:00 |Nadia Conti    |Person             |\n|received           |Oceanus City Council |Oceanus City Council |Organization    |Nadia Conti  |Event_Communication_333 |Ms. Conti, this is Oceanus City Council. We need clarification regarding your canceled Nemo Reef event arrangements at Haacklee Harbor. Please explain your documentation destruction request immediately. This relates to our newly expedited permit approvals.                                         |2040-10-05 09:48:00 |Nadia Conti    |Person             |\n|received           |Sailor Shifts Team   |Sailor Shifts Team   |Organization    |Nadia Conti  |Event_Communication_520 |Hi Nadia, this is the Sailor Shifts Team. Received your message about permit assistance - thank you! We urgently need to discuss tomorrow's staffing requirements. Can you confirm how many additional crew members we should bring for the setup?                                                       |2040-10-07 11:57:00 |Nadia Conti    |Person             |\n|received           |Davis                |Davis                |Person          |Nadia Conti  |Event_Communication_521 |Davis, Nadia here. Let's meet at 7PM at the marina office to review documentation. I've been working with alternative channels for permits. Bring all shipping manifests - we'll need to create a clean paper trail immediately.                                                                         |2040-10-07 12:00:00 |Nadia Conti    |Person             |\n|received           |Elise                |Elise                |Person          |Nadia Conti  |Event_Communication_528 |Nadia, Elise here. Meeting at Nemo Reef 0500 tomorrow to establish payment protocols. Sam uncovered V. Miesel shipping lanes overlapping with Mako by 40%. Neptune mentioned 'underwater foundation work' - outside our original scope. Need your assessment.                                            |2040-10-08 08:15:00 |Nadia Conti    |Person             |\n|received           |Liam Thorne          |Liam Thorne          |Person          |Nadia Conti  |Event_Communication_535 |Nadia, Liam here. Meeting confirmed for tomorrow at 10PM. I've redirected Harbor Master's attention and implemented new patrol schedules that work in our favor. Council suspects nothing about Nemo Reef. Bring payment as discussed.                                                                   |2040-10-08 08:24:00 |Nadia Conti    |Person             |\n|received           |Neptune              |Neptune              |Vessel          |Nadia Conti  |Event_Communication_537 |Neptune to Nadia. I'm aware of the foundation work concerns. We're delivering the additional heavy equipment today as requested. Will meet you at 0600 as planned to discuss resource adjustments and review modified equipment specifications that Elise has approved funding for.                      |2040-10-08 08:27:00 |Nadia Conti    |Person             |\n|received           |Davis                |Davis                |Person          |Nadia Conti  |Event_Communication_582 |Nadia, Davis here. I'll be at the marina office at 7PM with all shipping manifests. Could you bring copies of permit #CR-7844? Marlin's asking about unusual vessel routes near eastern shoals - might need to address this.                                                                             |2040-10-08 11:21:00 |Nadia Conti    |Person             |\n|received           |Davis                |Davis                |Person          |Nadia Conti  |Event_Communication_585 |Davis, Marlin here again. Nadia mentioned you'd provide documentation about those eastern shoal diversions tonight. Just checking if that's still coming through. Need to understand these new patterns while my vessel's being repaired.                                                                |2040-10-08 11:26:00 |Nadia Conti    |Person             |\n|received           |Elise                |Elise                |Person          |Nadia Conti  |Event_Communication_601 |Nadia, Elise here. Situation escalating. Permanent underwater construction confirmed at Nemo Reef. Sam reports concrete forms suggesting structures beyond equipment installation. Need urgent clarification on real scope and V. Miesel's involvement before tomorrow's meeting. Prepare contingencies. |2040-10-09 08:54:00 |Nadia Conti    |Person             |\n\n\n[1] \"--- Nadia's Full Communication Timeline (Combined) ---\"\n\n\n\n\n|communication_type |sender_id            |recipient_id         |recipient_name       |recipient_sub_type |event_id                |content                                                                                                                                                                                                                                                                                    |timestamp           |sender_name          |sender_sub_type |communicating_pair_sorted        |\n|:------------------|:--------------------|:--------------------|:--------------------|:------------------|:-----------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:--------------------|:---------------|:--------------------------------|\n|received           |Haacklee Harbor      |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_330 |Haacklee Harbor to Nadia Conti. Following your visit yesterday regarding the Nemo Reef event logistics, we've prepared the necessary documentation. Harbor staff is ready to facilitate the special access corridor arrangements as discussed. Please confirm timeline for implementation. |2040-10-05 09:44:00 |Haacklee Harbor      |Location        |Haacklee Harbor_Nadia Conti      |\n|sent               |Nadia Conti          |Haacklee Harbor      |Haacklee Harbor      |Location           |Event_Communication_331 |Haacklee Harbor, this is Nadia Conti. I need to cancel the special access corridor arrangements for Nemo Reef immediately. Plans have changed due to unforeseen circumstances. Destroy all related documentation. I'll contact you when we're ready to proceed with alternative locations. |2040-10-05 09:45:00 |Nadia Conti          |Person          |Haacklee Harbor_Nadia Conti      |\n|received           |Oceanus City Council |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_333 |Ms. Conti, this is Oceanus City Council. We need clarification regarding your canceled Nemo Reef event arrangements at Haacklee Harbor. Please explain your documentation destruction request immediately. This relates to our newly expedited permit approvals.                           |2040-10-05 09:48:00 |Oceanus City Council |Organization    |Nadia Conti_Oceanus City Council |\n|sent               |Nadia Conti          |Oceanus City Council |Oceanus City Council |Organization       |Event_Communication_334 |This is Nadia Conti. My cancellation was due to scheduling conflicts with our tourism development initiatives. I wasn't aware of any permit approvals. I'll submit revised documentation for alternative sustainable tourism proposals next week.                                          |2040-10-05 09:49:00 |Nadia Conti          |Person          |Nadia Conti_Oceanus City Council |\n|received           |Sailor Shifts Team   |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_520 |Hi Nadia, this is the Sailor Shifts Team. Received your message about permit assistance - thank you! We urgently need to discuss tomorrow's staffing requirements. Can you confirm how many additional crew members we should bring for the setup?                                         |2040-10-07 11:57:00 |Sailor Shifts Team   |Organization    |Nadia Conti_Sailor Shifts Team   |\n|received           |Davis                |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_521 |Davis, Nadia here. Let's meet at 7PM at the marina office to review documentation. I've been working with alternative channels for permits. Bring all shipping manifests - we'll need to create a clean paper trail immediately.                                                           |2040-10-07 12:00:00 |Davis                |Person          |Davis_Nadia Conti                |\n|received           |Elise                |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_528 |Nadia, Elise here. Meeting at Nemo Reef 0500 tomorrow to establish payment protocols. Sam uncovered V. Miesel shipping lanes overlapping with Mako by 40%. Neptune mentioned 'underwater foundation work' - outside our original scope. Need your assessment.                              |2040-10-08 08:15:00 |Elise                |Person          |Elise_Nadia Conti                |\n|sent               |Nadia Conti          |Liam Thorne          |Liam Thorne          |Person             |Event_Communication_529 |Liam, Nadia here. Need your services urgently. Investigation brewing around Nemo Reef permits. Double your usual fee if you can ensure Harbor Master remains cooperative through next week. Meet at the usual place tomorrow, 10PM.                                                        |2040-10-08 08:18:00 |Nadia Conti          |Person          |Liam Thorne_Nadia Conti          |\n|received           |Liam Thorne          |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_535 |Nadia, Liam here. Meeting confirmed for tomorrow at 10PM. I've redirected Harbor Master's attention and implemented new patrol schedules that work in our favor. Council suspects nothing about Nemo Reef. Bring payment as discussed.                                                     |2040-10-08 08:24:00 |Liam Thorne          |Person          |Liam Thorne_Nadia Conti          |\n|sent               |Nadia Conti          |Neptune              |Neptune              |Vessel             |Event_Communication_536 |Neptune, this is Nadia. Need clarity on 'underwater foundation work' at Nemo Reef. This extends beyond our agreed scope. Meet me at the marina tomorrow at 6AM to discuss implications and additional resource requirements.                                                               |2040-10-08 08:25:00 |Nadia Conti          |Person          |Nadia Conti_Neptune              |\n\n\n[1] \"--- Checking: Number of nodes and edges in Nadia's Ego Network Graph ---\"\n\n\n[1] \"Nodes: 13 Edges: 17\"\n\n\n[1] \"---------------------------------------------------------------------\"\n\n\n\n\n# --- 2. Clean and Prepare Nodes ---\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  # Rename 'type' to 'supertype' to reduce confusion with communication type\n  rename(supertype = type) %&gt;%\n  # Select only columns that are needed and are consistently present\n  select(id, name, sub_type, content, timestamp) # Keep timestamp as character for now\n\n# --- 3. Clean and Prepare Edges ---\n# Rename 'type' in edges to 'edge_type' to avoid conflict with node 'supertype'\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target,\n         edge_type = type) %&gt;% # Renamed 'type' to 'edge_type'\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Filter out any edges where from_id or to_id are not in cleaned nodes\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id)\n\n# --- 4. Identify Nadia Conti's ID and Sub_type ---\nnadia_info &lt;- mc3_nodes_cleaned %&gt;%\n  filter(name == \"Nadia Conti\") %&gt;%\n  select(id, sub_type) # Corrected: Select sub_type here, not supertype\n\nnadia_id &lt;- nadia_info %&gt;% pull(id)\nnadia_sub_type &lt;- nadia_info %&gt;% pull(sub_type) # New variable for Nadia's sub_type\n\n\nif (length(nadia_id) == 0) {\n  stop(\"Nadia Conti not found in the nodes data. Please check the 'name' column or the ID.\")\n} else if (length(nadia_id) &gt; 1) {\n  warning(\"Multiple entries found for Nadia Conti. Using the first one.\")\n  nadia_id &lt;- nadia_id[1]\n  nadia_sub_type &lt;- nadia_sub_type[1] # Ensure sub_type is also taken for the first one\n}\n\nprint(paste(\"Nadia Conti's ID:\", nadia_id))\nprint(paste(\"Nadia Conti's Sub_type:\", nadia_sub_type))\n\n# --- 5. Extract Nadia's Sent Communications ---\n# Logic: Nadia (source) --sent--&gt; Event_Communication (target) --received--&gt; Recipient (target)\nnadia_sent_communications &lt;- mc3_edges_cleaned %&gt;%\n  filter(from_id == nadia_id, edge_type == \"sent\") %&gt;%\n  # Join with nodes to get content and timestamp of the Event_Communication node\n  left_join(mc3_nodes_cleaned %&gt;% select(id, content, timestamp),\n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(event_id = to_id, event_content = content, event_timestamp = timestamp) %&gt;%\n  # Now, find the recipient of this communication event\n  left_join(mc3_edges_cleaned %&gt;%\n              filter(edge_type == \"received\") %&gt;%\n              select(event_id_match = from_id, recipient_id = to_id),\n            by = c(\"event_id\" = \"event_id_match\")) %&gt;%\n  # Join with nodes to get the recipient's name AND sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type), # Select sub_type here\n            by = c(\"recipient_id\" = \"id\")) %&gt;%\n  rename(recipient_name = name, recipient_sub_type = sub_type) %&gt;% # Rename sub_type\n  # Select and rename final columns for sent communications\n  select(\n    communication_type = edge_type, # This will be \"sent\"\n    sender_id = from_id,\n    recipient_id,\n    recipient_name,\n    recipient_sub_type, # Include in final select\n    event_id,\n    content = event_content,\n    timestamp = event_timestamp # Timestamp is still character here\n  ) %&gt;%\n  mutate(\n    sender_name = !!nadia_id, # Explicitly set sender_name to Nadia's ID/name using !!\n    sender_sub_type = !!nadia_sub_type # Assign Nadia's sub_type as a constant value using !!\n  )\n\nprint(\"--- Nadia's Sent Communications ---\")\nprint(kable(head(nadia_sent_communications, 10), format = \"markdown\", align = \"l\"))\n\n\n# --- 6. Extract Nadia's Received Communications ---\n# Logic: Sender (source) --sent--&gt; Event_Communication (target) --received--&gt; Nadia (target)\nnadia_received_communications &lt;- mc3_edges_cleaned %&gt;%\n  filter(to_id == nadia_id, edge_type == \"received\") %&gt;%\n  # The source of this edge is the Event_Communication node\n  rename(event_id = from_id) %&gt;%\n  # Join with nodes to get content and timestamp of the Event_Communication node\n  left_join(mc3_nodes_cleaned %&gt;% select(id, content, timestamp),\n            by = c(\"event_id\" = \"id\")) %&gt;%\n  rename(event_content = content, event_timestamp = timestamp) %&gt;%\n  # Now, find the original sender of this communication event\n  left_join(mc3_edges_cleaned %&gt;%\n              filter(edge_type == \"sent\") %&gt;%\n              select(event_id_match = to_id, sender_id = from_id),\n            by = c(\"event_id\" = \"event_id_match\")) %&gt;%\n  # Join with nodes to get the sender's name AND sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type), # Select sub_type here\n            by = c(\"sender_id\" = \"id\")) %&gt;%\n  rename(sender_name = name, sender_sub_type = sub_type) %&gt;% # Rename sub_type\n  # Select and rename final columns for received communications\n  select(\n    communication_type = edge_type, # This will be \"received\"\n    sender_id,\n    sender_name,\n    sender_sub_type, # Include in final select\n    recipient_id = to_id,\n    event_id,\n    content = event_content,\n    timestamp = event_timestamp\n  ) %&gt;%\n  mutate(\n    recipient_name = !!nadia_id, # Explicitly set recipient_name to Nadia's ID/name using !!\n    recipient_sub_type = !!nadia_sub_type # Assign Nadia's sub_type as a constant value using !!\n  )\n\nprint(\"--- Nadia's Received Communications ---\")\nprint(kable(head(nadia_received_communications, 10), format = \"markdown\", align = \"l\"))\n\n# --- 7. Combine Sent and Received Communications for Full Timeline ---\nnadia_full_communications_timeline &lt;- bind_rows(\n  nadia_sent_communications,\n  nadia_received_communications\n) %&gt;%\n  arrange(timestamp) %&gt;%\n  # CRITICAL FIX: Explicitly convert timestamp to POSIXct after bind_rows\n  # Use as.POSIXct with the observed format string\n  mutate(timestamp = as.POSIXct(timestamp, format = \"%Y-%m-%d %H:%M:%S\")) %&gt;%\n  # NEW: Create a sorted communicating pair for consistent coloring\n  rowwise() %&gt;% # Process row by row\n  mutate(communicating_pair_sorted = paste(sort(c(sender_name, recipient_name)), collapse = \"_\")) %&gt;%\n  ungroup() # Return to normal data frame operations\n\nprint(\"--- Nadia's Full Communication Timeline (Combined) ---\")\nprint(kable(head(nadia_full_communications_timeline, 10), format = \"markdown\", align = \"l\"))\n\n# --- 8. Prepare Data for Ego Network Visualization (Direct Person-to-Person/Entity) ---\n# Build nodes and edges directly from nadia_full_communications_timeline,\n# focusing on direct sender-recipient connections.\n# Nodes for the ego network graph: Collect all unique sender and recipient IDs\nall_ego_person_entity_ids &lt;- nadia_full_communications_timeline %&gt;%\n  select(id = sender_id) %&gt;%\n  bind_rows(nadia_full_communications_timeline %&gt;% select(id = recipient_id)) %&gt;%\n  distinct(id) %&gt;%\n  filter(!is.na(id)) # Ensure no NA IDs\n\n# Filter mc3_nodes_cleaned to get attributes for these person/entity nodes\nego_nodes_for_graph &lt;- mc3_nodes_cleaned %&gt;%\n  filter(id %in% all_ego_person_entity_ids$id) %&gt;%\n  filter(!is.na(id)) %&gt;% # Ensure no NA IDs in nodes for graph\n  # Add attributes for visualization\n  mutate(\n    is_nadia = ifelse(id == nadia_id, TRUE, FALSE),\n    # Create a new column for legend grouping that includes Nadia as a distinct category\n    node_legend_group = ifelse(is_nadia, \"Nadia Conti\", sub_type),\n    node_size = ifelse(is_nadia, 20, 18), # Further increased node sizes: Nadia 20, others 10\n    display_name = ifelse(is_nadia, \"Nadia Conti\", name) # Use actual name for others\n  ) %&gt;%\n  filter(!is.na(sub_type)) # Ensure nodes have a sub_type for consistent plotting\n\n# Calculate communication counts for each node for hover text\nnode_comm_summary &lt;- nadia_full_communications_timeline %&gt;%\n  group_by(id = sender_id) %&gt;%\n  summarise(sent_count = n(), .groups = 'drop') %&gt;%\n  full_join(nadia_full_communications_timeline %&gt;%\n              group_by(id = recipient_id) %&gt;%\n              summarise(received_count = n(), .groups = 'drop'),\n            by = \"id\") %&gt;%\n  mutate(\n    sent_count = replace_na(sent_count, 0),\n    received_count = replace_na(received_count, 0)\n  )\n\n# Join communication summary and create hover text for nodes\nego_nodes_for_graph &lt;- ego_nodes_for_graph %&gt;%\n  left_join(node_comm_summary, by = \"id\") %&gt;%\n  mutate(\n    hover_text = paste(\n      \"Name:\", display_name, \"&lt;br&gt;\",\n      \"Type:\", node_legend_group, \"&lt;br&gt;\",\n      \"Sent Communications:\", sent_count, \"&lt;br&gt;\",\n      \"Received Communications:\", received_count\n    )\n  )\n\n# Edges for the ego network graph: Direct Sender -&gt; Recipient edges\n# Aggregate to count occurrences for edge thickness\nego_edges_for_graph &lt;- nadia_full_communications_timeline %&gt;%\n  # Group by sender, recipient, their names, and communication type to count interactions\n  group_by(from = sender_id, to = recipient_id, sender_name, recipient_name, communication_type) %&gt;%\n  summarise(\n    count_of_comm = n(), # Number of times this specific communication happened\n    content_sample = paste(head(content, 1), collapse = \"; \"), # Sample content\n    timestamp_min = min(timestamp, na.rm = TRUE),\n    timestamp_max = max(timestamp, na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  # Add the 'nadia_role_in_comm' column for coloring based on Nadia's perspective\n  mutate(\n    nadia_role_in_comm = case_when(\n      from == nadia_id & communication_type == \"sent\" ~ \"Nadia Sent\",\n      to == nadia_id & communication_type == \"received\" ~ \"Nadia Received\",\n      TRUE ~ \"Other Communication\" # For communications not directly involving Nadia as sender/recipient\n    )\n  ) %&gt;%\n  # Ensure 'from' and 'to' are character and non-NA\n  mutate(\n    from = as.character(from),\n    to = as.character(to)\n  ) %&gt;%\n  filter(!is.na(from) & !is.na(to)) %&gt;%\n  # Filter out edges where 'from' or 'to' IDs are NOT in the final ego_nodes_for_graph\n  filter(from %in% ego_nodes_for_graph$id, to %in% ego_nodes_for_graph$id) %&gt;%\n  # Create hover text for edges\n  mutate(\n    hover_text = paste(\n      \"From:\", sender_name, \"&lt;br&gt;\",\n      \"To:\", recipient_name, \"&lt;br&gt;\",\n      \"Type:\", communication_type, \"&lt;br&gt;\",\n      \"Count:\", count_of_comm, \"&lt;br&gt;\",\n      \"First:\", format(timestamp_min, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n      \"Last:\", format(timestamp_max, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n      \"Content Sample:\", content_sample\n    )\n  )\n\n# Create the tbl_graph object for the ego network\nnadia_ego_network_graph &lt;- tbl_graph(nodes = ego_nodes_for_graph, edges = ego_edges_for_graph, directed = TRUE)\n\nprint(\"--- Checking: Number of nodes and edges in Nadia's Ego Network Graph ---\")\nprint(paste(\"Nodes:\", gorder(nadia_ego_network_graph), \"Edges:\", gsize(nadia_ego_network_graph)))\nprint(\"---------------------------------------------------------------------\")\n\n\n\n\n\n9.2.2 Nadia’s Sent and Received Ego Networks\n\n\n9.2.2.1 Sent Communications Network\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Define custom colors for node types (reusing from previous code)\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",      # Blue\n  \"Vessel\" = \"#D55E00\",      # Orange\n  \"Organization\" = \"#117733\", # Green\n  \"Location\" = \"#AA4499\",   # Purple\n  \"Nadia Conti\" = \"red\"      # Special color for Nadia\n)\n\n# Define custom shapes for node subtypes\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",        # Circle for visNetwork\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Nadia Conti\" = \"star\"   # Star shape for Nadia in visNetwork\n)\n\n# Separate the edges into two sets: Nadia Sent and Nadia Received\nedges_sent &lt;- ego_edges_for_graph %&gt;%\n  filter(nadia_role_in_comm == \"Nadia Sent\")\n\nedges_received &lt;- ego_edges_for_graph %&gt;%\n  filter(nadia_role_in_comm == \"Nadia Received\")\n\n# Function to build visNetwork plot for a given edge set\nbuild_visnetwork_plot &lt;- function(edge_df, title_label) {\n  # Prepare nodes from edge list\n  node_ids &lt;- unique(c(edge_df$from, edge_df$to))\n\n  nodes &lt;- ego_nodes_for_graph %&gt;%\n    filter(id %in% node_ids) %&gt;%\n    mutate(\n      label = ifelse(display_name == \"Nadia Conti\", \"\", display_name),\n      title = paste0(\n        \"&lt;b&gt;\", display_name, \"&lt;/b&gt;&lt;br&gt;\",\n        \"Type: \", node_legend_group, \"&lt;br&gt;\",\n        \"Sent: \", sent_count, \"&lt;br&gt;\",\n        \"Received: \", received_count\n      ),\n      group = ifelse(display_name == \"Nadia Conti\", \"Nadia Conti\", node_legend_group)\n    ) %&gt;%\n    select(id, label, title, group, value = node_size)\n\n  # Prepare edges with arrow and tooltip\n  edges &lt;- edge_df %&gt;%\n    filter(!is.na(from) & !is.na(to)) %&gt;%\n    mutate(\n      arrows = \"to\",\n      title = paste0(\n        \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n        \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;\",\n        \"&lt;b&gt;Type:&lt;/b&gt; \", communication_type, \"&lt;br&gt;\",\n        \"&lt;b&gt;Count:&lt;/b&gt; \", count_of_comm, \"&lt;br&gt;\",\n        \"&lt;b&gt;First:&lt;/b&gt; \", format(timestamp_min, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n        \"&lt;b&gt;Last:&lt;/b&gt; \", format(timestamp_max, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n      \"&lt;b&gt;Content Sample:&lt;/b&gt;&lt;br&gt;&lt;div style='max-width:300px;white-space:normal;'&gt;\", content_sample, \"&lt;/div&gt;\"\n      )\n    ) %&gt;%\n    select(from, to, arrows, title, width = count_of_comm)\n\n  # Create visNetwork\n  visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n    visEdges(smooth = FALSE, arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n    visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n    visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n    visNodes(font = list(size = 14)) %&gt;%\n    visGroups(groupname = \"Person\", color = node_legend_colors_plot[[\"Person\"]], shape = node_legend_shapes_plot[[\"Person\"]]) %&gt;%\n    visGroups(groupname = \"Vessel\", color = node_legend_colors_plot[[\"Vessel\"]], shape = node_legend_shapes_plot[[\"Vessel\"]]) %&gt;%\n    visGroups(groupname = \"Organization\", color = node_legend_colors_plot[[\"Organization\"]], shape = node_legend_shapes_plot[[\"Organization\"]]) %&gt;%\n    visGroups(groupname = \"Location\", color = node_legend_colors_plot[[\"Location\"]], shape = node_legend_shapes_plot[[\"Location\"]]) %&gt;%\n    visGroups(groupname = \"Nadia Conti\", color = node_legend_colors_plot[[\"Nadia Conti\"]], shape = node_legend_shapes_plot[[\"Nadia Conti\"]]) %&gt;%\n      visLegend(\n    addNodes = legend_df,\n    ncol = 2,\n    position = \"left\",\n    main = \"Entity (Sub)Types\",\n    useGroups = FALSE) %&gt;%\n    visLayout(randomSeed = 123) %&gt;%\n    visNetwork::visExport() %&gt;%\n    visNetwork::visPhysics(enabled = TRUE) %&gt;%\n    visNetwork::visInteraction(navigationButtons = TRUE) %&gt;%\n    visNetwork::visEvents(stabilizationIterationsDone = \"function () {this.setOptions({physics:false});}\")\n}\n\n# Build and show visNetwork plots\nbuild_visnetwork_plot(edges_sent, \"Nadia Sent Ego Network\")\n\n\n\n\n9.2.2.2 Received Communications Network\n\n\n\n\n\n\n\n\n\n\nShow the code\nbuild_visnetwork_plot(edges_received, \"Nadia Received Ego Network\")\n\n\n\n\n9.2.3 Findings:\nWe then wanted to find more about the correspondences. The first graph illustrated Nadia’s sent communications and the second graph were her received communications. Hover over nodes to see the sent or received count from the perspective of the entity. Hover over arrowheads to see the number, direction, count, first and last correspondence time, type of sent or received, and content of one communication. Nadia sent only 8 but received 18 communications (possibly indicative of using a pseudonym):\n\nNodes involved: Nadia, Davis, Elise, Haacklee Habor, Liam, Marlin, Neptune, Oceanus City Council, Remora, Rodriguez, Sailor Shifts Team, Sentinel, V. Miesel Shipping.\nSent more direct communications to Liam (2) and Neptune (2), relative to others.\nReceived more from Davis (5), Elise (3), and Liam (2), relative to others.\nThe next step would be to find out the suspicious characters/ activities.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#nadias-ego-network-2-hops-degree-centrality",
    "href": "Prototype.html#nadias-ego-network-2-hops-degree-centrality",
    "title": "Prototype",
    "section": "9.3 Nadia’s Ego Network: 2-hops degree centrality",
    "text": "9.3 Nadia’s Ego Network: 2-hops degree centrality\nTo uncover more details, we designed n-hops degree centrality here. We input 2 hops to hover over the nodes and look into the communications in a wider network. We understand that should there be requirements for details, we could look into 3-hops and more.\n\n\n\n\n\n\n\n\n\n\nShow the code\n# ---- 1. Define styles and legends ----\n\nlibrary(igraph)\n\nevent_subtypes &lt;- c(\n  \"Communication\", \"Monitoring\", \"VesselMovement\", \"Assessment\",\n  \"Collaborate\", \"Endorsement\", \"TourActivity\", \"TransponderPing\",\n  \"Harbor Report\", \"Fishing\", \"Criticize\"\n)\n\nrelationship_subtypes &lt;- c(\n  \"Coordinates\", \"AccessPermission\", \"Operates\", \"Colleagues\",\n  \"Suspicious\", \"Reports\", \"Jurisdiction\", \"Unfriendly\", \"Friends\"\n)\n\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",\n  \"Relationship\" = \"#AF8DC3\"\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",\n  \"Relationship\" = \"square x\"\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n# ---- Define ego extraction function ----\nextract_ego_subgraph &lt;- function(center_node = \"Nadia Conti\", hops = 2) {\n  g &lt;- graph_from_data_frame(\n    d = mc3_edges_final %&gt;% select(from = from_id, to = to_id),\n    vertices = mc3_nodes_final %&gt;% select(id) %&gt;% distinct() %&gt;% rename(name = id),\n    directed = TRUE\n  )\n  ego_graph &lt;- make_ego_graph(g, order = hops, nodes = center_node, mode = \"all\")[[1]]\n  node_ids &lt;- V(ego_graph)$name\n  edge_df &lt;- as_data_frame(ego_graph, what = \"edges\")\n\n  ego_nodes &lt;- mc3_nodes_final %&gt;%\n    filter(id %in% node_ids) %&gt;%\n    mutate(\n      label = ifelse(is.na(name), id, name),\n      tooltip_extra = case_when(\n        type == \"Event\" & sub_type == \"Communication\" ~ content,\n        type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n        type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n        type == \"Event\" & sub_type == \"Assessment\" ~ results,\n        type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n        type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n        type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n        TRUE ~ NA_character_\n      ),\n      title = paste0(\n        \"&lt;b&gt;\", label, \"&lt;/b&gt;&lt;br&gt;\",\n        \"Type: \", type, \"&lt;br&gt;\",\n        \"Sub-type: \", sub_type, \"&lt;br&gt;\",\n        ifelse(!is.na(tooltip_extra), paste0(\"&lt;br&gt;&lt;b&gt;Details:&lt;/b&gt; \", tooltip_extra), \"\")\n      ),\n      group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)\n    ) %&gt;%\n    select(id, label, group, title) %&gt;%\n    distinct()\n\n  list(nodes = ego_nodes, edges = edge_df)\n}\n\n# ---- Extract and build Nadia 2-hop ego network ----\nego_data &lt;- extract_ego_subgraph(\"Nadia Conti\", hops = 2)\n\nnodes &lt;- ego_data$nodes\nedges &lt;- ego_data$edges\n\n# Save for inspection or export\nnadia_ego_nodes_2hop &lt;- nodes\nnadia_ego_edges_2hop &lt;- edges\n\n# ---- Build visNetwork ----\nnet &lt;- visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visNodes(font = list(\n    size = 14,\n    color = STYLES$node_label_dark,\n    face = STYLES$font_family,\n    vadjust = -15\n  ))\n\n# ---- Apply shape and color per group ----\nfor (group_name in names(node_legend_colors_plot)) {\n  net &lt;- net %&gt;% visGroups(\n    groupname = group_name,\n    color = node_legend_colors_plot[[group_name]],\n    shape = node_legend_shapes_plot[[group_name]]\n  )\n}\n\n# ---- Add legend ----\nused_groups &lt;- unique(nodes$group)\n\nlegend_df &lt;- tibble::tibble(\n  label = used_groups,\n  shape = node_legend_shapes_plot[used_groups],\n  color = node_legend_colors_plot[used_groups]\n) %&gt;%\n  distinct(label, .keep_all = TRUE)\n\nnet &lt;- net %&gt;% visLegend(\n  addNodes = legend_df,\n  ncol = 2,\n  position = \"left\",\n  main = \"Entity (Sub)Types\",\n  useGroups = FALSE\n)\n\n# ---- Render ----\nnet\n\n\n\n9.3.1 Findings:\n\nNodes from 1-hop: Nadia, Davis, Elise, Haacklee Habor, Liam, Marlin, Neptune, Oceanus City Council, Remora, Rodriguez, Sailor Shifts Team, Sentinel, V. Miesel Shipping.\nAdditional nodes from 2-hop: EcoVigil, Sam, The Accountant, Nemo Reef.\nWe would then use these 2-hop nodes to drill in deeper to find suspicious relationships between nodes.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#summary-of-nadias-actions",
    "href": "Prototype.html#summary-of-nadias-actions",
    "title": "Prototype",
    "section": "9.4 Summary of Nadia’s Actions",
    "text": "9.4 Summary of Nadia’s Actions\n\n9.4.1 Sequential Timeline in Table (2-hop)\n\nThe Suspicious EntitiesThe Code\n\n\n\n\n                     sender_id   sender_type                recipient_id\n1                        Elise        Person Relationship_Suspicious_360\n2                  Liam Thorne        Person Relationship_Suspicious_317\n3                     EcoVigil        Vessel Relationship_Suspicious_457\n4                     Sentinel        Vessel Relationship_Suspicious_410\n5      Event_Communication_535 Communication Relationship_Suspicious_317\n6      Event_Communication_601 Communication Relationship_Suspicious_360\n7      Event_Communication_677 Communication Relationship_Suspicious_410\n8      Event_Communication_753 Communication Relationship_Suspicious_457\n9  Relationship_Suspicious_317    Suspicious        Oceanus City Council\n10 Relationship_Suspicious_360    Suspicious          V. Miesel Shipping\n11 Relationship_Suspicious_410    Suspicious        Oceanus City Council\n12 Relationship_Suspicious_457    Suspicious                 Liam Thorne\n   recipient_type\n1      Suspicious\n2      Suspicious\n3      Suspicious\n4      Suspicious\n5      Suspicious\n6      Suspicious\n7      Suspicious\n8      Suspicious\n9    Organization\n10   Organization\n11   Organization\n12         Person\n\n\n\n\n# Extract Nadia Conti's 2-hop ego network\ng &lt;- graph_from_data_frame(\n  d = mc3_edges_final %&gt;% select(from = from_id, to = to_id),\n  vertices = mc3_nodes_final %&gt;% select(id) %&gt;% distinct() %&gt;% rename(name = id),\n  directed = TRUE\n)\n\nego_graph &lt;- make_ego_graph(g, order = 2, nodes = \"Nadia Conti\", mode = \"all\")[[1]]\nnode_ids &lt;- V(ego_graph)$name\nedge_df &lt;- as_data_frame(ego_graph, what = \"edges\")\n\nnadia_ego_nodes_2hop &lt;- mc3_nodes_final %&gt;%\n  filter(id %in% node_ids) %&gt;%\n  mutate(\n    label = ifelse(is.na(name), id, name),\n    tooltip_extra = case_when(\n      type == \"Event\" & sub_type == \"Communication\" ~ content,\n      type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n      type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n      type == \"Event\" & sub_type == \"Assessment\" ~ results,\n      type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n      type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n      type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n      TRUE ~ NA_character_\n    )\n  )\n\nnadia_ego_edges_2hop &lt;- edge_df %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, sender_name = label, sender_sub_type = sub_type), by = c(\"from\" = \"id\")) %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, recipient_name = label, recipient_sub_type = sub_type), by = c(\"to\" = \"id\"))\n\nnadia_ego_comm_df &lt;- edge_df %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, name, sub_type), by = c(\"from\" = \"id\")) %&gt;%\n  rename(\n    sender_id = from,\n    sender_name = name,\n    sender_type = sub_type\n  ) %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, name, sub_type, content, findings, destination, results, coordination_type, operational_role, jurisdiction_type, timestamp), \n            by = c(\"to\" = \"id\")) %&gt;%\n  rename(\n    recipient_id = to,\n    recipient_name = name,\n    recipient_type = sub_type\n  ) %&gt;%\n  mutate(\n    details = coalesce(content, findings, destination, results, coordination_type, operational_role, jurisdiction_type),\n    timestamp = ymd_hms(timestamp)\n  ) %&gt;%\n  select(\n    sender_id, sender_name, sender_type,\n    recipient_id, recipient_name, recipient_type,\n    timestamp, details\n  )\n\n# Print table of suspicious activities/ characters\nsuspicious_links &lt;- nadia_ego_comm_df %&gt;%\n  filter(\n    grepl(\"Suspicious\", sender_type, ignore.case = TRUE) |\n    grepl(\"Suspicious\", recipient_type, ignore.case = TRUE)\n  ) %&gt;%\n  select(\n    sender_id, sender_type,\n    recipient_id, recipient_type\n  )\n\nprint(suspicious_links)\n\n\n\n\nElise, Liam, EcoVigil, Sentinel, Oceanus City Council, V. Miesel Shipping possibly found something suspicious or were involved in something suspicious.\n\n\n\n9.4.2 Plotted Timeline (2-hop)\n\n\nShow the code\n#Filtering communications that matches Nadia's 2 hop data\nevent_ids_to_extract &lt;- nadia_ego_comm_df %&gt;%\n  filter(str_starts(sender_id, \"Event_Communication_\")) %&gt;%\n  pull(sender_id) %&gt;%\n  unique()\n\nmatched_comms_df&lt;- other_communications_df %&gt;%\n  filter(event_id %in% event_ids_to_extract)\n\n# --- FACTORING and DATETIME CLEANING ---\nmatched_comms_df_for_plot &lt;- matched_comms_df %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    sender_sub_type = factor(sender_sub_type, levels = c(\"Person\", \"Vessel\", \"Organization\", \"Location\")),\n    communicating_pair_sorted = paste(pmin(sender_name, recipient_name), pmax(sender_name, recipient_name), sep = \" & \")\n  )\n\n# 7. Add wrapped tooltip content for timeline plotting\nplot_data &lt;- matched_comms_df_for_plot %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    date = as.Date(timestamp),\n    time = format(timestamp, \"%H:%M:%S\"),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", date, \"&lt;br&gt;\",\n      \"&lt;b&gt;Time:&lt;/b&gt; \", time, \"&lt;br&gt;\",\n      \"&lt;b&gt;Event_id:&lt;/b&gt; \", event_id, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# 8. Create plot with consistent 6-hour y-axis time scale\np &lt;-ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = sender_id,\n    shape = sender_sub_type,\n    text = tooltip_text\n  ),show.legend = c(color = TRUE, shape = FALSE), \n  size = 2, alpha = 0.7) +\n  scale_shape_manual(values = c(\"Person\" = 16, \n                                \"Vessel\" = 17,\n                                \"Organization\" = 15,\n                                \"Location\" = 18\n                                  )) +\n  facet_wrap(~ sender_sub_type, ncol = 1, scales = \"fixed\") +\n    scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"14:00:00\")),  # reversed to show time top-to-bottom\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\", \"14:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\")\n)+\n  scale_x_date(\n  date_breaks = \"1 day\",\n  date_labels = \"%d %b\"\n)+\n\n  facet_wrap(~ sender_sub_type, ncol = 1) +\n  labs(\n    title = \"Nadia's 2-hop Communications (Sender's perspective)\",\n    x = \"Date\", y = \"Time of Day\", color = \"Sender (subtype, name)\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# 9. Make interactive with Plotly\nggplotly(p, tooltip = \"text\")",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#discussioninterpretation-1-2-hop-data",
    "href": "Prototype.html#discussioninterpretation-1-2-hop-data",
    "title": "Prototype",
    "section": "9.5 Discussion/Interpretation (1 & 2 hop data):",
    "text": "9.5 Discussion/Interpretation (1 & 2 hop data):\nThere were certain questions we posted to ourselves and came out with the answers.\n\n9.5.1 The Community and Ego Network:\n\nQuestion and Answer Analysis\n\n\n\n\n\n\n\nQuestion\nAnswer\n\n\n\n\nWho were Nadia’s direct communication contacts (1-hop degree centrality)? Are any of them known to be suspicious or involved in illicit activities?\nFrom the thicker width in the Ego network, it appeared that Nadia often communicated with Liam, Elise, and Davis.\nLiam appeared to be The Middleman within Nadia’s direct community from the Louvain Community Network.\nFrom the filtered table on suspicious relationships, Elise, Liam, EcoVigil, Sentinel, Oceanus City Council, and V. Miesel Shipping were noted to have suspicious relationships.\nTheir conversations were the area of focus to uncover their roles, relationships and identities.\n\n\nWere there any other ‘Event’ or ‘Relationship’ nodes directly connected to Nadia in this communication network that hinted at suspicious people/ activities?\nBased on information from question 2, Rodriguez was previously involved in mining activities that affected the environment. ‘Mining’ as a topic and his conversations would be tracked.\n\n\n\n\n\n\n9.5.2 The Communication Timeline and Content:\nIn the nadia_full_communications_timeline table, the actual content of her direct two-way communications were investigated over the course of 9 days. There were certain suspicious entities, keywords, coded language, or unusual topics detected that were suspicious. We have tabled out the segmented suspicious and non-suspicious entities for investigation and elimination.\n\nNot in the Network but Mentioned in the ContentSuspicious EntityNon Suspicious Entity\n\n\n\n\n\n\n\n\n\n\n\nEntity\nForm of Subject Matter\nRationale\nEvent ID\n\n\n\n\nNemo Reef\nLocation\nLikely conservation area which was picked by the characters for illicit activities.\n331, 943\n\n\nPermit #CR-7844\nItem\nLikely a permit to show tourism activity as a cover for suspicious activities. Rodriguez is likely linked to vessels Mako, Neptune, and Remora operating under this permit with a tourism facade.\n582, 847, 805\n\n\nEcoVigil\nVessel\nEcoVigil will likely affect Nadia’s operations when they use their ROV. Nadia recommended to V. Miesel to accelerate the planned operation. They were likely working for different sides.\n753, 847\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuspicious Entity\nSub Type\nCommunity\nRationale\nEvent ID\n\n\n\n\nHaacklee Harbor\nLocation\n2\nNadia’s communication to Haacklee Harbor is suspicious when she wanted the documents destroyed and the special corridor to Nemo Reef cancelled.\n331\n\n\nLiam aka The Middleman\nPerson\n2\nNadia wanted him to double his usual fee to ensure Harbor Master remains cooperative. Identity revealed through:\n529, 795, 847\n\n\nDavis\nPerson\n1\nNadia told him to create a clean paper trail. She will provide permits.\n521\n\n\nElise aka Mrs. Money\nPerson\n1\nNadia warned Elise that conservation vessels might complicate their operation. Identity revealed through:\n708, 528, 538, 677\n\n\nRodriguez aka Small Fry\nPerson\n1\nLinked to Mako, which is operating under a permit with a tourism facade.\n805\n\n\nRemora\nVessel\n1\nRemora reported a tourism facade to Nadia and planned underwater lighting placements in Nemo Reef while monitoring conservation vessels.\n943\n\n\nNeptune\nVessel\n1\nNadia told Neptune to stay under the radar.\n538\n\n\nV. Miesel HQ\nOrganisation\n1\nOrganisation was aware of the suspicious permit and The Middleman.\n846, 847\n\n\nSailor Shifts Team aka Glitters Team\nOrganisation\n1\nNadia provided crew members for the setup related to the permit.\n520\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNon Suspicious Entity\nSub Type\nCommunity\nRationale\nEvent ID\n\n\n\n\nOceanus City Council\nOrganisation\n2\nOceanus City Council as a whole is not suspicious as an organisation as Liam stated this organisation suspected nothing.\n535\n\n\nSentinel\nVessel\n2\nSentinel Vessel suspected ulterior motives as the water quality was fine.\n677\n\n\nMarlin\nVessel\n2\nMarlin inquired about unusual vessel routes near eastern shoals, Nadia and Davis might need to address this.\n584",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#querying-keywords",
    "href": "Prototype.html#querying-keywords",
    "title": "Prototype",
    "section": "9.6 Querying Keywords",
    "text": "9.6 Querying Keywords\nBased on our knowledge, we decided to connect to external information. We used knowledge from Nadia’s current network and communication with keyword search of our queries.\n\n9.6.1 Plotted Timeline (Word Query: Permit related)\n\n\nShow the code\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(hms)\nlibrary(tidyr)\n\n# -- Step 1: Define keywords\nkeywords &lt;- c(\"permit\", \"1045\", \"7844\")\npattern &lt;- paste0(\"\\\\b(\", paste(keywords, collapse = \"|\"), \")\\\\b\")\n\n# -- Step 2: Filter messages\nsearch_target_content &lt;- tolower(other_communications_df$content)\n\nkeyword_matches_df &lt;- other_communications_df %&gt;%\n  filter(str_detect(search_target_content, pattern))\n\n# -- Step 3: Extract keywords\nplot_data &lt;- keyword_matches_df %&gt;%\n  mutate(matched_keywords = str_extract_all(tolower(content), pattern)) %&gt;%\n  unnest(matched_keywords) %&gt;%\n  mutate(matched_keywords = str_to_title(matched_keywords)) %&gt;%\n  arrange(matched_keywords, timestamp) %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", comm_date,\n      \"&lt;br&gt;&lt;b&gt;Time:&lt;/b&gt; \", comm_time_of_day,\n      \"&lt;br&gt;&lt;b&gt;Event ID:&lt;/b&gt; \", event_id,\n      \"&lt;br&gt;&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# -- Step 4: Plot\np &lt;- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = matched_keywords,\n    shape = sender_sub_type,\n    text = tooltip_text,\n    group = matched_keywords  # ensures matched_keywords is in layer\n  ), size = 2.5, alpha = 0.7, show.legend = TRUE) +\n  scale_shape_manual(values = c(\n    \"Person\" = 16,\n    \"Vessel\" = 17,\n    \"Organization\" = 15,\n    \"Location\" = 18\n  )) +\n  facet_wrap(~ matched_keywords, ncol = 1, scales = \"fixed\") +\n  scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"13:00:00\")),\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\")\n  ) +\n  scale_x_date(date_breaks = \"1 day\", date_labels = \"%d %b\") +\n  labs(\n    title = \"Interactive Timeline: Keyword Mentions by Day and Time\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    shape = \"Sender Type\",\n    color = \" \"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# -- Step 5: Convert to plotly\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\n9.6.1.1 Findings in sequential order:\n\nThere were overlaps as the blue permit also included the red NR-1045 permit and green CR-7844 permit.\n\n\n\nShow the code\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(readr) # Used for read_lines\n\n# 1. Prepare data from the text provided\ndata_text &lt;- \"\nDate & Time | Event Description\n------------|---------------------------------------------------------------------------------------------------------------\n2 Oct (12:16pm) | Rodriguez was from the Sailor Shifts Team.\n5 Oct (10:54am) | Jensen from City Council approved Nemo Reef permit.\n6 Oct (9:57am) | Remora told Sailor Shifts Team that Nadia got Commissioner Torres to sign off the permit.\n6 Oct (10:45am) | Mako acknowledged NR-1045 permit to Nemo Reef.\n6 Oct (12:33pm) | Mako was lead vessel to Neptune and Remora as authorised by V. Miesel Shipping.\n7 Oct (9:40am) | Mako was operating under permit NR-1045 for conservation research.\n8 Oct (10:24am) | Mako was operating under V. Miesel's special marine research permit CR-7844 approved by Oceanus City Council.\n8 Oct (10:30am) | Mako informed Remora that both of them were operating under permit CR-7844 and have a 5 day deadline.\n8 Oct (10:40am) | Remora was approved by Paackland Harbor to operate with extended hours under permit NR-1045.\n9 Oct (11:53am) | Mako requesed for additional crew from v Miesel Shipping for the 24hr operations over next 5 days.\n11 Oct (6:00am) | Nemo Reef closure mandated by Oceanus City Council.\n11 Oct (8:57am) | All research permits must be submitted within 72 hours.\n11 Oct (10:05am) | V. Miesel Shipping informed Remora that 30% of her crew to be reassigned to Neptune.\n12 Oct (10:01am) | Davis as Captain oversaw crew reallocation.\n12 Oct (11:19am) | Nadia secured documentation for CR-7844.\n12 Oct (12:52pm) | Harbor closure for 3 days from 13 Oct 06:00.\n\"\n\n# Parse the data into a data frame\n# Use read_lines to handle the multi-line string\ndata_lines &lt;- read_lines(data_text)\n\n# Remove the header separator line and any empty lines\ndata_lines &lt;- data_lines[!grepl(\"^---|===\", data_lines) & data_lines != \"\"]\n\n# The first non-separator line is the header\ncol_names_raw &lt;- str_split(data_lines[1], \"\\\\|\")[[1]]\ncol_names &lt;- str_trim(col_names_raw)\n\n# The rest are data rows\ndata_content &lt;- data_lines[-1]\n\n# Create data frame by splitting lines and putting into a tibble\ndf &lt;- tibble(line = data_content) %&gt;%\n  mutate(\n    `Date & Time` = str_trim(str_extract(line, \"^[^|]+\")),\n    `Event Description` = str_trim(str_extract(line, \"(?&lt;=\\\\|).+$\"))\n  ) %&gt;%\n  select(`Date & Time`, `Event Description`) # Ensure correct column order and names\n\n# 2. Create the reactable table with desired features\n\nreactable(\n  df,\n  filterable = TRUE, # Enable column-specific filters (from the tutorial)\n  searchable = TRUE, # Enable global search box (from the tutorial)\n  paginationType = \"numbers\", # Display page numbers (corrected from \"pages\")\n  defaultPageSize = 5, # Show 5 rows per page\n  showPageSizeOptions = TRUE, # Allow users to change page size\n  pageSizeOptions = c(5, 10, 15, 20, 50), # Options for page sizes\n  striped = TRUE, # Add alternating row colors (from the tutorial)\n  highlight = TRUE, # Highlight row on hover (from the tutorial)\n  columns = list(\n    `Date & Time` = colDef(\n      name = \"Date & Time\",\n      minWidth = 120, # Adjust width to fit content\n      align = \"left\"\n    ),\n    `Event Description` = colDef(\n      name = \"Event Description\",\n      minWidth = 500, # Ensure enough width for event descriptions\n      align = \"left\"\n    )\n  ),\n  # Apply a custom theme for better aesthetics (inspired by the tutorial)\n  theme = reactableTheme(\n    borderColor = \"#dfe2e5\",\n    stripedColor = \"#f6f8fa\",\n    highlightColor = \"#f0f5f9\",\n    cellPadding = \"8px 12px\",\n    style = list(fontFamily = \"Verdana, Geneva, sans-serif\", fontSize = \"14px\"),\n    headerStyle = list(\n      \"&.rt-th:hover\" = list(backgroundColor = \"#e0e6eb\"),\n      fontSize = \"15px\",\n      fontWeight = 600,\n      color = \"#333\", # Darker header text for contrast\n      background = \"#f7f7f7\" # Slightly grey background for header\n    ),\n    rowSelectedStyle = list(backgroundColor = \"#e6f2ff\", \"&:hover\" = list(backgroundColor = \"#e6f2ff\")),\n    # Styles for search/filter inputs (from tutorial's theme example)\n    searchInputStyle = list(width = \"100%\", margin = \"5px 0\", padding = \"5px\"),\n    filterInputStyle = list(width = \"100%\", margin = \"2px 0\", padding = \"4px\")\n  )\n)\n\n\n\n\n\n\n\nSince there were little communications on 13 Oct, we looked into other word queries.\nUsing information obtained from question 2 and 4, we had in mind certain keywords to query for.\n\n\n\n9.6.2 Plotted Timeline (Word Query: Music Video Related)\n\n\nShow the code\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(hms)\nlibrary(tidyr)\n\n# -- Step 1: Define keywords\nkeywords &lt;- c(\"mine\", \"mining\", \"music video\", \"lighting\", \"reef operation\")\npattern &lt;- paste0(\"\\\\b(\", paste(keywords, collapse = \"|\"), \")\\\\b\")\n\n# -- Step 2: Filter messages\nsearch_target_content &lt;- tolower(other_communications_df$content)\n\nkeyword_matches_df &lt;- other_communications_df %&gt;%\n  filter(str_detect(search_target_content, pattern))\n\n# -- Step 3: Extract keywords\nplot_data &lt;- keyword_matches_df %&gt;%\n  mutate(matched_keywords = str_extract_all(tolower(content), pattern)) %&gt;%\n  unnest(matched_keywords) %&gt;%\n  mutate(matched_keywords = str_to_title(matched_keywords)) %&gt;%\n  arrange(matched_keywords, timestamp) %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", comm_date,\n      \"&lt;br&gt;&lt;b&gt;Time:&lt;/b&gt; \", comm_time_of_day,\n      \"&lt;br&gt;&lt;b&gt;Event ID:&lt;/b&gt; \", event_id,\n      \"&lt;br&gt;&lt;b&gt;From:&lt;/b&gt; \", sender_name,\n      \"&lt;br&gt;&lt;b&gt;To:&lt;/b&gt; \", recipient_name,\n      \"&lt;br&gt;&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# -- Step 4: Plot\np &lt;- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = matched_keywords,\n    shape = sender_sub_type,\n    text = tooltip_text,\n    group = matched_keywords  # ensures matched_keywords is in layer\n  ), size = 2.5, alpha = 0.7, show.legend = TRUE) +\n  scale_shape_manual(values = c(\n    \"Person\" = 16,\n    \"Vessel\" = 17,\n    \"Organization\" = 15,\n    \"Location\" = 18\n  )) +\n  facet_wrap(~ matched_keywords, ncol = 1, scales = \"fixed\") +\n  scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"13:00:00\")),\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\")\n  ) +\n  scale_x_date(date_breaks = \"1 day\", date_labels = \"%d %b\") +\n  labs(\n    title = \"Interactive Timeline: Keyword Mentions by Day and Time\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    shape = \"Sender Type\",\n    color = \"Keyword\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# -- Step 5: Convert to plotly\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\n9.6.2.1 Findings through Questions & Answers:\n\nQuestion and Answer Analysis\n\n\n\n\n\n\n\nQuestion\nAnswer\n\n\n\n\nWhich vessel was the suspicious permit #CR-7844 prepared for?\n(See 8.6.1)\nFrom question 2 and 4, we know this is V. Miesel’s Marine Research Permit, and prepared for Mako (lead vessel), Neptune, and Remora.\n\n\nWhat suspicious activity was performed at Nemo Reef? Which day was it?\n(See 8.6.2)\n14 Oct 2040 for a music video production.\n\n\nWhy is underwater lighting placement needed at Nemo Reef?\n(See 8.6.2)\nFor a music video production.\n\n\nWhat were the expedited approvals and secretive logistics?\n(See 8.6.1)\nPermits for Nemo Reef through NR-1045 and CR-788 were expedited. The secretive logistics were the crates and equipment on the vessels for the music video production.\n\n\nWho were the high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group?\n(Various Ids)\nOceanus Officials: Commissioner Blake, Commissioner Torres, Council Knowles, The Middleman, Jensen, Liam Thorne\nSailor Shift’s Team: Boss, Council Knowles, Davis, Glitters Team, Liam Thorne, Mako, Mrs. Money, Nadia, Neptune, Remora, Rodriguez, Sam, Samantha Blake, Small Fry, The Accountant, The Intern, The Middleman\nLocal Influential Families: Council Knowles, V. Miesel Shipping\nLocal Conservationist Group: Defender, EcoVigil, Green Guardians, Horizon, Kelly, Reef Guardians, Seawatch, Sentinel, The Lookout\n\n\nWas the music video production activity legal?\n(Id 979)\nThere was no environmental damage or mining involved in the music production. However, an environmental assessment was not conducted prior. Clepper may assess that his suspicions about Nadia Conti’s illicit activity may not be straightforward and could depend on whether an assessment was mandatory before commercial activities.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#entities-breakdown",
    "href": "Prototype.html#entities-breakdown",
    "title": "Prototype",
    "section": "8.1 Entities Breakdown",
    "text": "8.1 Entities Breakdown\nCore Logic:\n\nIf two names appear as sender and recipient in the same message, they cannot belong to the same person — i.e., they’re not aliases of each other.\nIf two names sent a message at the exact time, they cannot belong to the same person.\n\nWe created Alluvia Diagrams to chart: real_identity → observed_name → community\n\nExtraction of the list of Entity namesManual Mapping\n\n\n\n\nShow the code\nunique_names &lt;- sort(unique(c(other_communications_df$sender_name, \n                              other_communications_df$recipient_name)))\nunique_names\n\n\n [1] \"Boss\"                 \"City Officials\"       \"Clepper Jensen\"      \n [4] \"Davis\"                \"Defender\"             \"EcoVigil\"            \n [7] \"Elise\"                \"Glitters Team\"        \"Green Guardians\"     \n[10] \"Haacklee Harbor\"      \"Himark Harbor\"        \"Horizon\"             \n[13] \"Kelly\"                \"Knowles\"              \"Liam Thorne\"         \n[16] \"Mako\"                 \"Marlin\"               \"Miranda Jordan\"      \n[19] \"Mrs. Money\"           \"Nadia Conti\"          \"Neptune\"             \n[22] \"Northern Light\"       \"Oceanus City Council\" \"Osprey\"              \n[25] \"Paackland Harbor\"     \"Port Security\"        \"Reef Guardian\"       \n[28] \"Remora\"               \"Rodriguez\"            \"Sailor Shifts Team\"  \n[31] \"Sam\"                  \"Samantha Blake\"       \"Seawatch\"            \n[34] \"Sentinel\"             \"Serenity\"             \"Small Fry\"           \n[37] \"The Accountant\"       \"The Intern\"           \"The Lookout\"         \n[40] \"The Middleman\"        \"V. Miesel Shipping\"  \n\n\n\n\n\n\nShow the code\nname_mapping &lt;- tibble::tibble(\n  observed_name = c(\n    \"Boss\", \"City Officials\", \"Clepper Jensen\", \"Davis\", \"Defender\", \"EcoVigil\",\n    \"Elise\", \"Glitters Team\", \"Green Guardians\", \"Haacklee Harbor\", \"Himark Harbor\", \"Horizon\",\n    \"Kelly\", \"Knowles\", \"Liam Thorne\", \"Mako\", \"Marlin\", \"Miranda Jordan\",\n    \"Mrs. Money\", \"Nadia Conti\", \"Neptune\", \"Northern Light\", \"Oceanus City Council\", \"Osprey\",\n    \"Paackland Harbor\", \"Port Security\", \"Reef Guardian\", \"Remora\", \"Rodriguez\", \"Sailor Shift Team\",\n    \"Sam\", \"Samantha Blake\", \"Seawatch\", \"Sentinel\", \"Serenity\", \"Small Fry\",\n    \"The Accountant\", \"The Intern\", \"The Lookout\", \"The Middleman\", \"V. Miesel Shipping\"\n  ),\n  real_identity = c(\n    \"Nadia Conti\", \"Oceanus City Council\", \"Clepper Jensen\", \"Captain Davis\", \"Sentinel\", \"EcoVigil\",\n    \"Elise\", \"Sailor Shift Team\", \"Green Guardians\", \"Harbor Authority\",\"Harbor Authority\", \"Horizon\",\n    \"Kelly\", \"Knowles\", \"Liam Thorne\", \"Mako\", \"Small Fishing Vessel\", \"Miranda Jordan\",\n    \"Elise\", \"Nadia Conti\", \"Neptune\", \"Commercial Vessel\", \"Oceanus City Council\", \"Tourism Vessel\",\n    \"Harbor Authority\", \"Oceanus City Council\", \"Reef Guardian\", \"Remora\", \"Rodriguez\", \"Sailor Shift Team\",\n    \"Sam\", \"Samantha Blake\", \"Kelly\", \"Sentinel\", \"Private Luxury Yacht\", \"Rodriguez\",\n    \"Elise\", \"Sam\", \"Kelly\", \"Liam Thorne\", \"V. Miesel Shipping\"\n  ),\n  community = c(\n    \"V. Miesel Shipping\", \"City Council\", \"Haacklee Herald\", \"V. Miesel Shipping\", \"Local Conservationist Group\", \"Local Conservationist Group\",\n    \"V. Miesel Shipping\", \"Sailor Shift Team\", \"Local Conservationist Group\", \"Harbor Authority\", \"Harbor Authority\", \"Local Conservationist Group\",\n    \"Local Conservationist Group\", \"V. Miesel Shipping\", \"City Council\", \"V. Miesel Shipping\", \"Maritime\", \"Haacklee Herald\",\n    \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Maritime\", \"City Council\", \"Maritime\",\n    \"Harbor Authority\", \"City Council\", \"Local Conservationist Group\", \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Sailor Shift Team\",\n    \"V. Miesel Shipping\", \"Sailor Shift Team\", \"Local Conservationist Group\", \"Local Conservationist Group\", \"Maritime\", \"V. Miesel Shipping\",\n    \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Local Conservationist Group\", \"City Council\", \"V. Miesel Shipping\"\n  )\n)\n\nmulti_members &lt;- tibble::tibble(\n  observed_name = c(\n    #  City Council members (additional to existing)\n    \"Commissioner Blake\", \"Commissioner Torres\", \"Council Knowles\", \"The Middleman\", \"Jensen from City Council\", \"Liam Thorne\",\n\n    # Sailor Shift Team (may already exist, but we ensure all)\n    \"Boss\", \"Council Knowles\", \"Davis\", \"Glitters Team\", \"Liam Thorne\", \"Mako\", \"Mrs. Money\", \"Nadia Conti\", \"Neptune\",\n    \"Remora\", \"Rodriguez\", \"Sam\", \"Samantha Blake\", \"Small Fry\", \"The Accountant\", \"The Intern\", \"The Middleman\", \"Elise\",\n\n    #  Influential Families\n    \"Council Knowles\", \"V. Miesel Shipping\",\n\n    #  Conservationist Group\n    \"Defender\", \"EcoVigil\", \"Green Guardians\", \"Horizon\", \"Kelly\", \"Reef Guardian\", \"Seawatch\", \"Sentinel\", \"The Lookout\"\n  ),\n  real_identity = c(\n    \"Commissioner Blake\", \"Commissioner Torres\", \"Council Knowles\", \"Liam Thorne\", \"Clepper Jensen\", \"Liam Thorne\",\n\n    \"Nadia Conti\", \"Council Knowles\", \"Captain Davis\", \"Sailor Shift Team\", \"Liam Thorne\", \"Mako\", \"Elise\", \"Nadia Conti\", \"Neptune\",\n    \"Remora\", \"Rodriguez\", \"Sam\", \"Samantha Blake\", \"Rodriguez\", \"Elise\", \"Sam\", \"Liam Thorne\", \"Elise\",\n\n    \"Council Knowles\", \"V. Miesel Shipping\",\n\n    \"Sentinel\", \"EcoVigil\", \"Green Guardians\", \"Horizon\", \"Kelly\", \"Reef Guardian\", \"The Lookout\", \"Sentinel\", \"Kelly\"\n  ),\n  community = c(\n    rep(\"City Council\", 6),\n    rep(\"Sailor Shift Team\", 18),\n    rep(\"Influential Families\", 2),\n    rep(\"Local Conservationist Group\", 9)\n  )\n)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#entities--interactive-alluvia-diagrams",
    "href": "Prototype.html#entities--interactive-alluvia-diagrams",
    "title": "🦫 Prototype",
    "section": "9.1.1 Entities- Interactive Alluvia Diagrams",
    "text": "9.1.1 Entities- Interactive Alluvia Diagrams\nCreated Alluvial Diagram. Hover over to see details for individual identities.\nReal Identity from analysis -&gt; Observed Name from data -&gt; Community\n\n\nShow the code\n# --- Libraries ---\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggalluvial)\nlibrary(stringr)\nlibrary(plotly)\n\n# --- 1. Build Alluvial Dataset ---\nalluvial_data &lt;- name_mapping %&gt;%\n  bind_rows(multi_members) %&gt;% # Combine the two data sources\n  distinct() %&gt;% # Remove any duplicate rows after combining\n  filter(!is.na(real_identity) & !is.na(community)) %&gt;%\n  count(real_identity, observed_name, community, name = \"value\") %&gt;%\n  mutate(tooltip = paste0( # Create the tooltip string\n    \"Real Identity: \", real_identity, \"&lt;br&gt;\",\n    \"Observed Name: \", observed_name, \"&lt;br&gt;\",\n    \"Community: \", community, \"&lt;br&gt;\",\n    \"Count: \", value\n  ))\n\n# --- 3. Create static ggplot object (original version) ---\np &lt;- ggplot(alluvial_data,\n            aes(axis1 = real_identity, axis2 = observed_name, axis3 = community,\n                y = value,\n                text = tooltip # Map the custom tooltip string to the 'text' aesthetic\n            )) +\n  geom_alluvium(aes(fill = real_identity), width = 1/12, alpha = 0.8) +\n  geom_stratum(width = 1/12, fill = \"grey90\", color = \"black\", aes(text = NULL)) + # No dual-role fill here\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), size = 3.5, hjust = 0) +\n  scale_x_discrete(\n    limits = c(\"Real Identity\", \"Observed Name\", \"Community\"),\n    expand = c(.05, .25)\n  ) +\n  labs(\n    title = \"All Identity Flows\",\n    x = NULL, y = \"Link Count\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\", # No legend for fill here\n    panel.grid = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    plot.margin = margin(10, 80, 10, 10),\n    axis.text.x = element_text(face = \"bold\")\n  )\n\n# --- 4. Convert to interactive Plotly object ---\n# 'tooltip = \"text\"' tells Plotly to use the content of the 'text' aesthetic\ninteractive_plot &lt;- ggplotly(p, tooltip = \"text\", height = 800, width = 1000)\ninteractive_plot # This line will print the Plotly object in  Quarto output\n\n\n\n\n\n\nWe created a graph with the character’s original name, pseudonyms, and supplemented with any background information we learnt of. For instance, we learnt that Davis was a captain, or that Serenity was a private luxury yacht."
  },
  {
    "objectID": "Prototype.html#recreation-of-story-line",
    "href": "Prototype.html#recreation-of-story-line",
    "title": "Prototype",
    "section": "10.1 Recreation of Story-Line",
    "text": "10.1 Recreation of Story-Line\n\n\nShow the code\n# --- Step 0: Define Event Data for Annotations ---\nevent_dates &lt;- as.Date(c(\"2040-10-01\", \"2040-10-03\", \"2040-10-04\", \"2040-10-05\",\n                         \"2040-10-06\", \"2040-10-08\", \"2040-10-09\", \"2040-10-11\",\n                         \"2040-10-12\", \"2040-10-14\"))\n\nevent_labels_full &lt;- c(\n  \"The Middleman told The Boss (Nadia) about a potential loophole in Nemo Reef protection zone\",\n  \"Tourism vessels were offering authorised access. Their violations were addressed at City Council meeting\",\n  \"Nadia told Mako to abort Nemo Reef mission as conservation vessels were close\",\n  \"News of Nadia assisting to get permit for Nemo Reef signed by Jensen from City Council on 4/10 spreaded\",\n  \"V. Miesel Shipping HQ told Neptune that Mako is lead vessel\",\n  \"Neptune told Mako they were under special marine research permit CR-7844\",\n  \"Neptune's underwater concrete forms in fragile crates discovered\",\n  \"37 'authorised maintenance vessels' documented despite Nemo Reef closure\",\n  \"Crew reallocated from Remona to Neptune overseen by Captain Davis\",\n  \"Music video production after Nemo Reef equipment transfer\"\n)\n\nevent_labels_short &lt;- c(\n  \"Loophole\", \"Tourism\", \"Mako\", \"Permit\\nResults\", \"#NR-1045\",\n  \"#CR-7844\", \"Underwater\\nStructure\", \"37 Vessels\", \"Shifted Crew\", \"MV\\nProduction\"\n)\n\n# --- Step 1: Calculate Daily Message Frequencies ---\nfreq_df &lt;- other_communications_df %&gt;%\n  mutate(comm_date = as.Date(timestamp)) %&gt;%\n  count(comm_date, name = \"message_count\") %&gt;%\n  # Complete the date range to include all days, filling missing counts with 0\n  complete(comm_date = seq(min(comm_date), max(comm_date), by = \"day\"),\n           fill = list(message_count = 0))\n\n# --- Step 2: Build Event Annotation Table ---\nevent_df &lt;- tibble(\n  date = event_dates,\n  label = gsub(\"\\n\", \"&lt;br&gt;\", event_labels_short), # Replace \\n with &lt;br&gt; for HTML tooltips\n  tooltip_raw = str_wrap(event_labels_full, width = 40) # Wrap long text for tooltips\n)\n\ncore_events &lt;- event_df %&gt;%\n  left_join(freq_df, by = c(\"date\" = \"comm_date\")) %&gt;%\n  group_by(date) %&gt;%\n  mutate(\n    offset = row_number(), # For stacking multiple events on the same day\n    # Adjust value for arrow positioning relative to message count\n    value = as.numeric(message_count) + 0.5 * offset,\n    date_jitter = date + (offset - 1) * 0.1 # Slight horizontal jitter if multiple events\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    # Create rich HTML tooltip content for Plotly\n    tooltip = paste0(\n      \"📅 &lt;b&gt;Date:&lt;/b&gt; \", date,\n      \"&lt;br&gt;✉️ &lt;b&gt;Messages:&lt;/b&gt; \", message_count,\n      \"&lt;br&gt;📝 &lt;b&gt;Core Event:&lt;/b&gt; \", tooltip_raw\n    )\n  )\n\n# --- Step 3: Create the ggplot2 Plot ---\np &lt;- ggplot(freq_df, aes(x = comm_date, y = message_count)) +\n  # Line plot for message frequency\n  geom_line(color = \"navyblue\") +\n  # Segments (arrows) pointing from the line to the event annotations\n  geom_segment(\n    data = core_events,\n    aes(x = date, xend = date, y = value - 1, yend = value + 0.5), # Adjust yend for arrow tip\n    arrow = arrow(length = unit(0.15, \"inches\")), color = \"grey40\"\n  ) +\n  # Points for the events (these will have the interactive tooltips)\n  geom_point(\n    data = core_events,\n    aes(x = date, y = value + 0.5, text = tooltip), # 'text' aesthetic is key for Plotly tooltips\n    color = \"firebrick\", size = 3\n  ) +\n  # Text labels for the short event names\n  geom_text(\n    data = core_events,\n    aes(x = date, y = value + 2, label = label), # Position text above the point/arrow\n    color = \"black\", fontface = \"bold\", size = 2.5, vjust = 0\n  ) +\n  # X-axis scale for dates\n  scale_x_date(date_breaks = \"1 day\", date_labels = \"%b %d\") +\n  # Labels and titles\n  labs(\n    title = \"Message Frequency Over Time\",\n    x = \"Date\", y = \"Message Count\"\n  ) +\n  # Ensure annotations are not clipped by plot limits\n  coord_cartesian(clip = \"off\") +\n  # Minimal theme for a clean look\n  theme_grey(base_size = 10) +\n  # Further theme adjustments\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(face=\"bold\"),\n    plot.margin = margin(30, 30, 10, 10), # Adjust plot margins if needed\n  )\n\n# --- Step 4: Convert to Interactive Plotly Object ---\n# The 'tooltip = \"text\"' argument tells Plotly to use the 'text' aesthetic\n# for the hover information, which we created as 'tooltip' in core_events.\np_interactive &lt;- ggplotly(p, tooltip = \"text\")\n\n# --- Step 5: Display the Interactive Plot ---\np_interactive\n\n\n\n\n\n\nHover over the red points to see the details. Here, we provided a high level summary on the core event on the preparation and production of the music video Nadia was involved in for a period of 2 weeks, and also provided a snippet to the sub-event of the tourism vessels breaching protocols earlier in the week."
  },
  {
    "objectID": "Prepatory.html",
    "href": "Prepatory.html",
    "title": "Data Preparation",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\n\nShow the code\npacman::p_load(\n  jsonlite, tidyverse, ggtext,\n  knitr, lubridate, hms, scales,\n  tidytext, dplyr, tm, SnowballC,\n  magick, patchwork, ggraph, \n  tidygraph, igraph, ggiraph, \n  SmartEDA, plotly, wordcloud, \n  ggh4x, visNetwork, ggplot2,\n  RColorBrewer, circlize, \n  stringr, wordcloud2, ggalluvial,\n  reactable, readr)\n\n\n\n\n\nIn the code chunk below, fromJSON() of jsonlite package was used to import mc3.json file into R and save the output object.\n\n\nShow the code\nmc3_data &lt;- fromJSON(\"data/mc3_graph.json\")\nmc3_schema &lt;- fromJSON(\"data/MC3_schema.json\")\n\n\nIt contains graph data, where nodes can be accessed via nodes and edges via links. This dataset had many columns but we filtered the relevant data during wrangling.\n\n\n\nWe will also set some values for consistency throughout all graphs.\n\nStyle and ColoursOthers\n\n\n\n\nShow the code\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",\n  \"Relationship\" = \"#AF8DC3\",\n  \"Nadia Conti\" = \"red\"\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",\n  \"Relationship\" = \"square x\",\n  \"Nadia Conti\" = \"star\"\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n\n\n\n\n\nShow the code\nCONFIGS = list(\n  default_seed = 1234 # For reproduceability\n)\n\n\n\n\n\n\n\n\nIn the code chunk below glimpse() is used to reveal the structure of mc3_data knowledge graph.\n\nThe CodeThe Result\n\n\nglimpse(mc3_data)\n\n\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n\n\n\n\n\n\n\n\nNext, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from mc3 tibble dataframe into two separate tibble dataframes called mc3_nodes_raw and mc3_edges_raw respectively.\n\nThe CodeNodes structure\n\n\n\n\nShow the code\nmc3_nodes_raw &lt;- as_tibble(mc3_data$nodes)\nmc3_edges_raw &lt;- as_tibble(mc3_data$edges)\n\n\nWe also looked into the nodes and edges structure.\n\n\n\n\nShow the code\nExpData(data=mc3_nodes_raw,type=2)\n\n\n   Index     Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1              type     character     1159             0          0.000\n2      2             label     character     1159             0          0.000\n3      3              name     character       72          1087          0.938\n4      4          sub_type     character     1159             0          0.000\n5      5                id     character     1159             0          0.000\n6      6         timestamp     character      770           389          0.336\n7      7   monitoring_type     character       70          1089          0.940\n8      8          findings     character       70          1089          0.940\n9      9           content     character      584           575          0.496\n10    10   assessment_type     character       33          1126          0.972\n11    11           results     character       32          1127          0.972\n12    12     movement_type     character       33          1126          0.972\n13    13       destination     character       41          1118          0.965\n14    14  enforcement_type     character       21          1138          0.982\n15    15           outcome     character       19          1140          0.984\n16    16     activity_type     character        4          1155          0.997\n17    17      participants       integer        1          1158          0.999\n18    18   thing_collected    data.frame    -2314          2316       1158.000\n19    19         reference     character        1          1158          0.999\n20    20              date     character        5          1154          0.996\n21    21              time     character        3          1156          0.997\n22    22   friendship_type     character        2          1157          0.998\n23    23   permission_type     character       55          1104          0.953\n24    24        start_date     character       90          1069          0.922\n25    25          end_date     character        6          1153          0.995\n26    26       report_type     character       19          1140          0.984\n27    27   submission_date     character       22          1137          0.981\n28    28 jurisdiction_type     character       13          1146          0.989\n29    29   authority_level     character        7          1152          0.994\n30    30 coordination_type     character       73          1086          0.937\n31    31  operational_role     character       38          1121          0.967\n   No_of_distinct_values\n1                      3\n2                     92\n3                     73\n4                     25\n5                   1159\n6                    612\n7                      6\n8                     70\n9                    581\n10                     4\n11                    33\n12                     4\n13                    26\n14                     3\n15                    20\n16                     3\n17                     1\n18                     2\n19                     2\n20                     6\n21                     4\n22                     3\n23                     4\n24                    69\n25                     6\n26                     4\n27                    23\n28                    13\n29                     3\n30                    53\n31                    35\n\n\n\n\n\n\n\n\n\n\nShow the code\nExpData(data=mc3_edges_raw,type=2)\n\n\n  Index Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1     1            id     character     3169            57          0.018\n2     2   is_inferred       logical     3226             0          0.000\n3     3        source     character     3226             0          0.000\n4     4        target     character     3226             0          0.000\n5     5          type     character     2204          1022          0.317\n  No_of_distinct_values\n1                  3170\n2                     2\n3                  1052\n4                  1156\n5                     4\n\n\n\n\n\nCode chunk below uses ggplot2 functions to reveal the frequency distribution of sub_type field of mc3_nodes_raw.\n\n\nShow the code\n# Step 1: Count and reorder\nmc3_nodes_ordered &lt;- mc3_nodes_raw %&gt;%\n  count(sub_type) %&gt;%\n  arrange((n)) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot with navy bars, sorted, and horizontal\nggplot(mc3_nodes_ordered, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(x = \"Sub_type\", y = \"Count\",\n    title = \"Distribution of Subtypes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Entity subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Entity\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Entity\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Entity Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Entity Subtypes\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Prepatory.html#loading-packages",
    "href": "Prepatory.html#loading-packages",
    "title": "Data Preparation",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\n\nShow the code\npacman::p_load(\n  jsonlite, tidyverse, ggtext,\n  knitr, lubridate, hms, scales,\n  tidytext, dplyr, tm, SnowballC,\n  magick, patchwork, ggraph, \n  tidygraph, igraph, ggiraph, \n  SmartEDA, plotly, wordcloud, \n  ggh4x, visNetwork, ggplot2,\n  RColorBrewer, circlize, \n  stringr, wordcloud2, ggalluvial,\n  reactable, readr)"
  },
  {
    "objectID": "Prepatory.html#loading-data",
    "href": "Prepatory.html#loading-data",
    "title": "Data Preparation",
    "section": "",
    "text": "In the code chunk below, fromJSON() of jsonlite package was used to import mc3.json file into R and save the output object.\n\n\nShow the code\nmc3_data &lt;- fromJSON(\"data/mc3_graph.json\")\nmc3_schema &lt;- fromJSON(\"data/MC3_schema.json\")\n\n\nIt contains graph data, where nodes can be accessed via nodes and edges via links. This dataset had many columns but we filtered the relevant data during wrangling."
  },
  {
    "objectID": "Prepatory.html#defining-common-variables",
    "href": "Prepatory.html#defining-common-variables",
    "title": "Data Preparation",
    "section": "",
    "text": "We will also set some values for consistency throughout all graphs.\n\nStyle and ColoursOthers\n\n\n\n\nShow the code\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",\n  \"Relationship\" = \"#AF8DC3\",\n  \"Nadia Conti\" = \"red\"\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",\n  \"Relationship\" = \"square x\",\n  \"Nadia Conti\" = \"star\"\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n\n\n\n\n\nShow the code\nCONFIGS = list(\n  default_seed = 1234 # For reproduceability\n)"
  },
  {
    "objectID": "Prepatory.html#inspecting-knowledge-graph-structure",
    "href": "Prepatory.html#inspecting-knowledge-graph-structure",
    "title": "Data Preparation",
    "section": "",
    "text": "In the code chunk below glimpse() is used to reveal the structure of mc3_data knowledge graph.\n\nThe CodeThe Result\n\n\nglimpse(mc3_data)\n\n\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ..."
  },
  {
    "objectID": "Prepatory.html#extracting-the-edges-and-nodes-tables",
    "href": "Prepatory.html#extracting-the-edges-and-nodes-tables",
    "title": "Data Preparation",
    "section": "",
    "text": "Next, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from mc3 tibble dataframe into two separate tibble dataframes called mc3_nodes_raw and mc3_edges_raw respectively.\n\nThe CodeNodes structure\n\n\n\n\nShow the code\nmc3_nodes_raw &lt;- as_tibble(mc3_data$nodes)\nmc3_edges_raw &lt;- as_tibble(mc3_data$edges)\n\n\nWe also looked into the nodes and edges structure.\n\n\n\n\nShow the code\nExpData(data=mc3_nodes_raw,type=2)\n\n\n   Index     Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1              type     character     1159             0          0.000\n2      2             label     character     1159             0          0.000\n3      3              name     character       72          1087          0.938\n4      4          sub_type     character     1159             0          0.000\n5      5                id     character     1159             0          0.000\n6      6         timestamp     character      770           389          0.336\n7      7   monitoring_type     character       70          1089          0.940\n8      8          findings     character       70          1089          0.940\n9      9           content     character      584           575          0.496\n10    10   assessment_type     character       33          1126          0.972\n11    11           results     character       32          1127          0.972\n12    12     movement_type     character       33          1126          0.972\n13    13       destination     character       41          1118          0.965\n14    14  enforcement_type     character       21          1138          0.982\n15    15           outcome     character       19          1140          0.984\n16    16     activity_type     character        4          1155          0.997\n17    17      participants       integer        1          1158          0.999\n18    18   thing_collected    data.frame    -2314          2316       1158.000\n19    19         reference     character        1          1158          0.999\n20    20              date     character        5          1154          0.996\n21    21              time     character        3          1156          0.997\n22    22   friendship_type     character        2          1157          0.998\n23    23   permission_type     character       55          1104          0.953\n24    24        start_date     character       90          1069          0.922\n25    25          end_date     character        6          1153          0.995\n26    26       report_type     character       19          1140          0.984\n27    27   submission_date     character       22          1137          0.981\n28    28 jurisdiction_type     character       13          1146          0.989\n29    29   authority_level     character        7          1152          0.994\n30    30 coordination_type     character       73          1086          0.937\n31    31  operational_role     character       38          1121          0.967\n   No_of_distinct_values\n1                      3\n2                     92\n3                     73\n4                     25\n5                   1159\n6                    612\n7                      6\n8                     70\n9                    581\n10                     4\n11                    33\n12                     4\n13                    26\n14                     3\n15                    20\n16                     3\n17                     1\n18                     2\n19                     2\n20                     6\n21                     4\n22                     3\n23                     4\n24                    69\n25                     6\n26                     4\n27                    23\n28                    13\n29                     3\n30                    53\n31                    35"
  },
  {
    "objectID": "Prepatory.html#edges-structure",
    "href": "Prepatory.html#edges-structure",
    "title": "Data Preparation",
    "section": "",
    "text": "Show the code\nExpData(data=mc3_edges_raw,type=2)\n\n\n  Index Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1     1            id     character     3169            57          0.018\n2     2   is_inferred       logical     3226             0          0.000\n3     3        source     character     3226             0          0.000\n4     4        target     character     3226             0          0.000\n5     5          type     character     2204          1022          0.317\n  No_of_distinct_values\n1                  3170\n2                     2\n3                  1052\n4                  1156\n5                     4"
  },
  {
    "objectID": "Prepatory.html#drilling-into-node-sub_type",
    "href": "Prepatory.html#drilling-into-node-sub_type",
    "title": "Data Preparation",
    "section": "",
    "text": "Code chunk below uses ggplot2 functions to reveal the frequency distribution of sub_type field of mc3_nodes_raw.\n\n\nShow the code\n# Step 1: Count and reorder\nmc3_nodes_ordered &lt;- mc3_nodes_raw %&gt;%\n  count(sub_type) %&gt;%\n  arrange((n)) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot with navy bars, sorted, and horizontal\nggplot(mc3_nodes_ordered, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(x = \"Sub_type\", y = \"Count\",\n    title = \"Distribution of Subtypes\") +\n  theme_minimal()"
  },
  {
    "objectID": "Prepatory.html#entity-subtypes",
    "href": "Prepatory.html#entity-subtypes",
    "title": "Data Preparation",
    "section": "",
    "text": "In the code chunk below, the Entity subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Entity\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Entity\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Entity Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Entity Subtypes\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Prepatory.html#nodes",
    "href": "Prepatory.html#nodes",
    "title": "Data Preparation",
    "section": "3.1 Nodes",
    "text": "3.1 Nodes\n\nNodes\n\n\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\n\n\nShow the code\nExpCatViz(data=mc3_nodes_raw,\n          col=\"navyblue\")\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]"
  },
  {
    "objectID": "Prepatory.html#event-subtypes",
    "href": "Prepatory.html#event-subtypes",
    "title": "Data Preparation",
    "section": "Event subtypes",
    "text": "Event subtypes\nIn the code chunk below, the Event subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Event\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Event\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Event Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Event Subtypes\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Prepatory.html#relationship-subtypes",
    "href": "Prepatory.html#relationship-subtypes",
    "title": "Data Preparation",
    "section": "Relationship subtypes",
    "text": "Relationship subtypes\nIn the code chunk below, the relationship subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Relationship\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Relationship\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Relationship Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Relationship Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "Prepatory.html#findings-from-eda",
    "href": "Prepatory.html#findings-from-eda",
    "title": "Data Preparation",
    "section": "3.1.1 Findings from EDA",
    "text": "3.1.1 Findings from EDA\n\nNodesEvent TypesRelationship TypesEntity TypesCourse of Action\n\n\nWe will use the EDA findings to determine data to focus on or eliminate. From the bar charts and the original data on mc3_nodes_raw, it was observed that:\n\nNodes were one of three types (Entity, Event, Relationship), where each of these types have their sub_types. Majority were of event type, followed by relationship, and entity.\n\nThere were 25 subtypes. Communications made up the bulk of the sub_type for Events. Coordinates made up the bulk of the sub_type for Relationship. The additional node sub_types not mentioned in the VAST 2025 MC3 Data Description under Node Attributes were: fishing, communication and coordinates.\n\n\n\n\n\nObservations of EDA from Event types:\n\nFindings field were filled when there were monitoring_type.\nContent refers to radio communication content.\nResults field were filled when there were assessment_type performed.\nWhen there is an enforcement_type of enforcement operations or warnings, there might be an outcome at times.\nWhen there is a movement_type, there might be a place of destination at times.\n\n\n\n\n\nObservations of EDA from Relationship types:\n\nWhen the subtype was coordinate, there were data in the field named coordination_types.\nWhen the subtype was operate, there were data in the field named operational_roles.\nWhen there is a jurisdiction_type, there might be an authority_level.\nThere are only restricted or special access data within permission_types.\nWhen there is a report_type of data transmission or environmental report, there might be a submission_date.\n\n\n\n\n\nObservations of EDA from Entity types:\n\nThe 5 id under Group sub-types were not very useful information.\n\n\n\n\n\nElimination and directed focus:\n\nRelative to the entire dataset, there were little assessment_type (3%), movement_type (2%), enforcement_type (2%), permission_type (4%), report_type (2%), authority_level (1%). We will direct our focus on other areas instead of these.\nThere were no to little useful data in the fields named: activity_type, references, dates, time, and friendship_type. These were not utilised.\nWe directed our focus on Event_Communication, Event_Monitoring, and Event_VesselMovement."
  },
  {
    "objectID": "Prepatory.html#edges",
    "href": "Prepatory.html#edges",
    "title": "Data Preparation",
    "section": "3.2 Edges",
    "text": "3.2 Edges\nThe code chunk below used ExpCATViz() of SmartEDA package to reveal the frequency distribution of all categorical fields in mc3_edges_raw tibble dataframe.\n\nFrequency Distribution of Categorical FieldsFilter by type == sent\n\n\n\n\nShow the code\nExpCatViz(data=mc3_edges_raw,\n          col=\"navyblue\")\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\nEntities are connected by edges to other Entities via an Event or Relationship node. The one exception to this is the Communication Event subtype, which is additionally linked to either an Event or Relationship node. The type field denotes the connector or edge type for the Entities, Event, and Relationship nodes. The edges are one of these: received, evidence_for, sent, NA.\n\n\n\n\nShow the code\n# Step 1: Filter for type == \"sent\"\nfiltered_edges &lt;- mc3_edges_raw %&gt;%\n  filter(type == \"sent\") %&gt;%\n  count(source) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(source = factor(source, levels = rev(unique(source))))  # descending \n\n# Step 2: Plot\nggplot(filtered_edges, aes(x = source, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    title = \"Distribution of 'sent' Edges type by Source\",\n    x = \"Source\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nWhat we understood from the information provided by Vast Challenge on Directional Edges:\n\nFor relationship as colleagues node or friends node, the node will have arrows/ edges pointing towards the relationship node.\nFor other relationships and events, the direction would be following the source and target."
  },
  {
    "objectID": "Prepatory.html#data-cleaning-and-wrangling",
    "href": "Prepatory.html#data-cleaning-and-wrangling",
    "title": "Data Preparation",
    "section": "4.1 Data Cleaning and Wrangling",
    "text": "4.1 Data Cleaning and Wrangling\n\nCleaning and wrangling nodesUnique Node Count\n\n\n\nconvert values in id field into character data type,\nexclude records with id value are na,\nexclude records with similar id values,\nexclude thing_collected , time , date, friendship_type field, and\nsave the cleaned tibble dataframe into a new tibble datatable called mc3_nodes_cleaned.\n\n\n\nShow the code\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected, -time, -date, -friendship_type)\n\n\n\n\n\n\n# A tibble: 27 × 2\n   column            unique_count\n   &lt;chr&gt;                    &lt;int&gt;\n 1 id                        1159\n 2 timestamp                  612\n 3 content                    581\n 4 label                       92\n 5 name                        73\n 6 findings                    70\n 7 start_date                  69\n 8 coordination_type           53\n 9 operational_role            35\n10 results                     33\n# ℹ 17 more rows"
  },
  {
    "objectID": "Prepatory.html#cleaning-and-wrangling-edges",
    "href": "Prepatory.html#cleaning-and-wrangling-edges",
    "title": "Data Preparation",
    "section": "Cleaning and wrangling edges",
    "text": "Cleaning and wrangling edges\n\nrenamed source and target fields to from_id and to_id respectively,\nconverted values in from_id and to_id fields to character data type,\nexcluded values in from_id and to_id which not found in the id field of mc3_nodes_cleaned,\nexcluded records whereby from_id and/or to_id values are missing, and\nsaved the cleaned tibble dataframe and called it mc3_edges_cleaned.\n\n\n\nShow the code\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Parse to_id to get supertype and sub_type for target nodes (e.g., Event_Communication)\n  separate(to_id, into = c(\"to_id_supertype\", \"to_id_sub_type\", \"to_id_num\"),\n           sep = \"_\", remove = FALSE, fill = \"right\", extra = \"merge\") %&gt;%\n  # Filter to ensure from_id and to_id exist in mc3_nodes_cleaned (prevent orphaned edges)\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nprint(\"Columns in mc3_edges_cleaned after initial cleaning:\")\n\n\n[1] \"Columns in mc3_edges_cleaned after initial cleaning:\"\n\n\nShow the code\nprint(colnames(mc3_edges_cleaned))\n\n\n[1] \"id\"              \"is_inferred\"     \"from_id\"         \"to_id\"          \n[5] \"to_id_supertype\" \"to_id_sub_type\"  \"to_id_num\"       \"type\"           \n\n\nShow the code\nprint(\"Head of mc3_edges_cleaned after initial cleaning:\")\n\n\n[1] \"Head of mc3_edges_cleaned after initial cleaning:\"\n\n\nShow the code\nprint(head(mc3_edges_cleaned))\n\n\n# A tibble: 6 × 8\n  id    is_inferred from_id to_id to_id_supertype to_id_sub_type to_id_num type \n  &lt;chr&gt; &lt;lgl&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;     &lt;chr&gt;\n1 2     TRUE        Sam     Rela… Relationship    Suspicious     217       &lt;NA&gt; \n2 3     FALSE       Sam     Even… Event           Communication  370       sent \n3 5     TRUE        Sam     Even… Event           Assessment     600       &lt;NA&gt; \n4 3013  TRUE        Sam     Rela… Relationship    Colleagues     430       &lt;NA&gt; \n5 &lt;NA&gt;  TRUE        Sam     Rela… Relationship    Friends        272       &lt;NA&gt; \n6 &lt;NA&gt;  TRUE        Sam     Rela… Relationship    Colleagues     215       &lt;NA&gt;"
  },
  {
    "objectID": "Prepatory.html#unique-edges-count",
    "href": "Prepatory.html#unique-edges-count",
    "title": "Data Preparation",
    "section": "Unique Edges Count",
    "text": "Unique Edges Count\n\n\nShow the code\n# Find the number of unique types in each column\nunique_counts &lt;- mc3_edges_cleaned %&gt;%\n  summarise_all(n_distinct) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"column\", values_to = \"unique_count\")\n\n# Print the unique counts for each column\nprint(unique_counts)\n\n\n# A tibble: 8 × 2\n  column          unique_count\n  &lt;chr&gt;                  &lt;int&gt;\n1 id                      3170\n2 is_inferred                2\n3 from_id                 1052\n4 to_id                   1156\n5 to_id_supertype           71\n6 to_id_sub_type            21\n7 to_id_num                860\n8 type                       4"
  },
  {
    "objectID": "Prepatory.html#other-preparatory-work",
    "href": "Prepatory.html#other-preparatory-work",
    "title": "Data Preparation",
    "section": "Other preparatory work",
    "text": "Other preparatory work\nNext, code chunk below will be used to create mapping of character id in mc3_nodes_cleaned to row index\n\n\nShow the code\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\n\nNext, the code chunk below was used to join and convert from_id and to_id to integer indices. At the same time we also dropped rows with unmatched nodes.\n\n\nShow the code\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  # Filter out edges where either source or target node was not found\n  filter(!is.na(from) & !is.na(to)) %&gt;%\n  # Select all columns to carry forward to mc3_edges_final\n  select(from, to, id, is_inferred, type, # Original edge attributes\n         from_id, to_id, to_id_supertype, to_id_sub_type, to_id_num # Original IDs and parsed target type\n         )\n\n\nNext the code chunk below was used to subset nodes to only those referenced by edges.\n\n\nShow the code\nused_node_indices &lt;- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\n\nWe then used the code chunk below to rebuild lookup from old index to new index.\n\n\nShow the code\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(used_node_indices)\n)\n\n\nLastly, the code chunk below was used to update edge indices to match new node table.\n\n\nShow the code\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  # Explicitly select all columns that are needed downstream\n  select(from = from_new, to = to_new,\n         id, is_inferred, type,\n         from_id, to_id, to_id_supertype, to_id_sub_type, to_id_num)\n\n\n:::"
  },
  {
    "objectID": "Prepatory.html#building-the-tidygraph-object",
    "href": "Prepatory.html#building-the-tidygraph-object",
    "title": "Data Preparation",
    "section": "4.2 Building the tidygraph object",
    "text": "4.2 Building the tidygraph object\n\nBuild the object-tbl_graph\n\n\n\n\nShow the code\nmc3_graph &lt;- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)"
  },
  {
    "objectID": "Prepatory.html#examining-the-object",
    "href": "Prepatory.html#examining-the-object",
    "title": "Data Preparation",
    "section": "Examining the object",
    "text": "Examining the object\n\n\nShow the code\nstr(mc3_graph)\n\n\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 28\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 8\n  .. ..$ id             : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  .. ..$ is_inferred    : logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type           : chr [1:3226] NA \"sent\" NA NA ...\n  .. ..$ from_id        : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  .. ..$ to_id          : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  .. ..$ to_id_supertype: chr [1:3226] \"Relationship\" \"Event\" \"Event\" \"Relationship\" ...\n  .. ..$ to_id_sub_type : chr [1:3226] \"Suspicious\" \"Communication\" \"Assessment\" \"Colleagues\" ...\n  .. ..$ to_id_num      : chr [1:3226] \"217\" \"370\" \"600\" \"430\" ...\n $ :&lt;environment: 0x0000025cf18a0b30&gt; \n - attr(*, \"active\")= chr \"nodes\""
  },
  {
    "objectID": "Prepatory.html#visualising-the-knowledge-graph--ggraph",
    "href": "Prepatory.html#visualising-the-knowledge-graph--ggraph",
    "title": "Data Preparation",
    "section": "5.1 Visualising the knowledge graph- ggraph",
    "text": "5.1 Visualising the knowledge graph- ggraph\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\nShow the code\nset.seed(1234)\n\n\nIn the code chunk below, ggraph functions are used to create the whole graph.\n\nThe Graph- ggraphThe Code\n\n\n\n\nWarning: ggrepel: 1106 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\n\n\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`),\n                  size = 2) +\n  geom_node_text(aes(label = type),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nThe entire graph was rather detailed and it was hard to discover useful patterns. In order to gain meaningful visual discovery, we had to look into the details. For instance, we would next plot sub-graphs or interactive graphs."
  },
  {
    "objectID": "Prepatory.html#visualising-the-knowledge-graph--visnetwork",
    "href": "Prepatory.html#visualising-the-knowledge-graph--visnetwork",
    "title": "Data Preparation",
    "section": "5.2 Visualising the knowledge graph- VisNetwork",
    "text": "5.2 Visualising the knowledge graph- VisNetwork\nVisNetwork provides the user to understand relationships through interactivity. For instance:\n\nThe individual nodes can be selected from the drop-down menu to view its connected nodes and edges.\nThe hover tooltip provides additional details from fields such as content, coordination_type, findings, destination, operational_role, results, and jurisdiction_type based on the related id information from mc3_nodes_final."
  },
  {
    "objectID": "Prepatory.html#the-graph--visnetwork",
    "href": "Prepatory.html#the-graph--visnetwork",
    "title": "Data Preparation",
    "section": "The Graph- VisNetwork",
    "text": "The Graph- VisNetwork\n\n\n\n\n\n\n\n\n:::\n\n\nShow the code\n# ---- 1. Define styles and legends ----\n\nevent_subtypes &lt;- c(\n  \"Communication\", \"Monitoring\", \"VesselMovement\", \"Assessment\",\n  \"Collaborate\", \"Endorsement\", \"TourActivity\", \"TransponderPing\",\n  \"Harbor Report\", \"Fishing\", \"Criticize\"\n)\n\nrelationship_subtypes &lt;- c(\n  \"Coordinates\", \"AccessPermission\", \"Operates\", \"Colleagues\",\n  \"Suspicious\", \"Reports\", \"Jurisdiction\", \"Unfriendly\", \"Friends\"\n)\n\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",         # type level\n  \"Relationship\" = \"#AF8DC3\"   # type level\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",              # type level\n  \"Relationship\" = \"square x\"    # type level\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n# ---- 2. Prepare nodes ----\nnodes &lt;- mc3_nodes_final %&gt;%\n  mutate(\n    label = ifelse(is.na(name), id, name),\n    \n    # These parts are for pulling the related data from other fields\n    tooltip_extra = case_when(\n      type == \"Event\" & sub_type == \"Communication\" ~ content,\n      type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n      type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n      type == \"Event\" & sub_type == \"Assessment\" ~ results,\n      type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n      type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n      type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n      TRUE ~ NA_character_\n    ),\n    \n    title = paste0(\n      \"&lt;b&gt;\", label, \"&lt;/b&gt;&lt;br&gt;\",\n      \"Type: \", type, \"&lt;br&gt;\",\n      \"Sub-type: \", sub_type, \"&lt;br&gt;\",\n      ifelse(!is.na(tooltip_extra), paste0(\"&lt;br&gt;&lt;b&gt;Details:&lt;/b&gt; \", tooltip_extra), \"\")\n    ),\n    \n    # Fallback logic: if sub_type is NA or not in styling list, use type instead\n    group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)\n  ) %&gt;%\n  select(id, label, group, title) %&gt;%\n  distinct()\n\n# ---- 3. Prepare directed edges (type == \"sent\") ----\n\nedges &lt;- mc3_edges_final %&gt;%\n  filter(from_id %in% nodes$id & to_id %in% nodes$id) %&gt;%\n  select(from = from_id, to = to_id)\n\n# ---- 4. Build visNetwork ----\n\nnet &lt;- visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visNodes(font = list(\n    size = 14,\n    color = STYLES$node_label_dark,\n    face = STYLES$font_family,\n    vadjust = -15\n  ))\n\n# ---- 5. Apply shape and color per group ----\n\nfor (group_name in names(node_legend_colors_plot)) {\n  net &lt;- net %&gt;% visGroups(\n    groupname = group_name,\n    color = node_legend_colors_plot[[group_name]],\n    shape = node_legend_shapes_plot[[group_name]]\n  )\n}\n# ---- 6. Add legend ----\n\nused_groups &lt;- unique(nodes$group)\n\nlegend_df &lt;- tibble::tibble(\n  label = used_groups,\n  shape = node_legend_shapes_plot[used_groups],\n  color = node_legend_colors_plot[used_groups]\n) %&gt;%\n  distinct(label, .keep_all = TRUE)  # remove duplicates just in case\n\nnet &lt;- net %&gt;% visLegend(\n  addNodes = legend_df,\n  ncol = 2,                         # number of columns\n  position = \"left\",              \n  main = \"Entity (Sub)Types\",      # title\n  useGroups = FALSE                # show custom legend entries\n)\n# ---- 7. Render ----\nnet"
  },
  {
    "objectID": "Prepatory.html#cleaning-edges",
    "href": "Prepatory.html#cleaning-edges",
    "title": "Data Preparation",
    "section": "6.2.1 Cleaning Edges",
    "text": "6.2.1 Cleaning Edges\n\n\nShow the code\n# Split the 'from_id' column\nmc3_edges_cleaned &lt;- mc3_edges_cleaned %&gt;%\n  separate(from_id, into = c(\"from_id_supertype\", \"from_id_sub_type\", \"from_id_id\"), sep = \"_\", remove = FALSE, extra = \"drop\")\n\n\nWarning: Expected 3 pieces. Missing pieces filled with `NA` in 1152 rows [1, 2, 3, 4, 5,\n6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\nShow the code\n# Split the 'target' column into \nmc3_edges_cleaned &lt;- mc3_edges_cleaned %&gt;%\n  separate(to_id, into = c(\"to_id_supertype\", \"to_id_sub_type\",\"to_id_id\"), sep = \"_\", remove = FALSE, extra = \"drop\")\n\n\nWarning: Expected 3 pieces. Missing pieces filled with `NA` in 1038 rows [1153, 1154,\n1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,\n1168, 1169, 1170, 1171, 1172, ...].\n\n\nShow the code\n# Find the number of unique types in each column\nunique_counts &lt;- mc3_edges_cleaned %&gt;%\n  summarise_all(n_distinct) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"column\", values_to = \"unique_count\")\n\n# Print the unique counts for each column\nprint(unique_counts)\n\n\n# A tibble: 12 × 2\n   column            unique_count\n   &lt;chr&gt;                    &lt;int&gt;\n 1 id                        3170\n 2 is_inferred                  2\n 3 from_id                   1052\n 4 from_id_supertype           48\n 5 from_id_sub_type            20\n 6 from_id_id                 822\n 7 to_id                     1156\n 8 to_id_supertype             71\n 9 to_id_sub_type              21\n10 to_id_id                   860\n11 to_id_num                  860\n12 type                         4"
  },
  {
    "objectID": "Prototype.html#interactive-chord-diagram",
    "href": "Prototype.html#interactive-chord-diagram",
    "title": "🦫 Prototype",
    "section": "Interactive Chord Diagram",
    "text": "Interactive Chord Diagram"
  },
  {
    "objectID": "Prototype.html#interactive-chord-diagram-1",
    "href": "Prototype.html#interactive-chord-diagram-1",
    "title": "🦫 Prototype",
    "section": "Interactive Chord diagram",
    "text": "Interactive Chord diagram"
  },
  {
    "objectID": "Prototype.html#chord-diagram",
    "href": "Prototype.html#chord-diagram",
    "title": "🦫 Prototype",
    "section": "Chord diagram",
    "text": "Chord diagram\n\n\n&lt;div&gt;\n  &lt;body&gt;\n    &lt;div class=\"chord-title\"&gt;Interactive Communication Flows Over Time&lt;/div&gt;\n    &lt;div id=\"slider-container\"&gt;\n      &lt;input type=\"range\" min=\"0\" max=\"39\" value=\"0\" id=\"frameSlider\" oninput=\"updateFrame(parseInt(this.value))\"/&gt;\n      &lt;p id=\"current-time-display\" style=\"font-weight:bold; margin-top: 10px;\"&gt;&lt;/p&gt;\n      &lt;p&gt;Use the slider to view communication over time&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div id=\"chord-images-container\"&gt;\n      &lt;img src=\"chord_frames/frame_001.png\" style=\"display:block;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 01 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_002.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 01 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_003.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 01 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_004.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 02 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_005.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 02 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_006.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 02 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_007.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 03 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_008.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 03 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_009.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 04 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_010.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 04 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_011.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 04 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_012.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 05 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_013.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 05 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_014.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 05 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_015.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 06 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_016.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 06 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_017.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 06 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_018.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 07 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_019.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 07 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_020.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 07 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_021.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 08 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_022.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 08 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_023.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 09 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_024.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 09 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_025.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 09 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_026.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 10 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_027.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 10 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_028.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 10 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_029.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 10 Oct 2040 14:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_030.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 11 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_031.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 11 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_032.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 12 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_033.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 12 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_034.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 12 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_035.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 13 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_036.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 13 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_037.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 13 Oct 2040 12:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_038.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 14 Oct 2040 08:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_039.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 14 Oct 2040 10:00\"/&gt;\n      &lt;img src=\"chord_frames/frame_040.png\" style=\"display:none;\" class=\"chord-frame\" alt=\"Chord diagram for time slice 14 Oct 2040 12:00\"/&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/div&gt;"
  },
  {
    "objectID": "Prototype.html",
    "href": "Prototype.html",
    "title": "Prototype",
    "section": "",
    "text": "We worked like a beaver to come up with our prototype to emulate a water tight product like the 🦫 beaver’s dam. Here in this prototype section we will go through the preparatory work, visualisation design, tested r codes, and parameters and outputs. A Shiny prototype was also created subsequent to this. Shiny was used due to the many advantages such as automatic resizing. Click here for the Shiny prototype.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#packages-supported-in-r-cran",
    "href": "Prototype.html#packages-supported-in-r-cran",
    "title": "Prototype",
    "section": "Packages supported in R CRAN:",
    "text": "Packages supported in R CRAN:\n\n\n\nUtility Tools\nGraphing Tools\n\n\n\n\n\njsonlite - To parse JSON\ntidyverse - Data science tools\nggtext - Tools for text formatting\nknitr - For better table displays\nlubridate - For processing date and time\nhms - For durations\nscales - For breaks and labels\ntidytext - For functions text mining\ntm - For text mining\nSnowBallC - For Porter’s word stemming\nSmartEDA - EDA with some graphing\nreactable - For interactive data tables\nhighcharter- For wrapper function\nconflicted - For managing namespace conflicts\n\n\npatchwork - For combining ggplot plots\nggraph - For plotting network data\ntidygraph - For graph manipulations\nigraph - Contains functions for network analysis\nggiraph - Interactive plots\nplotly - Interactive plots\nwordcloud- For frequency representation of words\nggh4x - For axis, strip, and facet customizations\nvisNetwork - For interactive visualisation of networks.\nRColorBrewer - Colour schemes for graphics\ncirclize - For circular plots\nggalluvial - For alluvial diagrams\nnetworkD3- For D3-based interactive network graphs\nleaflet- For interactive maps\n\n\n\n\n\nWe will use the code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. Though it is not added here in pacman due to conflicts, networkD3, highcharter, leaflet, conflicted will also be added on Shiny.\n\n\n\nShow the code\npacman::p_load(jsonlite, tidyverse, ggtext,   \n               knitr, lubridate, hms, scales,   \n               tidytext, tm, SnowballC,   \n               patchwork, ggraph,    \n               tidygraph, igraph, ggiraph,    \n               SmartEDA, plotly, wordcloud,    \n               ggh4x, visNetwork, RColorBrewer, \n               circlize, ggalluvial, reactable)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#part-of-tidyverse",
    "href": "Prototype.html#part-of-tidyverse",
    "title": "Prototype",
    "section": "🧰 Part of Tidyverse",
    "text": "🧰 Part of Tidyverse\n\n\nstringr - For wrapping text and string manipulation\nreadr - For reading rectangular data (CSV, TSV, etc)\ndplyr - For transforming, filtering, summarising data\nggplot2 - For building data visualisation",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#nodes-via-shiny",
    "href": "Prototype.html#nodes-via-shiny",
    "title": "Prototype",
    "section": "2.1 Nodes via Shiny",
    "text": "2.1 Nodes via Shiny\n\nNodesDrilling into Node sub_typeEntity subtypesEvent subtypesRelationship subtypes\n\n\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\n\n\nShow the code\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Run ExpCatViz once at the top to avoid recomputing\nExpCatViz(data=mc3_nodes_raw,\n          col=\"navyblue\")\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below uses ggplot2 functions to reveal the frequency distribution of sub_type field of mc3_nodes_raw.\n\n\nShow the code\n# Step 1: Count and reorder\nmc3_nodes_ordered &lt;- mc3_nodes_raw %&gt;%\n  count(sub_type) %&gt;%\n  arrange((n)) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot with navy bars, sorted, and horizontal\nggplot(mc3_nodes_ordered, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(x = \"Sub_type\", y = \"Count\",\n    title = \"Distribution of Subtypes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Entity subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Entity\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Entity\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Entity Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Entity Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Event subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Event\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Event\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Event Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Event Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the relationship subtypes are filtered.\n\n\nShow the code\n# Step 1: Filter for type == \"Relationship\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Relationship\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Relationship Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Relationship Subtypes\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#visnetwork",
    "href": "Prototype.html#visnetwork",
    "title": "Prototype",
    "section": "VisNetwork",
    "text": "VisNetwork\nVisNetwork provides the user to understand relationships through interactivity. For instance:\n\nThe individual nodes can be selected from the drop-down menu to view its connected nodes and edges.\nThe hover tooltip provides additional details from fields such as content, coordination_type, findings, destination, operational_role, results, and jurisdiction_type based on the related id information from mc3_nodes_final.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#workarounds",
    "href": "Prototype.html#workarounds",
    "title": "Prototype",
    "section": "🔄Workarounds:",
    "text": "🔄Workarounds:\nThese are some workarounds required for Shiny application:\n\n\nmagick - For graphics and image processing will be replaced by renderImage() + impageOutput()\nWe will use renderWordcloud2() (from the wordcloud2 package) and wordcloud2Output() in our UI.",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#entities--interactive-sankey-diagrams",
    "href": "Prototype.html#entities--interactive-sankey-diagrams",
    "title": "Prototype",
    "section": "Entities- Interactive Sankey Diagrams",
    "text": "Entities- Interactive Sankey Diagrams\nCreated Sankey Diagram. Click to see details for individual identities.\nReal Identity from analysis -&gt; Observed Name from data -&gt; Community\n\n\nShow the code\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(ggalluvial)\nlibrary(dplyr)\n\n# Example name_mapping\nname_mapping &lt;- tibble::tibble(\n  observed_name = c(\"Boss\", \"Mrs. Money\", \"The Middleman\", \"Remora\", \"Small Fry\", \"Nadia Conti\"),\n  real_identity = c(\"Nadia\", \"Nadia\", \"Liam Thorne\", \"Remora\", \"Neptune\", \"Nadia\"),\n  community = c(\"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Intermediaries\", \"Conservationists\", \"Research Vessels\", \"V. Miesel Shipping\")\n)\n\n# Build alluvial dataset\nalluvial_data &lt;- name_mapping %&gt;%\n  filter(!is.na(real_identity) & !is.na(community)) %&gt;%\n  count(real_identity, observed_name, community, name = \"value\")\n\n# UI\nui &lt;- fluidPage(\n  titlePanel(\"Identity Flow Viewer\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"person\", \"Select a Real Identity:\", choices = c(\"All\", unique(alluvial_data$real_identity)))\n    ),\n    mainPanel(\n      plotOutput(\"alluvialPlot\", height = \"600px\")\n    )\n  )\n)\n\n# Server\nserver &lt;- function(input, output, session) {\n\n  filtered_data &lt;- reactive({\n    if (input$person == \"All\") {\n      alluvial_data\n    } else {\n      filter(alluvial_data, real_identity == input$person)\n    }\n  })\n\n  output$alluvialPlot &lt;- renderPlot({\n    ggplot(filtered_data(),\n           aes(axis1 = real_identity, axis2 = observed_name, axis3 = community, y = value)) +\n      geom_alluvium(aes(fill = real_identity), width = 1/12, alpha = 0.8) +\n      geom_stratum(width = 1/12, fill = \"grey90\", color = \"black\") +\n      geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), size = 3.5, hjust = 0) +\n      scale_x_discrete(\n        limits = c(\"Real Identity\", \"Observed Name\", \"Community\"),\n        expand = c(.05, .05)\n      ) +\n      labs(\n        title = if (input$person == \"All\") \"All Identity Flows\" else paste(input$person, \"'s Identity Flow\"),\n        x = NULL, y = \"Link Count\"\n      ) +\n      theme_minimal() +\n      theme(\n        panel.grid = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank()\n      )\n  })\n}\n\n# Run the app\nshinyApp(ui, server)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Prototype.html#loading-packages-to-prepare-for-shiny",
    "href": "Prototype.html#loading-packages-to-prepare-for-shiny",
    "title": "Prototype",
    "section": "1.1 Loading Packages to prepare for SHINY",
    "text": "1.1 Loading Packages to prepare for SHINY",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "r_packg.html#workarounds",
    "href": "r_packg.html#workarounds",
    "title": "🚢 R Packages",
    "section": "🔄Workarounds:",
    "text": "🔄Workarounds:\nThese are some workarounds required for Shiny application:\n\n\nmagick - For graphics and image processing will be replaced by renderImage() + impageOutput()\nWe will use renderWordcloud2() (from the wordcloud2 package) and wordcloud2Output() in our UI.",
    "crumbs": [
      "Required R Packages"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#parameters-and-outputs",
    "href": "Storyboard_UI_Design.html#parameters-and-outputs",
    "title": "📓 Storyboard UI Design",
    "section": "Parameters and Outputs:",
    "text": "Parameters and Outputs:\n\nInputsOutputs\n\n\nThe Shiny app will include some of these parts.\n\nKnowledge graph\nAs the entire network is very large, containing 1,159 nodes and 3,226 edges, it is not suitable to visualize the entire network. Hence, we will plot with subgraphs and other visualisations.\n\n\nReference Node\nFor Nadia’s ego network, we require a reference node (Nadia).\n\n\nNetwork depth\nIn relation to the reference node, this serves to narrow down the network to view. The depth dictates how far from the reference node to network. As Nadia’s networks are at distance 1 or distance 2, we will add an option to toggle whether to render the full network or use the option to render by distance to the reference node.\n\n\n\n\nPlot area\nShows the network or visual plot. It will be interactive to enable closer inspection of network or visual elements.\n\n\n\n\nThese are some prototypes of the webpage and shiny application that we are planning to build for the project. We would like to get to the bottom of the activities brewing at Oceanus such as the Nemo Reef Operation. Hence, enhancing the whole user experience as they follow us along on uncovering the story.\nThe users can select inputs such as:\n\nTimeseries sliders\nClickable components\nHovers\nDrop down menus\n\nThe application will output:\n\nDetails of communication flows of characters of certain time period\nNames of characters that are related to each other of certain time period",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#website-look--netlify",
    "href": "Storyboard_UI_Design.html#website-look--netlify",
    "title": "📓 Storyboard UI Design",
    "section": "Website Look -Netlify",
    "text": "Website Look -Netlify\nThis would be the prototype of the layout structure with navbar at the top, and sidebar layout at the right side. Codes will be provided as well in panel-tabsets which will support interactivity for Quarto + Shiny visualisations.",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#shiny-dashboard-for-networks-and-visualisations",
    "href": "Storyboard_UI_Design.html#shiny-dashboard-for-networks-and-visualisations",
    "title": "📓 Storyboard UI Design",
    "section": "Shiny Dashboard for Networks and Visualisations",
    "text": "Shiny Dashboard for Networks and Visualisations\nPrinciples of usability and interactivity:\nOur shiny compatible visualisations will have timeseries or related interactive shiny compatible subnetworks or visualisations. These may include hovers or other clickable components.\n\nThe ui.R script controls the layout and appearance of a shiny app.\n\nui&lt;- fluidPage() which creates a display to adjust to dimensions\ntitlePanel and sidebarLayout to add to fluidPage. We will create a basic Shiny application with a sidebar.\n\nThe server.R script contains the instructions to build the Shiny app.\n\nserver&lt;- function(input, output) {}\nWe will be using selectInput(), sliderInput(), plotOutput(), etc to assist in the visualisations and interactivity.\n\nshinyApp(ui=ui, server=server)",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#visualisation",
    "href": "Storyboard_UI_Design.html#visualisation",
    "title": "📓 Storyboard UI Design",
    "section": "Visualisation:",
    "text": "Visualisation:\n\nWe added shapes and colours to distinguish the Entity nodes (square, circle, triangle, diamond, short oval), relationship node (long oval), and Event-Communication nodes (star).\nWe kept the colours distinct from each other and as minimal as possible to be easy on the eyes.\nFaceting was used to create subplots for clarity and differentiation.\nGraph titles, subtitles and legends components were used for graphs.\nInteractivity were used to segment and also as a means to reel the user in.",
    "crumbs": [
      "Storyboard UI Design"
    ]
  },
  {
    "objectID": "Prototype.html#references",
    "href": "Prototype.html#references",
    "title": "Prototype",
    "section": "11) References",
    "text": "11) References\n\nDatastorm (2021) visNetwork\nDr. Kam Tin Seong (2025) Lesson 9: Visualising and Analysis Network Data\nR-Graph (2025) Reactable"
  },
  {
    "objectID": "shiny_under_construction.html",
    "href": "shiny_under_construction.html",
    "title": "Shiny Prototype - Coming Soon",
    "section": "",
    "text": "🚧 Our interactive Shiny dashboard is still under construction. Stay tuned!",
    "crumbs": [
      "Prototype translated to Shiny"
    ]
  },
  {
    "objectID": "r_packg.html#settle-conflict-issues",
    "href": "r_packg.html#settle-conflict-issues",
    "title": "🚢 R Packages",
    "section": "🆚Settle Conflict Issues:",
    "text": "🆚Settle Conflict Issues:\n\n\nconflicts_prefer(shinydashboard::box)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(dplyr::lag)\nconflicts_prefer(networkD3::JS)",
    "crumbs": [
      "Required R Packages"
    ]
  },
  {
    "objectID": "Prototype.html#settle-conflict-issues",
    "href": "Prototype.html#settle-conflict-issues",
    "title": "Prototype",
    "section": "🆚Settle Conflict Issues:",
    "text": "🆚Settle Conflict Issues:\n\n\nconflicts_prefer(shinydashboard::box)\nconflicts_prefer(dplyr::filter)\nconflicts_prefer(dplyr::lag)\nconflicts_prefer(networkD3::JS)",
    "crumbs": [
      "Prototype in Netlify"
    ]
  },
  {
    "objectID": "Storyboard_UI_Design.html#prototypes",
    "href": "Storyboard_UI_Design.html#prototypes",
    "title": "📓 Storyboard UI Design",
    "section": "Prototypes:",
    "text": "Prototypes:\n\n\n\n\n….",
    "crumbs": [
      "Storyboard UI Design"
    ]
  }
]