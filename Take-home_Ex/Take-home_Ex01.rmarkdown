---
title: "Take-home_Exercise 1"
subtitle: "Demographic structures and distribution of Singapore in 2024"
author: "Audrey Tan"
date: "01 May 2025"
date-modified: "last-modified"
format: html

editor: visual
execute: 
  eval: true
  echo: true
  warning: false 
  freeze: true
---

::: centre
![](/Aero_Media.png){fig-align="center"}
:::

::: centre
#### Singapore

## **Demographic structures and distribution of Singapore in 2024**

#### *(by Gender and Region)*
:::

# 1. Overview

## 1.1 Background

## 1.2 The Data

## 1.3 The Task

# 2. Loading Libraries and Packages

The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.

```{r}
library(rmarkdown)
```

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse, readr, ggdist, 
               ggridges, colorspace, knitr, 
               forcats, reshape2, png, grid,
               dplyr, magrittr, RColorBrewer, magick) 
```

+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| Library               | Purpose                                                                                                                                      |
+=======================+==============================================================================================================================================+
| tidyverse             | -   Include dpylr for data manipulation with “mutate”, “group_by”, “summarize”, etc.                                                         |
|                       |                                                                                                                                              |
|                       | -   Include ggplot2 for visualisation through histogram, boxplots, etc.                                                                      |
|                       |                                                                                                                                              |
|                       | -   Include forcats for factoring and ordering of variables                                                                                  |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| ggdist                | For visualizing distributions and uncertainty. It provides tools like stat_halfeye(), stat_pointinterval(), etc., for making raincloud plots |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| ggridges              | For creating density plots for visualisation of continuous distribution                                                                      |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| ggrepel               | For repelling overlapping text labels in plot                                                                                                |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| ggthemes & hrbrthemes | For customisation of plot appearance                                                                                                         |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| patchwork             | For combination and alignment of multiple plots for each visualisation                                                                       |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| knitr                 | For elegant, flexible and fast report generation of underlying dataframes                                                                    |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| forcats               | For working with categorical variables                                                                                                       |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| reshape2              | For restructuring data between "wide" and "long" formats.                                                                                    |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| png                   | For reading and writing Portable Network Graphics (PNG) image files in R                                                                     |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| grid                  | For powerful and flexible low-level graphics system in R                                                                                     |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| dplyr                 | For data manipulation.                                                                                                                       |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| magrittr              | For introducing the pipe operator `%>%` into R.                                                                                              |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| RColorBrewer          | For creating colour palettes                                                                                                                 |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
| magick                | For image processing to read, edit, compose, and convert images easily.                                                                      |
+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------+

# 3. Importing Data

```{r}
sg_demo_2024 <- read_csv("respopagesex2024.csv",show_col_types = FALSE)
```

# 4. Data Understanding

## 4.1 Viewing Data Rows and Columns using glimpse

```{r}
glimpse(sg_demo_2024)
```

-   The data contains data on Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024.
-   The dataframe has 6 columns and 60,424 rows. Four of the columns contains categorical data type and the other two are in double/real number data type.
    -   The categorical attributes are: PA, SZ, Age and Sex
    -   The numerical attributes are: Pop, and Time.

## 4.2 Data Dictionary for Variables

+--------------------+----------------+-----------+--------------------------------------------------------+
| Category           | Column Headers | Type      | Description                                            |
+====================+================+===========+========================================================+
| Planning Area      | PA             | CHAR      | 55 area names                                          |
+--------------------+----------------+-----------+--------------------------------------------------------+
| Subzone            | SZ             | CHAR      | 332 area names                                         |
+--------------------+----------------+-----------+--------------------------------------------------------+
| Single Year of Age | Age            | NUM       | 0 to 90_and_over (in increments of 1)                  |
+--------------------+----------------+-----------+--------------------------------------------------------+
| Sex                | Sex            | CHAR      | Males; Females                                         |
+--------------------+----------------+-----------+--------------------------------------------------------+
| Resident Count     | Pop            | NUM       | 0 to 1180 (in multiples of 10, with occasional breaks) |
+--------------------+----------------+-----------+--------------------------------------------------------+
| Time/Period        | Time           | NUM       | 2024                                                   |
+--------------------+----------------+-----------+--------------------------------------------------------+

::: callout-note
## Note.

1.  For June 2024, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority's Master Plan 2019.
2.  Data from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.
3.  The figures have been rounded to the nearest 10.
4.  The data may not add up due to rounding.
5.  Data generated on 24/9/2024.
:::

### Categorical values

```{r}
# Understanding the unique data values in each column that is categorical.

get_unique_val <- function(df){lapply(df, unique)}
sg_demo_2024_cat <- sg_demo_2024[,c("PA", "SZ", "Age", "Sex")]
unique_val <- get_unique_val(sg_demo_2024_cat)
uni_val_df <- data.frame(
  Values = sapply(unique_val, paste, collapse = ", ")
)

kable(uni_val_df, caption = "Unique Categories in Dataset", row.names = NA, label = NULL)
```

### Statistics of Numerical values
Notice that Age is not a numerical value but a categorical value.
```{r}
# Understanding the distribution of numerical values 
realis_num <- sg_demo_2024[,c("Pop", "Time")]

#realis_num <- realis_num %>% 
  #rename("Year" = "Time") %>%
  
kable(summary(realis_num))
```

## 4.3 Flowchart of data and graphs

```{mermaid}
%%| echo: true
flowchart TD
    id1[(sg_demo_2024)]-->|Filter|D(Sex)
    id1[(sg_demo_2024)]-->F(Planning_Area)
    
    F(Planning_Area) --> G(Sub_Zone)
    F -->|Mutate| id2{{Region Type - CR, ER, NR, NER, WR}}
    G -->|Mutate| id2{{Region Type - CR, ER, NR, NER, WR}}
    id2 -->|Within| D(Sex)

    D(Sex)--> |Filter| B((Age))
    B((Age)) -->|Within| C((Pop))

    C((Pop))--> |Graph Type|A[[Population Pyramid]]
    C((Pop))-->|Graph Type|J[[Scatterplot + Marginal Histogram- Females]] 
    C((Pop))-->|Graph Type|K[[Scatterplot + Marginal Histogram-Males]] 

```

# 5 Data Pre-processing
There are 4 major tasks in data pre-processing:
Data cleaning
Data Integration
Data Reduction
Data Transformation

## 5.1 Data Cleaning
Verifying Data Quality through checking for missing values and duplicates. 
### 5.1.1 Missing Values
```{r}
sg_demo_2024[missing(sg_demo_2024),]
```
### 5.1.2 Duplicates
```{r}
sg_demo_2024[duplicated(sg_demo_2024),]
```
There were no missing values and duplicates.

## 5.2 Data Transformation

### 5.2.1 Data Label Encoding: Changing age from categorical to numerical value
```{r}
sg_demo_2024 <- sg_demo_2024 %>%
  mutate(Age_numerical_temp = ifelse(Age == "90_and_Over", "90", Age)) %>%
  mutate(Age_numerical = as.numeric(Age_numerical_temp)) %>%
  select(-Age_numerical_temp) # remove the temporary column
```

### 5.2.2 Discretization: Creation of new Region_Type
The discretization method splits the continuous data into intervals which reduces the data size. 
bAs there are 55 planning area (PA) and 332 subzone (SZ), referencing “Wikipedia, the PA or SZ can be grouped into 5 regions:

-   Central Region (CR)

-   East Region (ER)

-   North Region (NR)

-   North East Region (NER)

-   West Region (WR)

Hence, a new column of Region_type was created to reflect the 5 segmented regions using PA.

```{r}
# Encoding regions
sg_demo_2024 <- sg_demo_2024 %>% 
  mutate(Region_type = case_when(
    `PA` %in% c("Bishan", "Bukit Merah", "Bukit Timah", "Downtown Core", "Geylang",
                "Kallang","Marina East","Marina South", "Marine Parade", "Museum",
                "Newton", "Novena", "Orchard","Outram","Queenstown","River Valley",
                "Rochor","Singapore River","Southern Islands", "Straits View",
                "Tanglin","Toa Payoh") ~ "CR",
    `PA` %in% c("Bedok","Changi","Changi Bay","Pasir Ris","Paya Lebar","Tampines") ~ "ER",
    `PA` %in% c("Central Water Catchment","Lim Chu Kang","Mandai",
                "Sembawang", "Simpang", "Sungei Kadut","Woodlands","Yishun") ~ "NR",
    `PA` %in% c("Ang Mo Kio","Hougang", "North-Eastern Islands", "Punggol", 
                "Seletar", "Sengkang", "Serangoon") ~ "NER",
    `PA` %in% c("Boon Lay", "Bukit Batok", "Bukit Panjang", "Choa Chu Kang",
                "Clementi", "Jurong East", "Jurong West", "Pioneer", "Tengah",
                "Tuas", "Western Islands","Western Water Catchment") ~ "WR"
  ))
```

These are the summarised data.

```{r}
pa_mapping<- sg_demo_2024 %>%
  group_by(`Region_type`) %>%
  summarize(Planning_Area = paste(unique(`PA`), collapse = ", "))

kable(pa_mapping, title = "Mapping of Planning Area to Region ")
```

### 5.2.3 Discretization: Creation of new Age_Type

The ages were binned into age_type based on Singapore's Department of Statistics classification.

```{r}
# Encoding ages
sg_demo_2024 <- sg_demo_2024 %>% 
  mutate(Age_type = case_when(
    Age %in% as.character(0:4) ~ "0 - 4",
    Age %in% as.character(5:9) ~ "5 - 9",
    Age %in% as.character(10:14) ~ "10 - 14",
    Age %in% as.character(15:19) ~ "15 - 19",
    Age %in% as.character(20:24) ~ "20 - 24",
    Age %in% as.character(25:29) ~ "25 - 29",
    Age %in% as.character(30:34) ~ "30 - 34",
    Age %in% as.character(35:39) ~ "35 - 39",
    Age %in% as.character(40:44) ~ "40 - 44",
    Age %in% as.character(45:49) ~ "45 - 49",
    Age %in% as.character(50:54) ~ "50 - 54",
    Age %in% as.character(55:59) ~ "55 - 59",
    Age %in% as.character(60:64) ~ "60 - 64",
    Age %in% as.character(65:69) ~ "65 - 69",
    Age %in% as.character(70:74) ~ "70 - 74",
    Age %in% as.character(75:79) ~ "75 - 79",
    Age %in% as.character(80:84) ~ "80 - 84",
    Age %in% as.character(85:89) ~ "85 - 89",
    Age == "90_and_Over" ~ "90 & Over",
    TRUE ~ NA_character_
  ))
```

## 5.3 Preview pre-processed dataframe

```{r} 
glimpse(sg_demo_2024)
```
-   The dataframe has 9 columns and 60,424 rows. Six of the columns contains categorical data type and the other three are in double/real number data type.
-   The categorical attributes are: Region_type, Age_type, PA, SZ, Age and Sex
-   The numerical attributes are: Age_numerical, Pop, and Time.

# 7. Univariate Analysis

### Visualising Distribution

```{r}
ggplot(sg_demo_2024, 
       aes(x = Age_numerical, 
           y = Region_type)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "Age",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

```{r}
ggplot(sg_demo_2024,
       aes(x = Age_numerical, 
           y = Region_type, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

# 8. Exploratory Data Analysis

## 8.1 Population Pyramid
```{r}
# Create a basic bar chart for one gender
basic_plot <-  ggplot(sg_demo_2024, 
                      aes(x = Age_type, 
                          y= ifelse(Sex=='Males', -Pop, Pop), 
                          fill = Sex)) + 
  geom_bar(stat = "identity") 
print(basic_plot) 
```


```{r}
# Create population pyramids for both genders and combine them
population_pyramid <- basic_plot +
  coord_flip() +
  theme_minimal() +
  labs(
    x = "Age_type",
    y = "Pop",  
    fill = "Sex",  
    title = "Population Pyramid")  +
    scale_y_continuous(labels = function(y) format(y, scientific = FALSE)) +
  geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 0.5)# Males and Females separation
    
print(population_pyramid) #  Display the plot

```
### Splitting by regions
```{r}
# Order the data by Region_type within each Age and Gender group. 
sg_demo_2024_reshaped <- sg_demo_2024 %>%
  arrange(Sex, Age_type, Region_type)
```

```{r}
# Create a basic bar chart for one gender
basic_plot <-  ggplot(sg_demo_2024_reshaped, 
                      aes(x = Age_type, 
                          y= ifelse(Sex=='Males', -Pop, Pop), 
                          fill = Region_type)) + 
geom_bar(stat = "identity") 
print(basic_plot) 
```
```{r}
# Create population pyramids for both genders and combine them
population_pyramid <- basic_plot +
  coord_flip() +
  theme_minimal() +
  scale_fill_brewer(palette = "Set2") +
  labs(
    x = "Age_type",
    y = "Pop",  
    fill = "Region",  
    title = "Population Pyramid")  +
    scale_y_continuous(labels = function(y) format(y, scientific = FALSE)) +
  geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 0.5) + # Males and Females separation
  annotate(geom = "label",x = 18, y = -100000,
           label = "Men", fill = "navyblue",
           color = "white",label.size = 0)
print(population_pyramid) #  Display the plot
```

### old
```{r}
# Order the data by Region_type within each Age and Gender group. 
sg_demo_2024_reshaped <- sg_demo_2024 %>%
  arrange(Sex)

# Create a basic bar chart for one gender
population_pyramid_plot  <-  ggplot(sg_demo_2024_reshaped, 
                      aes(x = Age_type, 
                          y= ifelse(Sex=='Males', -Pop, Pop), 
                          fill = Sex)) + # colour by region_type
  geom_bar(stat = "identity", 
           width = 2) + #  Bars represent population; stacking
  coord_flip() +             #  Horizontal bars
  labs(
    title = "Population Pyramid by Age, Gender, and Region",
    x = "Age",
    y = "Population",
    fill = "Sex and Region"   # Legend title
  ) +
  scale_y_continuous(labels = function(y) format(y, scientific = FALSE)) +
  theme_minimal()+         
  scale_fill_brewer(palette = "Set3") +
  geom_hline(yintercept = 0, color = "blue", linetype = "dashed", size = 0.5) # Males and Females separation

print(population_pyramid_plot)
```

## 8.2 Raincloud Plot

### 8.2.1 Plotting Half Eye Graph

First, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.

This produces a Half Eye visualization, which is contains a half-density and a slab-interval.

```{r}
ggplot(sg_demo_2024, 
       aes(x = Age_numerical, 
           y = Region_type)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)

# Factor for consistent group order
#simdat$group <- factor(simdat$group, levels = c("CR", "ER", "NR","NER","WR"))
```

```{r, echo=FALSE}
# Define custom flat violin geom without ggname()
GeomFlatViolin <- ggproto("GeomFlatViolin", Geom,
  setup_data = function(data, params) {
    data$width <- data$width %||%
      params$width %||% (resolution(data$x, FALSE) * 0.9)

    data %>%
      group_by(x) %>%
      mutate(
        ymin = min(y),
        ymax = max(y),
        xmin = x,
        xmax = x + violinwidth * width
      )
  },

  draw_group = function(data, panel_scales, coord) {
    data <- transform(data,
                      xminv = x,
                      xmaxv = x + violinwidth * (xmax - x))

    newdata <- rbind(
      arrange(transform(data, x = xmaxv), y),
      arrange(transform(data, x = xminv), -y)
    )

    newdata <- rbind(newdata, newdata[1, ])

    # No need for ggname(), directly use GeomPolygon$draw_panel
    GeomPolygon$draw_panel(newdata, panel_scales, coord)
  },

  draw_key = draw_key_polygon,

  default_aes = aes(
    weight = 1, colour = "black", fill = "white", size = 0.5,
    alpha = NA, linetype = "solid"
  ),

  required_aes = c("x", "y")
)

# Wrapper function for geom_flat_violin
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
                             position = "dodge", trim = TRUE, scale = "area",
                             show.legend = NA, inherit.aes = TRUE, ...) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomFlatViolin,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(trim = trim, scale = scale, ...)
  )
}

```

```{r}
ggplot(sg_demo_2024, 
       aes(y = Age_numerical, 
           x = Region_type)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```

### 8.1.2 **Adding the boxplot with `geom_boxplot()`**

Next, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.

```{r}
ggplot(sg_demo_2024, 
       aes(x = Region_type, 
           y = Age_numerical)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)
```

### 8.1.3 **Adding the Dot Plots with `stat_dots()`**

Next, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.

```{r}
ggplot(sg_demo_2024,
       aes(x = Region_type,
           y = Age_numerical)) +
  # Boxplot
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  # Dots (using geom_jitter for spreading)
  geom_jitter(aes(x = as.numeric(Region_type) - 0.25 + runif(length(Age_numerical), -0.15, 0.15)),
              width = 0.2, # Control the amount of horizontal jitter
              height = 0,  # No vertical jitter
              alpha = 0.6, # Add some transparency if there's still overlap
              size = 1.5) + # Adjust dot size if needed
  # Half-eye 
  stat_halfeye(adjust = 0.5,
               justification = -0.5, # Adjust as needed 
               .width = 0.2,         # Adjust width
               alpha = 0.7,          # Add some transparency
               point_colour = NA,
               fill = "skyblue") + # Add a fill color 
  coord_cartesian(clip = "off") + # Important for half-eye if it extends beyond the box
  coord_flip() +
  theme_economist()+
  labs(title = "Age Distribution by Region Type",
       x = "Region Type",
       y = "Age (Numerical)")
```


## 8.2 Scatterplot + Marginal Histogram

# 9. Summary

# 10. References and inspiration
-    David Keyes (2024) [**How to make polished population pyramids in ggplot: part 1**](https://rfortherestofus.com/2024/07/population-pyramid-part-1)

-   Michal Palenik (2024) [**Deomographic Pyramid by Economic Activity Austria 2023**](https://www.iz.sk/en/projects/eu-regions/AT).

-   Singstat (2024) \[**Population Trends**\] (https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). :::::

