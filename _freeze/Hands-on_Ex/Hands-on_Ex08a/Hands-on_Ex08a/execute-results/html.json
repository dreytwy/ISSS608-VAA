{
  "hash": "59fb72fd653d550dd4456c01d5af5ac9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: '8a. Choropleth Mapping with R'\nauthor: \"Audrey Tan\"\ndate: \"13 June 2025\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\neditor: visual  \n---\n\n## 8.1 Overview\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nIn this chapter, wewill learn how to plot functional and truthful choropleth maps by using an R package called [**tmap**](https://r-tmap.github.io/tmap/) package.\n\n::: callout-tip\nIt is advisable for us to read the functional description of each function before using them.\n:::\n\n## 8.2 Getting Started\n\nIn this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n\nAmong the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n::: callout-note\nNotice that, we only need to install **tidyverse** instead of **readr**, **tidyr** and **dplyr** individually.\n:::\n\n## 8.3 Importing Data into R\n\n### The Data\n\nTwo data set will be used to create the choropleth map. They are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\n### Importing Geospatial Data into R\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\dreytwy\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nYou can examine the content of `mpsz` by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n### Importing Attribute Data into R\n\nNext, we will import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n\n### Data Preparation\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n-   AGED: age group 65 and above,\n-   TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package, and\n-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n#### Joining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nThing to learn from the code chunk above:\n\n-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n## 8.4 Choropleth Mapping Geospatial Data Using *tmap*\n\nTwo approaches can be used to prepare thematic map using *tmap*, they are:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n-   Plotting highly customisable thematic map by using tmap elements.\n\n### Plotting a choropleth map quickly by using *qtm()*\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThings to learn from the code chunk above:\n\n-   *tmap_mode()* with \"plot\" option is used to produce a static map. For interactive mode, \"view\" option should be used.\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n\n### Creating a choropleth map by using *tmap*'s elements\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**'s drawing elements should be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n#### Drawing a base map\n\nThe basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### Drawing a choropleth map using *tm_polygons()*\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThings to learn from *tm_polygons()*:\n\n-   The default interval binning used to draw the choropleth map is called \"pretty\". A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\n-   By default, Missing value will be shaded in grey.\n\n#### Drawing a choropleth map using *tm_fill()* and \\*tm_border()\\*\\*\n\nActually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using *tm_fill()* alone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\") +\n  tm_borders(lwd = 0.01,  \n             fill_alpha = 0.1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNotice that light-gray border lines have been added on the choropleth map.\n\nThe *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nBeside *alpha* argument, there are three other arguments for *tm_borders()*, they are:\n\n-   *col* = border colour,\n-   *lwd* = border line width. The default is 1, and\n-   *lty* = border line type. The default is \"solid\".\n\n### Data classification methods of **tmap**\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.\n\n#### Plotting choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, *equal* data classification method is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"equal\",\n        n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n> **Warning: Maps Lie!**\n\n> DIY 1: Using what we have learnt, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n> DIY 2: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n#### DIY 1 (10 different classification methods)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set tmap mode\ntmap_mode(\"plot\")\n\n# Classification styles\nstyles <- c(\"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \n            \"kmeans\", \"hclust\", \"bclust\", \"fisher\", \"jenks\")\n\n# Define breaks for 'fixed'\nfixed_breaks <- c(0, 20, 40, 60, 80, 100)\n\n# Create map list\nmaps <- lapply(styles, function(style) {\n  scale_obj <- if (style == \"fixed\") {\n    tm_scale_intervals(breaks = fixed_breaks)\n  } else {\n    tm_scale_intervals(style = style, n = 5)\n  }\n\n  tm_shape(mpsz_pop2020) +\n    tm_polygons(\n      fill = \"DEPENDENCY\",\n      fill.scale = scale_obj,\n      fill.legend = tm_legend(title = style)\n    ) +\n    tm_borders(fill_alpha = 0.5) +\n    tm_title(paste(\"Style:\", style), size = 0.8)\n})\n\n# Show 2 maps per round (5 rounds total)\nfor (i in seq(1, length(maps), by = 2)) {\n  print(tmap_arrange(maps[i:(i + 1)], ncol = 2))  # add print()\n}\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-17-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-17-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-17-5.png){width=672}\n:::\n:::\n\n\n#### Observations- DIY 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reactable)\n\n# Create the data frame\nstyle_table <- data.frame(\n  Style = c(\"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \n            \"kmeans\", \"hclust\", \"bclust\", \"fisher\", \"jenks\"),\n  Description = c(\n    \"Use manually defined class boundaries (breaks)\",\n    \"Standard deviation method\",\n    \"Equal-width intervals (min-max range split evenly)\",\n    '\"Nice\" rounded breaks (like pretty() in base R)',\n    \"Same number of observations per class (percentile bins)\",\n    \"k-means clustering on values\",\n    \"Hierarchical clustering on values\",\n    \"Model-based clustering (Bayesian)\",\n    \"Fisher-Jenks natural breaks (minimizes within-class variance)\",\n    \"Jenks natural breaks (same idea as Fisher, implemented differently)\"\n  ),\n  Best_Use_Case = c(\n    \"When you have domain-specific thresholds (e.g., income bands)\",\n    \"Good for normally distributed data; highlights values away from the mean\",\n    \"Good for uniformly distributed data\",\n    \"Readable breaks for presentation\",\n    \"Good for skewed data or when emphasizing rank/percentiles\",\n    \"Good when you want data-driven class discovery\",\n    \"Highlights group structure based on similarity\",\n    \"Statistically robust clustering (slow, can fail on poor data)\",\n    \"Best for choropleth maps with natural groupings\",\n    \"Most commonly used for thematic mapping\"\n  ),\n  Observation = c(\n    \"Fills lightbue 0-20; consistent across datasets\",\n    \"Highlights extreme values\",\n    \"Highlighted mostly 0.11-3.89, one region 15.22-19.00. Works well if data is evenly distributed\",\n    \"Good readability; useful in reports\",\n    \"Visually balanced from highlights, but may hide outliers\",\n    \"Results vary due to algorithm randomness\",\n    \"Sensitive to data structure; may produce odd groups\",\n    \"May fail if data is too uniform or sparse\",\n    \"Groups look natural; well-suited for spatial patterns\",\n    \"Similar to Fisher, slightly smoother boundaries\"\n  )\n)\n\n# Render reactable with thinner Style column and 5 rows per page\nreactable(style_table,\n  searchable = TRUE,\n  defaultPageSize = 5,\n  columns = list(\n    Style = colDef(\n      name = \"Style\",\n      width = 80,  # Thinner column\n      style = list(textAlign = \"center\")\n    ),\n    Description = colDef(\n      name = \"Description\",\n      style = list(whiteSpace = \"normal\")\n    ),\n    Best_Use_Case = colDef(\n      name = \"Best Use Case\",\n      style = list(whiteSpace = \"normal\")\n    )\n  ),\n  bordered = TRUE,\n  highlight = TRUE,\n  striped = TRUE,\n  theme = reactableTheme(\n    headerStyle = list(background = \"#f7f7f8\", fontWeight = \"bold\")\n  )\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-245d73f523b10b75352d\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-245d73f523b10b75352d\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Style\":[\"fixed\",\"sd\",\"equal\",\"pretty\",\"quantile\",\"kmeans\",\"hclust\",\"bclust\",\"fisher\",\"jenks\"],\"Description\":[\"Use manually defined class boundaries (breaks)\",\"Standard deviation method\",\"Equal-width intervals (min-max range split evenly)\",\"\\\"Nice\\\" rounded breaks (like pretty() in base R)\",\"Same number of observations per class (percentile bins)\",\"k-means clustering on values\",\"Hierarchical clustering on values\",\"Model-based clustering (Bayesian)\",\"Fisher-Jenks natural breaks (minimizes within-class variance)\",\"Jenks natural breaks (same idea as Fisher, implemented differently)\"],\"Best_Use_Case\":[\"When you have domain-specific thresholds (e.g., income bands)\",\"Good for normally distributed data; highlights values away from the mean\",\"Good for uniformly distributed data\",\"Readable breaks for presentation\",\"Good for skewed data or when emphasizing rank/percentiles\",\"Good when you want data-driven class discovery\",\"Highlights group structure based on similarity\",\"Statistically robust clustering (slow, can fail on poor data)\",\"Best for choropleth maps with natural groupings\",\"Most commonly used for thematic mapping\"],\"Observation\":[\"Fills lightbue 0-20; consistent across datasets\",\"Highlights extreme values\",\"Highlighted mostly 0.11-3.89, one region 15.22-19.00. Works well if data is evenly distributed\",\"Good readability; useful in reports\",\"Visually balanced from highlights, but may hide outliers\",\"Results vary due to algorithm randomness\",\"Sensitive to data structure; may produce odd groups\",\"May fail if data is too uniform or sparse\",\"Groups look natural; well-suited for spatial patterns\",\"Similar to Fisher, slightly smoother boundaries\"]},\"columns\":[{\"id\":\"Style\",\"name\":\"Style\",\"type\":\"character\",\"width\":80,\"style\":{\"textAlign\":\"center\"}},{\"id\":\"Description\",\"name\":\"Description\",\"type\":\"character\",\"style\":{\"whiteSpace\":\"normal\"}},{\"id\":\"Best_Use_Case\",\"name\":\"Best Use Case\",\"type\":\"character\",\"style\":{\"whiteSpace\":\"normal\"}},{\"id\":\"Observation\",\"name\":\"Observation\",\"type\":\"character\"}],\"searchable\":true,\"defaultPageSize\":5,\"highlight\":true,\"bordered\":true,\"striped\":true,\"theme\":{\"headerStyle\":{\"background\":\"#f7f7f8\",\"fontWeight\":\"bold\"}},\"dataKey\":\"c0b0df8d0a916106236ac21b7b19b9ae\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n#### DIY 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set tmap to plotting mode\ntmap_mode(\"plot\")\n\n# Fixed classification method and class counts\nmethod <- \"pretty\"\nclass_counts <- c(2, 6, 10, 20)\n\n# Generate maps\nmaps <- lapply(class_counts, function(n) {\n  tm_shape(mpsz_pop2020) +\n    tm_polygons(\n      fill = \"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(style = method, n = n),\n      fill.legend = tm_legend(title = paste(method, \"-\", n, \"classes\"))\n    ) +\n    tm_borders(fill_alpha = 0.5) +\n    tm_title(paste(\"Pretty classification -\", n, \"classes\"), size = 1)\n})\n\n# Show 2 maps at a time\nfor (i in seq(1, length(maps), by = 2)) {\n  end_idx <- min(i + 1, length(maps))  # safely handle last map\n  print(tmap_arrange(maps[i:end_idx], ncol = 2))\n}\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\n#### Observations- DIY 2 (Four different class counts)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the reactable package\nlibrary(reactable)\n\n# Create a data frame for class counts and observations\nobservations_df <- data.frame(\n  class_count = c(2, 6, 10, 20),\n  observation = c(\n    \"filled mostly by 0-10 with one region at 10-20\",\n    \"filled mostly by 0-5, with one region at 15-20\",\n    \"mostly filled by missing or 0-2, with one region at 18-20\",\n    \"mostly filled by missing or 0-1, with one region 1-2 and another region 18-19\"\n  )\n)\n\n# Render the reactable table with specified styling\nreactable(\n  observations_df,\n  searchable = FALSE,\n  defaultPageSize = 4,\n  bordered = TRUE,\n  striped = TRUE,\n  columns = list(\n    class_count = colDef(\n      name = \"Class Count\",\n      width = 90,  # Thinner column\n      style = list(whiteSpace = \"normal\")\n    ),\n    observation = colDef(\n      name = \"Observations\",\n      style = list(whiteSpace = \"normal\")\n    )\n  ),\n  theme = reactableTheme(\n    headerStyle = list(background = \"#f7f7f8\", fontWeight = \"bold\")\n  )\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-23c10c75f8d8ff894579\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-23c10c75f8d8ff894579\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"class_count\":[2,6,10,20],\"observation\":[\"filled mostly by 0-10 with one region at 10-20\",\"filled mostly by 0-5, with one region at 15-20\",\"mostly filled by missing or 0-2, with one region at 18-20\",\"mostly filled by missing or 0-1, with one region 1-2 and another region 18-19\"]},\"columns\":[{\"id\":\"class_count\",\"name\":\"Class Count\",\"type\":\"numeric\",\"width\":90,\"style\":{\"whiteSpace\":\"normal\"}},{\"id\":\"observation\",\"name\":\"Observations\",\"type\":\"character\",\"style\":{\"whiteSpace\":\"normal\"}}],\"defaultPageSize\":4,\"bordered\":true,\"striped\":true,\"theme\":{\"headerStyle\":{\"background\":\"#f7f7f8\",\"fontWeight\":\"bold\"}},\"dataKey\":\"8c45348e48e2e87d0beee8b8a21b453b\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nThe more class counts there are, the more detailed or refined the highlighting conditions will be.\n\n#### Plotting choropleth map with custome break\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7867  0.8585  0.8763 19.0000      92 \n```\n\n\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### Colour Scheme\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### Using ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nNotice that the choropleth map is shaded in green.\n\nTo reverse the colour shading, add a \"-\" prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"quantile\",\n        n = 5,\n        values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nNotice that the colour scheme has been reversed.\n\n### Map Layouts\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n#### Map Legend\n\nIn **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\",\n      fill.scale = tm_scale_intervals(\n        style = \"jenks\",\n        n = 5,\n        values = \"brewer.greens\"),\n      fill.legend = tm_legend(\n        title = \"Dependency ratio\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Map Style\n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.\n\nThe code chunk below shows the *classic* style being used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")+\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below shows the *cobalt* style being used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"cobalt\")+\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below shows the *albatross* style being used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"albatross\")+\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below shows the *white* style being used. It has a neutral look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\n    fill = \"DEPENDENCY\",\n    fill.scale = tm_scale_intervals(style = \"pretty\", values = \"brewer.set2\"),\n    fill.legend = tm_legend(title = \"Dependency Ratio\")\n  ) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_layout(\n    bg.color = \"lightblue\",\n    inner.bg.color = \"lightblue\",\n    inner.margins = c(0.1, 0.1, 0.1, 0.1)\n  ) +\n  tmap_style(\"white\") + \n  tm_compass(position = c(\"left\", \"top\"), size = 2) +\n  tm_scalebar(position = c(\"right\", \"bottom\"), text.size = 0.6) +\n  tm_credits(\"Designer: AT\", position = c(\"right\", \"bottom\"), size = 0.6) +\n  tm_title(\"Distribution of Dependency Ratio by Planning Subzone\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below shows the *watercolor* style being used. It has an artistic painted look\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\n    fill = \"DEPENDENCY\",\n    fill.scale = tm_scale_intervals(style = \"pretty\", \n                                    values = \"brewer.pastel2\"),\n    fill.legend = tm_legend(title = \"Dependency Ratio\")\n  ) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_layout(\n    bg.color = \"lightblue\",\n    inner.bg.color = \"lightblue\",\n    inner.margins = c(0.1, 0.1, 0.1, 0.1)\n  ) +\n  tmap_style(\"watercolor\") + # soft painted base\n  tm_compass(position = c(\"left\", \"top\"), size = 2) +\n  tm_scalebar(position = c(\"right\", \"bottom\"), text.size = 0.6) +\n  tm_credits(\"Designer: AT\", position = c(\"right\", \"bottom\"), size = 0.6) +\n  tm_title(\"Distribution of Dependency Ratio by Planning Subzone\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n#### Cartographic Furniture\n\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\n\nIn the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"beaver\")\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE,\n    legend.outside = TRUE,\n    legend.outside.position = \"right\",\n    inner.margins = c(0.25, 0.05, 0.25, 0.05))+\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2, position=c(\"left\", \"top\")) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nTo reset the default style, refer to the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n### Drawing Small Multiple Choropleth Maps\n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments,\n-   by defining a group-by variable in *tm_facets()*, and\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n#### By assigning multiple values to at least one of the aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Set2\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    legend.outside = TRUE,\n    legend.outside.position = \"bottom\"\n  ) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(\n    legend.outside = TRUE,\n    legend.outside.position = \"bottom\"\n  ) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n#### By defining a group-by variable in *tm_facets()*\n\nIn this example, multiple small choropleth maps are created by using **tm_facets()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Set2\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n#### By creating multiple stand-alone maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Set2\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"set2\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n### Mappping Spatial Object Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, we can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Set2\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex08a_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n## 8.5 Reference\n\n### All about **tmap** package\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### Geospatial data wrangling\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### Data wrangling\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n",
    "supporting": [
      "Hands-on_Ex08a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-2.0.0/react-tools.js\"></script>\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}