{
  "hash": "ec2a4f18f8e721921b67c41e2bc592df",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"6. Visualising and Analysing Time-oriented Data\"\nauthor: \"Audrey Tan\"\ndate: \"19 May 2025\"\ndate-modified: \"last-modified\"\n\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false \n  freeze: true\n---\n\n## 6.1 Learning Outcome\n\nBy the end of this hands-on exercise we will be able create the followings data visualisation by using R packages:\n\n-   plotting a calender heatmap by using ggplot2 functions,\n\n-   plotting a cycle plot by using ggplot2 function,\n\n-   plotting a slopegraph\n\n-   plotting a horizon chart\n\n## 6.2 Getting Started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse,\n               magick)\n```\n:::\n\n\n## 6.3 Plotting Calendar Heatmap\n\nIn this section, we plot a calender heatmap programmatically by using ggplot2 package.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-2-1.png){width=756}\n:::\n:::\n\n\nSection Outcome:\n\n-   plot a calender heatmap by using ggplot2 functions and extension,\n-   to write function using R programming,\n-   to derive specific date and time related field by using base R and lubridate packages\n-   to perform data preparation task by using tidyr and dplyr packages.\n\n### 6.3.1 The Data\n\nFor the purpose of this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n### 6.3.2 Importing the data\n\nFirst, the code chunk below is used to import *eventlog.csv* file into R environment and called the data frame as *attacks*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n### 6.3.3 Examining the data structure\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\n\nFor example, *kable()* can be used to review the structure of the imported data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n-   *tz* field stores time zone of the source IP address.\n\n### 6.3.4 Data Preparation\n\nStep 1: Deriving *weekday* and *hour of day* fields\n\nBefore we can plot the calender heatmap, two new fields namely *wkday* and *hour* need to be derived. In this step, we will write a function to perform the task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n```\n:::\n\n\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n\nStep 2: Deriving the attacks tibble data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\nBeside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they'll be ordered when plotting\n\nTable below shows the tidy tibble table after processing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n### 6.3.5 Building the Calendar Heatmaps\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n``` r\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n:::\n\n::: callout-tip\n# Things to learn from the code chunk\n\n-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.\n-   a new field called *n* is derived by using `group_by()` and `count()` functions.\n-   `na.omit()` is used to exclude missing value.\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk.\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there's no need to further preprocess the data.\n\n### 6.3.6 Building Multiple Calendar Heatmaps\n\n**Challenge:** Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-10-1.png){width=756}\n:::\n:::\n\n\n### 6.3.7 Plotting Multiple Calendar Heatmaps\n\nStep 1: Deriving attack by country object\n\nIn order to identify the top 4 countries with the highest number of attacks, we perform the followings:\n\n-   count the number of attacks by country,\n-   calculate the percent of attackes by country, and\n-   save the results in a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(   \n  attacks, source_country) %>%   \n  mutate(percent = percent(n/sum(n))) %>%   \n  arrange(desc(n))\n```\n:::\n\n\nStep 2: Preparing the tidy data frame\n\nIn this step, we extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n### 6.3.8 Plotting Multiple Calendar Heatmaps\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-13-1.png){width=1152}\n:::\n:::\n\n\n## The Code\n\n``` r\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n:::\n\n## 6.4 Plotting Cycle Plot\n\nIn this section, we plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-14-1.png){width=1620}\n:::\n:::\n\n\n### Step 1: Data Import\n\nFor the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.\n\nThe code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n### Step 2: Deriving month and year fields\n\nNext, two new fields called *month* and *year* are derived from *Month-Year* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n### Step 3: Extracting the target country\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n### Step 4: Computing year average arrivals by month\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n### Step 5: Plotting the cycle plot\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n``` r\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")+\n  theme_gray()+\n  theme(axis.text.x = element_text(angle = 90, size=6))\n```\n:::\n\n## 6.5 Plotting Slopegraph\n\nIn this section we will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment.\n\n### Step 1: Data Import\n\nImport the rice data set into R environment by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n### Step 2: Plotting the slopegraph\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n``` r\n#| fig-height: 6 \nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",                \n                Caption = \"Prepared by: AT\")\n```\n:::\n\n::: callout-tip\n# Thing to learn from the code chunk above\n\nFor effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.\n:::\n\n## 6.6 Self-sourced dataset: Sandhill Cranes\n\nSandhill cranes are a long-lived bird species found in North America. This dataset includes locations of 5 cranes during a single autumn migration from their breeding areas in northeastern Asia and south through Alaska, central Canada, and the Great Plains. The migration ends in northern Texas and northern Mexico.\n\n### 6.6.1 Import Data and View\n\n::: panel-tabset\n## Import Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrane <- read_csv(\"data/sacr_locations.csv\")\n```\n:::\n\n\n## View Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(crane))\n```\n\n::: {.cell-output-display}\n\n\n|  Crane|Time           |         X|        Y|\n|------:|:--------------|---------:|--------:|\n| 100840|9/1/2013 0:59  | -2663.988| 3273.347|\n| 100840|9/1/2013 12:56 | -2665.651| 3273.454|\n| 100840|9/1/2013 18:54 | -2666.122| 3271.090|\n| 100840|9/2/2013 6:50  | -2663.497| 3270.656|\n| 100840|9/2/2013 12:50 | -2665.664| 3271.351|\n| 100840|9/3/2013 0:48  | -2663.884| 3272.595|\n\n\n:::\n:::\n\n:::\n\n-   Coordinate data are not as Geographic coordinates. They are in a projected coordinate system (World Azimuthal Equidistance), with units in kilometers. The X and Y values represent distances from the central point of that projection at Longitude -110 and Latitude 51.\n\n    *Projected data from latitude and longitude (WGS84) to current projection.*\n\n### 6.6.2 Data Preparation\n\n::: panel-tabset\n## Time classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Data Preparation ---\ncrane_data <- crane %>%\n    mutate(\n        Time = strptime(Time, format = \"%d/%m/%Y %H:%M\", tz = \"UTC\"),\n        Time = as.POSIXct(Time, origin = \"1970-01-01\", tz = \"UTC\")  # Explicit origin\n    )\n\n# --- Time Class Verification ---\ncat(\"Time column class: \", class(crane_data$Time), \"\\n\") # More readable output\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime column class:  POSIXct POSIXt \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(crane_data$Time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2013-01-09 00:59:00 UTC\" \"2013-01-09 12:56:00 UTC\"\n[3] \"2013-01-09 18:54:00 UTC\" \"2013-02-09 06:50:00 UTC\"\n[5] \"2013-02-09 12:50:00 UTC\" \"2013-03-09 00:48:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(crane_data$Time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Min.               1st Qu.                Median \n\"2013-01-09 00:59:00\" \"2013-03-10 19:00:00\" \"2013-06-10 14:13:00\" \n                 Mean               3rd Qu.                  Max. \n\"2013-06-17 11:40:34\" \"2013-09-10 02:50:45\" \"2013-12-10 22:49:00\" \n                 NA's \n                \"276\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# --- Check for NA values after conversion ---\ncat(\"Number of NA values in Time: \", sum(is.na(crane_data$Time)), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNumber of NA values in Time:  276 \n```\n\n\n:::\n\n```{.r .cell-code}\nif (any(is.na(crane_data$Time))) {\n    crane_data <- crane_data %>% filter(!is.na(Time)) # Remove rows\n    warning(\"Removed rows with NA Time values.\")\n}\n```\n:::\n\n\n## Filtering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get x and y range\nx_range <- range(crane_data$X, na.rm = TRUE)  # na.rm = TRUE handles potential missing values\ny_range <- range(crane_data$Y, na.rm = TRUE)\n\n# Extract the day (9th or 10th) and month_year\ncrane_data <- crane_data %>%\n    mutate(\n        Day = day(Time),\n        Month_Year = floor_date(Time, \"month\"), # For grouping\n        Month_Label = format(floor_date(Time, \"month\"), \"%b\")  # Abbreviated month name\n    )\n\n# --- Inspect Month_Label ---\nprint(\"First 10 rows of crane_data:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"First 10 rows of crane_data:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(crane_data, 10))  # Show the first 10 rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n    Crane Time                     X     Y   Day Month_Year          Month_Label\n    <dbl> <dttm>               <dbl> <dbl> <int> <dttm>              <chr>      \n 1 100840 2013-01-09 00:59:00 -2664. 3273.     9 2013-01-01 00:00:00 Jan        \n 2 100840 2013-01-09 12:56:00 -2666. 3273.     9 2013-01-01 00:00:00 Jan        \n 3 100840 2013-01-09 18:54:00 -2666. 3271.     9 2013-01-01 00:00:00 Jan        \n 4 100840 2013-02-09 06:50:00 -2663. 3271.     9 2013-02-01 00:00:00 Feb        \n 5 100840 2013-02-09 12:50:00 -2666. 3271.     9 2013-02-01 00:00:00 Feb        \n 6 100840 2013-03-09 00:48:00 -2664. 3273.     9 2013-03-01 00:00:00 Mar        \n 7 100840 2013-03-09 06:44:00 -2663. 3271.     9 2013-03-01 00:00:00 Mar        \n 8 100840 2013-03-09 12:45:00 -2661. 3272.     9 2013-03-01 00:00:00 Mar        \n 9 100840 2013-04-09 00:40:00 -2663. 3268.     9 2013-04-01 00:00:00 Apr        \n10 100840 2013-04-09 06:38:00 -2663. 3270.     9 2013-04-01 00:00:00 Apr        \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"\\nUnique values in Month_Label:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\\nUnique values in Month_Label:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(unique(crane_data$Month_Label)) # Show all unique month labels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Jan\"  \"Feb\"  \"Mar\"  \"Apr\"  \"May\"  \"Jun\"  \"Jul\"  \"Aug\"  \"Sept\" \"Oct\" \n[11] \"Nov\"  \"Dec\" \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"\\nClass of Month_Label:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"\\nClass of Month_Label:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(class(crane_data$Month_Label)) # Show the class (should be character)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n:::\n\n### 6.6.3 Crane Sightings at Area, Overtime interactively\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-26-1.gif)\n:::\n:::\n\n\n## The Code\n\n``` r\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(gganimate)\nlibrary(RColorBrewer)\n# Ensure Crane is a factor\ncrane_data <- crane_data %>%\n  mutate(Crane = as.factor(Crane))\n\n# Create a sequence for manual transition\ncrane_data <- crane_data %>%\n  mutate(\n    Month_Year = floor_date(Time, \"month\"),\n    Month_Label = format(floor_date(Time, \"month\"), \"%b\"),\n    frame_order = as.integer(Time) # Use the numeric representation of Time\n  ) %>%\n  arrange(Time) # Ensure the data is sorted chronologically\n\n# Get unique cranes and number of cranes for color mapping\nunique_cranes <- unique(crane_data$Crane)\nnum_cranes <- length(unique_cranes)\nmy_colors <- brewer.pal(n = max(3, num_cranes), name = \"Set1\")\n\n# Basic Time-Series Animation\nanimation <- ggplot(crane_data, aes(x = X, y = Y, color = Crane, group = Crane)) +\n  geom_point(size = 5) +\n  geom_path(alpha = 0.3) +\n  transition_manual(frame_order, cumulative = FALSE) +\nlabs(title = \"Crane Movement in 2013\\n Month: {format(lubridate::as_datetime(as.numeric(current_frame), origin='1970-01-01', tz='UTC'), '%b')} Day: {format(lubridate::as_datetime(as.numeric(current_frame), origin='1970-01-01', tz='UTC'), '%d')}\",\n     x = \"X Coordinate\",\n     y = \"Y Coordinate\") +\ntheme(\n    legend.position = \"bottom\",\n    plot.margin = unit(c(1, 1, 1, 1), \"cm\") # top, right, bottom, left margins\n  ) +\n  scale_color_manual(values = setNames(my_colors[1:num_cranes], unique_cranes))\n\n# View\nanimate(animation, duration = 100, fps = 5, renderer = gifski_renderer())\n```\n:::\n\n-   Sightings on the 9th are at around the Y coordinates of 2000 to 3000 and X coordinates of -2000 to -2500. Sightings on 10th are at the coordinates close to 0 for both X and Y.\n\n### 6.6.4 Heatmap of sightings by Month and Day\n\n#### By Month\n\n::: panel-tabset\n## The Plot-By Month\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## The Code-By Month\n\n``` r\n# Prepare data\ncrane_heatmap_data_monthly <- crane_data %>%\n  mutate(\n    Month_Label = format(Time, \"%b\") # Extract month label\n  ) %>%\n  group_by(Crane, Month_Label) %>%\n  summarise(Sighting_Count = n(), .groups = 'drop')\n\n# order of months on the y-axis\nmonth_order <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# Ensure Month_Label is a factor with the desired order\ncrane_heatmap_data_monthly <- crane_heatmap_data_monthly %>%\n  mutate(Month_Label = factor(Month_Label, levels = month_order))\n\n# plot\nggplot(crane_heatmap_data_monthly,\n       aes(x = Crane,\n           y = Month_Label,\n           fill = Sighting_Count)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  scale_fill_gradient(name = \"Sighting Count\", low = \"lightgrey\", high = \"navyblue\") +\n  coord_equal() +\n  labs(title = \"Monthly Crane Sightings\",\n       x = \"Crane\",\n       y = \"Month\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks = element_blank() # Remove axis ticks for cleaner look\n  )\n```\n:::\n\n#### Drilling Down by Day\n\n::: panel-tabset\n## The Plot- By Day\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## The Code- By Day\n\n``` r\n# Prepare data\ncrane_heatmap_data_monthly <- crane_data %>%\n  mutate(\n    Month_Label = format(Time, \"%b\") # Extract month label\n  ) %>%\n  group_by(Crane, Month_Label, Day) %>%\n  summarise(Sighting_Count = n(), .groups = 'drop')\n\n# order of months on the y-axis\nmonth_order <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# Ensure Month_Label is a factor with the desired order\ncrane_heatmap_data_monthly <- crane_heatmap_data_monthly %>%\n  mutate(Month_Label = factor(Month_Label, levels = month_order))\n\n# plot\nggplot(crane_heatmap_data_monthly,\n       aes(x = Crane,\n           y = Month_Label,\n           fill = Sighting_Count)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  scale_fill_gradient(name = \"Sighting Count\", low = \"lightgrey\", high = \"navyblue\") +\n  coord_equal() +\n  labs(title = \"Monthly Crane Sightings for 9th and 10th of the Month\",\n       x = \"Crane\",\n       y = \"Month\") +\n    facet_wrap(~Day, ncol = 2) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks = element_blank() # Remove axis ticks for cleaner look\n  )\n```\n:::\n\n-   Heatmaps allows side-by-side comparison of multiple datasets for 9th and 10th of each month, facilitating the identification of similarities, differences, and relationships between variables.\n\n-   We are able to identify that almost all cranes were sighted on the 10th of each month. Exception for Crane 100845 that was not sighted on 10th Jan and 10th Feb.\n\n-   Less cranes were sighted on 9th of the month at that specific X and Y coordinate area, especially from Nov to Dec 2013.\n\n### 6.6.5 Slope Graphs\n\n-   **Two Time Points:** We will be comparing crane counts on two specific days (the 9th and 10th) of each month. The slope graph will assist to illustrate the changes in crane sightings.\n\n#### 6.6.5.1 Data Prepration\n\n:::panel-tabset\n## The Code\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate the data to count unique cranes per month per day\ncrane_counts_9_10 <- crane_data %>%\n  filter(day(Time) %in% c(9, 10)) %>%\n  mutate(Day = as.factor(day(Time))) %>%\n  group_by(Crane, Month_Label, Day) %>%\n  summarise(Count = n(), .groups = 'drop')\ncrane_counts_9_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 106 × 4\n   Crane  Month_Label Day   Count\n   <fct>  <chr>       <fct> <int>\n 1 100840 Apr         9         4\n 2 100840 Apr         10        4\n 3 100840 Aug         9         4\n 4 100840 Aug         10        4\n 5 100840 Dec         10        3\n 6 100840 Feb         9         2\n 7 100840 Feb         10        4\n 8 100840 Jan         9         3\n 9 100840 Jan         10        4\n10 100840 Jul         9         3\n# ℹ 96 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# order of months on the y-axis\nmonth_order <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# Ensure Month_Label is a factor with the desired order\ncrane_counts_9_10 <- crane_counts_9_10 %>%\n  mutate(Month_Label = factor(Month_Label, levels = month_order))\n```\n:::\n\n\n:::\n\n#### 6.6.5.2 Slopegraph for sightings- GGPLOT\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n``` r\n# plot\nggplot(crane_counts_9_10, aes(x = Day, y = Count, color = Crane)) +\n  geom_point(size = 1) +\n  geom_line(aes(group = Crane), linewidth = 0.5) + # Group for the line within each facet\n  facet_wrap(~ Month_Label, nrow = NULL) +\n  labs(\n    title =\"Slopegraph of Crane Sightings in 2013\",\n    subtitle= \"9th and 10th of Each Month\",\n    x = \"Day of Month\",\n    y = \"Count\"\n  ) +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n**Activity throughout the year:**\n\n-   Crane 100853 (Blue) was rather active around the two areas throughout the year during those two days.\n\n**Activity for certain periods:**\n\n-   Less crane sightings for both two days by November and December 2013.\n\n-   Only Crane 100853 (Blue) was sighted on 9th December.\n\n#### 6.6.5.3 Slopegraph for sightings- newggslopegraph\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n``` r\n# Prepare\ncrane_counts_slope <- crane_data %>%\n  filter(day(Time) %in% c(9, 10)) %>%\n  mutate(Day = as.factor(day(Time))) %>% # Convert Day to factor for newggslopegraph\n  group_by(Crane, Day) %>%           # Group by Crane and Day\n  summarise(Count = n(), .groups = 'drop') # Sum the counts for each Crane on each Day\n\n# Create the slopegraph using newggslopegraph\n#| fig-height: 6 \ncrane_counts_slope %>% \n  mutate(Day = factor(Day)) %>%\n  filter(Day %in% c(9, 10)) %>%\n  newggslopegraph(Day, Count, Crane,\n                Title = \"Crane Sightings for Different Days\",\n                SubTitle = \"9th and 10th of Month\",             \n                Caption = \"Prepared by: AT\")\n```\n:::\n\n-   Overall, crane 100853 (Blue) was the most active while 100854 (Green) was the least active in those two areas on those two days of the month.\n\n-   Overall more sightings for cranes at X and Y coordinates of close to 0 as the location for sightings on the 10th is around that area. Exception for crane 100853 which has a slight drop of 1 sighting between two areas.\n\n### 6.6.6 Cycle Plot\n\nHere, we study the sightings:\n\n-   6 hour periods for each crane\n\n-   Monthly sightings for each crane\n\n-   Total crane sightings by month and 6 hour periods\n\n-   Sightings by month and 6 hour periods for each crane\n\n::: panel-tabset\n## 6 hour period sightings per crane\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create a 6-hour period variable\ncrane_sightings_6hr <- crane_data %>%\n  mutate(\n    Six_Hour_Period = case_when(\n      hour(Time) >= 0 & hour(Time) < 6   ~ \"00:00-05:59\",\n      hour(Time) >= 6 & hour(Time) < 12  ~ \"06:00-11:59\",\n      hour(Time) >= 12 & hour(Time) < 18 ~ \"12:00-17:59\",\n      hour(Time) >= 18 & hour(Time) < 24 ~ \"18:00-23:59\",\n      TRUE ~ NA_character_ #Should not happen, unless there are times outside 0-23\n    ),\n    Six_Hour_Period = factor(Six_Hour_Period, levels = c(\"00:00-05:59\", \"06:00-11:59\", \"12:00-17:59\", \"18:00-23:59\")) #order\n  ) %>%\n  group_by(Crane, Six_Hour_Period) %>%\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Create the cycle plot\nggplot(crane_sightings_6hr, aes(x = Six_Hour_Period, y = Sightings, group=Crane, color=Crane)) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~ Crane, ncol = 2) +\n  labs(\n    title = \"Annual Crane Sightings by 6-Hour Period\",\n    x = \"6-Hour Period\",\n    y = \"Total Sightings\"\n  ) +\n  theme_grey() +\n  theme(\n    strip.text = element_text(size = 10),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position=\"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Monthly sightings per crane\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Order of months on the y-axis\nmonth_order <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# 1. Aggregate data by Crane and Month\ncrane_activity_by_month <- crane_data %>%\n  group_by(Crane, Month_Label) %>%  # Group by Crane and Month\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Define the order of the months\nmonth_order <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n# 3. Create the cycle plots, one for each crane\nggplot(crane_activity_by_month, aes(x = Month_Label, y = Sightings, group = Crane, color = Crane)) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~ Crane, ncol = 2) + # Facet by Crane, adjust ncol as needed\n  scale_x_discrete(limits = month_order) +  # Ensure months are ordered correctly on x-axis\n  labs(\n    title = \"Monthly Crane Activity\",\n    x = \"Month\",\n    y = \"Total Sightings\"\n  ) +\n  theme_grey()+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  # Adjust text angle and size\n    strip.text = element_text(size = 10),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position = \"none\" # Remove the legend\n  )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## CyclePlot for all cranes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create the grouping\ncrane_sightings_new <- crane_data %>%\n  mutate(\n    # Handle potential errors in Time column\n    Month_Label = case_when(\n      is.na(Time) ~ NA_character_,  # Assign NA for missing Time values\n      TRUE ~ format(Time, \"%b\") # Extract month label,\n    ),\n    Month_Label = factor(Month_Label, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")),\n    Six_Hour_Period = case_when(\n      hour(Time) >= 0 & hour(Time) < 6   ~ \"00:00-05:59\",\n      hour(Time) >= 6 & hour(Time) < 12  ~ \"06:00-11:59\",\n      hour(Time) >= 12 & hour(Time) < 18 ~ \"12:00-17:59\",\n      hour(Time) >= 18 & hour(Time) < 24 ~ \"18:00-23:59\",\n      TRUE ~ NA_character_\n    ),\n    Six_Hour_Period = factor(Six_Hour_Period, levels = c(\"00:00-05:59\", \"06:00-11:59\", \"12:00-17:59\", \"18:00-23:59\")) #order\n  ) %>%\n  group_by(Month_Label, Six_Hour_Period) %>%\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Calculate average sightings per month\nhline.data <- crane_sightings_new %>% \n  group_by(Month_Label) %>%\n  summarise(avgvalue = mean(`Sightings`))\n\n# 3. Create the cycle plots, one for each crane\nggplot() + \n  geom_line(data=crane_sightings_new, \n            aes(x=Six_Hour_Period, y = Sightings, group = Month_Label)) +\n  facet_grid(~Month_Label) + # Facet by Month\n  labs(\n    title = \"Crane Sightings by Month and 6-Hour Period\",\n    x = \"Month\",\n    y = \"Total Sightings\") +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 5),\n    strip.text = element_text(size = 8),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position = \"bottom\",\n    strip.text.y = element_text(size = 8)\n  )+\n    geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## CyclePlot per crane\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create the grouping\ncrane_sightings_new <- crane_data %>%\n  mutate(\n    # Handle potential errors in Time column\n    Month_Label = case_when(\n      is.na(Time) ~ NA_character_,  # Assign NA for missing Time values\n      TRUE ~ format(Time, \"%b\") # Extract month label,\n    ),\n    Month_Label = factor(Month_Label, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")),\n    Six_Hour_Period = case_when(\n      hour(Time) >= 0 & hour(Time) < 6   ~ \"00:00-05:59\",\n      hour(Time) >= 6 & hour(Time) < 12  ~ \"06:00-11:59\",\n      hour(Time) >= 12 & hour(Time) < 18 ~ \"12:00-17:59\",\n      hour(Time) >= 18 & hour(Time) < 24 ~ \"18:00-23:59\",\n      TRUE ~ NA_character_\n    ),\n    Six_Hour_Period = factor(Six_Hour_Period, levels = c(\"00:00-05:59\", \"06:00-11:59\", \"12:00-17:59\", \"18:00-23:59\")) #order\n  ) %>%\n  group_by(Crane, Month_Label, Six_Hour_Period) %>%\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Calculate average sightings per month\navg_sightings_month <- crane_sightings_new %>%\n  group_by(Month_Label) %>%\n  summarise(avg_sightings = mean(Sightings), .groups = 'drop')\n\n# 3. Create the cycle plots, one for each crane\nggplot()+\n  geom_line(data=crane_sightings_new, \n            aes(x=Six_Hour_Period, y = Sightings, group = Month_Label)) +\n  facet_grid(Crane ~ Month_Label) +  #  Crane on rows, Month_Label on columns\n  labs(\n    title = \"Sightings by Month and 6-Hour Period, per crane\",\n    x = \"6-Hour Period\",\n    y = \"Total Sightings\",\n    color = \"Month\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 5),\n    strip.text = element_text(size = 10),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position = \"bottom\",\n    strip.text.y = element_text(size = 8)\n  ) \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n:::\n\n**From the annual crane sightings by 6-hour period:**\n\n-   Crane 100854 had a pronounced drop in sightings around 1800hrs to 2359hrs, relative to other cranes.\n\n**From the cycleplot of all cranes:**\n\n-   With respect to the annual sightings within the 6 hour period, the highest sighting was 9 within a month at 1200-1759hrs in Feb , 0600-1159hrs in Aug, 0000-0559hrs in Oct. The lowest annual sighting was of 3 in Dec at 1200-1759hrs.\n\n-   Across the months, the highest average sightings were in Jan and Feb 2013, and least in Nov and Dec 2013.\n\n-   Across the 24 hours period, a drop in activity or sightings from 1800hrs-2359hrs from Jan to Aug, and Oct-Nov 2013 (Possibly resting). However, an intersting rise in sightings observed in Sept (crane count: 5 to 8) and Dec (crane count: 3 to 4) around 1800hrs-2359hrs.\n\n**From the cycleplot per crane:**\n\n-   Crane 100854 was not sighted at 1800hrs to 2359hrs during the year, except in Aug and Sep.\n\n-   Crane 100845 and 100853 were sighted more often in Sept around 1800hrs to 2359hrs, leading to the rise in sightings for Sept.\n\n## 6.7 References\n\n-   [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)\n\n-   [newggslopegraph()](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph)\n\n-   [Sandhill Crane Locations from USGS](https://www.sciencebase.gov/catalog/item/59a472d7e4b077f005673486)\n",
    "supporting": [
      "Hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}