---
title: "Hands-on Exercise 1"
author: "Audrey Tan"
---

# **1 A Layered Grammar of Graphics: ggplot2 methods**

# 1.1 Learning Outcomes

The learning outcomes are:

-   Learn the basic principles and essential components of ggplot2;

-   Gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics; and

-   Apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics,

# 1.2 Getting Started

## 1.2.1 Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

### Load the required libraries

```{r}
library(ggplot2)
library(RColorBrewer)
library(magick)
```

## 1.2.2 Importing the data

The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package and stores it in exam_data in R Studio.

```{r}
exam_data <-read_csv("data/Exam_data.csv", show_col_types = FALSE)
```

-   The data consists of year end examination grades of a cohort of primary 3 students from a local school.
-   The dataframe has 7 columns and 322 rows. Four of the columns contains categorical data type and the other three are in continuous data type.
    -   The categorical attributes are: ID, CLASS, GENDER and RACE.
    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

# 1.3 Introducing ggplot

R Graphics is the built-in R plotting method. By comparing the plots between R Graphics and ggplot via a histogram, we see some differences.

## 1.3.1 R Graphics VS ggplot

### R Graphics

```{r}
hist(exam_data$MATHS)
```

The code is simpler for R Graphics as compared to ggplot.

### GGPLOT2

```{r}
ggplot(data = exam_data, aes(x = MATHS)) +
  geom_histogram(bins = 10,
                 boundary = 100,
                 color = "black",
                 fill="mediumorchid")+
  ggtitle("Distribution of Maths Scores") +
  theme_minimal()
```

However, here are a few advantages of ggplot2:

-   No need to make own legends.

-   Able to perform faceting *(*[1.9 Essential Grammatical Elements in ggplot2: Facets]*)* to display data in multiple subplots.

-   Able to use tidydata to do exploratory data analysis through data.table or dplyr.

-   ggplot2 looks better

As pointed out by [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157) :

*The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.*

# 1.4 Grammar of Graphics

It is important for us to understand the principles of **Grammer of Graphics** before plotting using ggplots.

**What is it?**

**Grammar of Graphics** is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The **grammar of graphics** is an answer to a question:

::: text-center
**What is a Statistical Graphic?**
:::

In a nutshell, **Grammar of Graphics** defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

There are two principles in Grammar of Graphics, they are:

-   Graphics = distinct layers of grammatical elements

-   Meaningful plots through aesthetic mapping

A good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.

## 1.4.1 A Layered Grammar of Graphics

ggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.

```{r}
img <- image_read("https://r4va.netlify.app/chap01/img/image4.jpg")
plot(img)
```

*Reference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.*

A short description of each building block are as follows:

-   Data: The dataset being plotted.

-   Aesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   Geometrics: The visual elements used for our data, such as point, bar or line.

-   Facets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   Statistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).

-   Coordinate systems define the plane on which data are mapped on the graphic.

-   Themes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

# 1.5 Essential Grammatical Elements in ggplot2:data

```{r}
ggplot(data=exam_data)
```

*Note.*

-   *A blank canvas appears.*

-   *The ggplot() function in the ggplot2 package is used to create a ggplot object.*

-   *The data within holds the dataset (exam_data) used to plot the graphics.*

-   *If the dataset is not already a data.frame, it will be converted to one by fortify().*

# 1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings

The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)

Code chunk below adds the aesthetic element into the plot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="lavenderblush")+  
ggtitle("Distribution of Maths Scores")

```

*Note.*

-   *ggplot includes the x-axis and the axis’s label.*

# 1.7 Essential Grammatical Elements in ggplot2: geom

Geometric objects are the actual marks we put on a plot. Examples include:

-   *geom_point* for drawing individual points (e.g., a scatter plot)

-   *geom_line* for drawing lines (e.g., for a line charts)

-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)

-   *geom_bar* for drawing bars (e.g., for bar charts)

-   *geom_histogram* for drawing binned values (e.g. a histogram)

-   *geom_polygon* for drawing arbitrary shapes

-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

```{r}
img2<- image_read("https://r4va.netlify.app/chap01/img/image6.jpg")
plot(img2)
```

-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.

-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).

## 1.7.1 Geometric Objects: geom_bar

The code chunk below plots a bar chart by using [`geom_bar()`](https://ggplot2.tidyverse.org/reference/geom_bar.html).

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar(aes(fill = RACE), alpha = 0.5)+
ggtitle("Barplot of Races")
```

## 1.7.1 Geometric Objects: geom_dotplot

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

In the code chunk below, [`geom_dotplot()`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5, fill = "darkseagreen1")+  
ggtitle("Dotplot of Maths Scores")
```

The y scale is not very useful, in fact it is very misleading.

The code chunk below performs the following two steps:

1\) scale_y_continuous() is used to turn off the y-axis, and

2\) binwidth argument is used to change the binwidth to 2.5.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5, fill = "darkseagreen1", alpha = 0.5) +
ggtitle("Dotplot of Maths Scores")+
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```

## 1.7.3 Geometric Objects: geom_histogram()

In the code chunk below, [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar(aes(fill = GENDER), alpha = 0.5)+  
ggtitle("Barplot of Races by Gender")
```

*Note that the default bin is **30**.*

## 1.7.4 Modifying a geometric object by changing geom()

In the code chunk below,

-   *bins* argument is used to change the number of bins to 20,

-   *fill* argument is used to shade the histogram with light blue color, and

-   *color* argument is used to change the outline colour of the bars in black

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="darkorchid2") +  
ggtitle("Distribution of Maths Scores")
```

## 1.7.5 Modifying a geometric object by changing aes()

-   The code chunk below changes the interior colour of the histogram (i.e. *fill*) by using sub-group of *aesthetic()*. R Color Brewer is used to set a palette colour called Set2.

```{r}
hst<-ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30") +  
  ggtitle("Distribution of Maths Scores by Gender")
hst + scale_fill_brewer(palette = "Set2")
```

*Note. This approach can be used to colour, fill and alpha of the geometric.*

## 1.7.6 Geometric Objects: geom_density

[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()  +  
ggtitle("Density plot of Maths Scores")
```

### Two density lines

The code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes()*

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density(aes(fill = GENDER), alpha = 0.5) +  
ggtitle("Density plot of Maths Scores by Gender")
```

## 1.7.7 Geometric Objects: geom_boxplot

[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

The code chunk below plots boxplots by using [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html).

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot(aes(fill = GENDER), alpha = 0.5)  +  
ggtitle("Boxplot of Maths Scores by Gender")
```

[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(aes(fill = GENDER), alpha = 0.5, notch=TRUE)+  
ggtitle("Notched plot of Maths Scores by Gender")
```

## 1.7.8 Geometric Objects: geom_violin

[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

The code below plot the distribution of Maths score by gender in violin plot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin(aes(fill = GENDER), alpha = 0.5) +  
ggtitle("Violin plot of Maths Scores by Gender")
```

## 1.7.9 Geometric Objects: geom_point()

[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH,
           color=GENDER)) +
  geom_point(aes(fill = GENDER), alpha = 0.5) +  
ggtitle("Scatter plot of Maths by English Scores with Gender")
```

## 1.7.10 geom objects can be combined

The code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.

```{r}
ggplot(data = exam_data, 
       aes(x = GENDER, y = MATHS)) +
  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +   # color-filled 
  geom_jitter(aes(color = GENDER),              
              width = 0.2, size = 0.8, alpha = 0.7) +
  ggtitle("Maths Scores by Gender") +
  theme_minimal()
```

# 1.8 Essential Grammatical Elements in ggplot2: stat

The [Statistics functions](https://ggplot2.tidyverse.org/reference/index.html#stats) statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)

    -   a mean

    -   a confidence limit

-   There are two ways to use these functions:

    -   add a `stat_()` function and override the default geom, or

    -   add a `geom_()` function and override the default stat.

## 1.8.1 Working with stat()

The boxplots below are incomplete because the positions of the means were not shown.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot(aes(fill = GENDER), alpha = 0.5)+
  ggtitle("Boxplot of Maths Scores by Gender") 
```

## 1.8.2 Working with stat - the stat_summary() method

The code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +
  stat_summary(geom = "point",       
               fun = "mean",         
               colour ="red",        
               size=4)    +
  ggtitle("Boxplot of Maths Scores by Gender") 
```

## 1.8.3 Working with stat - the geom() method

The code chunk below adding mean values by using `geom_()` function and overriding the default stat.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +
  geom_point(stat="summary",        
             fun="mean",           
             colour="red",          
             size=4) +
  ggtitle("Boxplot of Maths Scores by Gender") 
```

## 1.8.4 Adding a best fit curve on a scatterplot?

The scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.

In the code chunk below, [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point(aes(color = GENDER), alpha = 0.5) +
  geom_smooth(size=0.5) +
  ggtitle("Scatter plot of Maths by English Scores by Gender") 
```

*Note. The default method used is loess.*

### Overriding best fit smoothing method

The default smoothing method can be overridden as shown below.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point(aes(color = GENDER), alpha = 0.5) +
  geom_smooth(method=lm, 
              linewidth=0.5)+
  ggtitle("Scatter plot of Maths by English Scores by Gender") 
```

# 1.9 Essential Grammatical Elements in ggplot2: Facets

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).

## 1.9.1 Working with facet_wrap()

[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using `facet-wrap()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,aes(fill = CLASS), alpha = 0.5) +
    facet_wrap(~ CLASS)       +
  ggtitle("Trellis plot of Maths Scores for different Classes") 
```

## 1.9.2 facet_grid() function

[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

The code chunk below plots a trellis plot using `facet_grid()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,aes(fill = CLASS), alpha = 0.5) +
    facet_grid(~ CLASS)      +
  ggtitle("Trellis plot of Maths Scores for different Classes")  
```

# 1.10 Essential Grammatical Elements in ggplot2: Coordinates

The *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

```         
-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out). -   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped. 
-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot). 
-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.
```

## 1.10.1 Working with Coordinate

By the default, the bar chart of ggplot2 is in vertical form.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar(aes(fill = RACE), alpha = 0.5)    +
  ggtitle("Bar plot for Races") 
```

### Flipping into vertical bar chart

The code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar(aes(fill = RACE), alpha = 0.5) +
  coord_flip() +
  ggtitle("Bar plot for Races") 
```

## 1.10.2 Changing the y- and x-axis range

The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point(aes(color = GENDER), alpha = 0.5) +
  geom_smooth(method=lm, linewidth=0.5)  +
  ggtitle("Scatter plot of Math by English Scores with Gender") 
```

### Starting the axis ranges from 0-100

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point(aes(color = GENDER), alpha = 0.5) +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))+
  ggtitle("Scatter plot of Math by English Scores with Gender") 
```

# 1.11 Essential Grammatical Elements in ggplot2: themes

Themes control elements of the graph not related to the data. For example:

-   background colour

-   size of fonts

-   gridlines

-   colour of labels

Built-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`

A list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

## 1.11.1 Working with theme

### Gray

The code chunk below plot a horizontal bar chart using `theme_gray()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

### Classic

A horizontal bar chart plotted using `theme_classic()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

### Minimal

A horizontal bar chart plotted using `theme_minimal()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

### Black and White

The code chunk below plot a horizontal bar chart using `theme_bw()`

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_bw()
```

# 1.12 Reference

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.

-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.

-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version

-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)

-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)

-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)
