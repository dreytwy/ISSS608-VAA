---
title: "Hands-on Exercise 3A"
author: "Audrey Tan"
---

# **3 Programming Interactive Data Visualisation with R**

# **3.1 Learning Outcome**

This exercise will focus on creating interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

# **3.2 Getting Started**

First, write a code chunk to check, install and launch the following R packages:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/) for making ‘ggplot’ graphics interactive.

-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.

-   [**DT**](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page.

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

-   [**patchwork**](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

The code chunk below will be used to accomplish the task and load required libraries.

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
library(ggplot2)
library(RColorBrewer)
library(magick)
library(gridExtra)
library(dplyr)
```

# **3.3 Importing data**

In this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.

The code chunk below `read_csv()` of **readr** package is used to import *Exam_data.csv* data file into R and save it as an tibble data frame called `exam_data`.

```{r}
exam_data <- read_csv("data/Exam_data.csv", show_col_types = FALSE)
```

# **3.4 Interactive Data Visualisation - ggiraph methods**

```{r, echo=FALSE}
img <- image_read("https://r4va.netlify.app/chap03/img/image1.jpg")
plot(img)
```

[ggiraph](https://davidgohel.github.io/ggiraph/index.html) is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with [**ggplot geometries**](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) that can understand three arguments:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://www.ardata.fr/ggiraph-book/selections.html) for more detail explanation.

## **3.4.1 Tooltip effect with *tooltip* aesthetic**

Below shows a typical code chunk to plot an interactive statistical graph by using **ggiraph** package. Notice that the code chunk consists of two parts.

-   First, an ggplot object will be created.

-   Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive svg object.

```{r, results='hide'}
# First part: ggplot object
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(
    aes(tooltip = ID), #Student's ID
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)+  
  ggtitle("Maths scores for Primary 3")

# Next part: ggiraph
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Notice that two steps are involved.

-   First, an interactive version of ggplot2 geom (i.e. [`geom_dotplot_interactive()`](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph.

-   Then, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.

# **3.5 Interactivity**

By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(
    aes(tooltip = ID), # Student's ID
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)+  
  ggtitle("Maths scores for Primary 3")

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

## **3.5.1 Displaying multiple information on tooltip**

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r, results='hide'}

# Customising the tooltip
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         # Student's ID
  "\n Class = ", exam_data$CLASS)) # Student's Class

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  ggtitle("Maths scores for Primary 3")

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

The first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.

# **3.6 Interactivity**

By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.

```{r, echo=FALSE}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         # Student's ID
  "\n Class = ", exam_data$CLASS)) # Student's Class

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)+  
  ggtitle("Maths scores for Primary 3")

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

## **3.6.1 Customising Tooltip style**

Code chunk below uses [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customize tooltip rendering by add css declarations.

```{r,results='hide'}

# Customising Tooltip style
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+  
  ggtitle("Maths scores for Primary 3")

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                                        
```

### Tooltip: Black Background and White Bolded Font

Notice that the background colour of the tooltip is black and the font colour is white and bold.

```{r, echo=FALSE}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+  
  ggtitle("Maths scores for Primary 3")

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                                        
```

### Tooltip: Pink Background with Rounded Borders and White Fonts

Notice that the background colour of the tooltip is pink with round borders and the font colour is white.

The student’s ID and Class will be displayed.

```{r}
# Customising Tooltip style
tooltip_css <- "background-color:#d8118c;color:white;padding:5px;border-radius:3px;"

# Combined Student ID and Class 
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         # Student's ID
  "\n Class = ", exam_data$CLASS)) # Student's Class

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(tooltip = exam_data$tooltip),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+  
  ggtitle("Maths scores for Primary 3")

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                                        
```

-   Refer to [Customizing girafe objects](https://www.ardata.fr/ggiraph-book/customize.html) to learn more about how to customise ggiraph objects.

## **3.6.2 Displaying statistics on tooltip**

Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

# Reorder RACE by mean MATHS score
exam_data <- exam_data %>%
  group_by(RACE) %>%
  mutate(mean_math = mean(MATHS, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(RACE = reorder(RACE, mean_math))

# Plot
gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,
    fill="aquamarine2"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, linewidth = 0.2
  )+  
  ggtitle("Maths scores by Races")

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

## **3.6.3 Hover effect with *data_id* aesthetic**

Code chunk below shows the second interactive feature of ggiraph, namely `data_id`.

```{r, results='hide'}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),        # data_id added here to Class     
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Maths scores for Primary 3")

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
    options = list(
    opts_hover(css = "fill:black;")
  )
)    
```

Interactivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),          # data_id added here to Class   
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Maths scores for Primary 3")
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
    options = list(
    opts_hover(css = "fill:black;")
  )
)  
```

Note that the default value of the hover css is *hover_css = “fill:orange;”* but black has been used here for better contrast.

## **3.6.4 Styling hover effect**

In the code chunk below, css codes are used to change the highlighting effect.

```{r, results='hide'}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Dotplot of Maths scores") 

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #333333;"),  #CSS codes here for Color Hex Gray20
    opts_hover_inv(css = "opacity:0.2;") #CSS codes here for opaque
  )                                        
)       
```

Interactivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),           # data_id added here to Class     
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Dotplot of Maths scores") 

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #333333;"),  #CSS codes here for Color Hex Gray20
    opts_hover_inv(css = "opacity:0.2;") #CSS Codes here for opaque
  )                                        
)       
```

Note: Different from previous example, in this example the ccs customisation request are encoded directly.

## **3.6.5 Combining tooltip and hover effect**

There are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.

```{r, results='hide'}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS,           # tooltip added here to Class   
        data_id = CLASS),          # data_id added here to Class      
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Dotplot of Maths scores") 

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #000080;"),  #CSS Codes here for color hex NavyBlue
    opts_hover_inv(css = "opacity:0.2;") #CSS Codes here for opaque
  )                                        
)     
```

Interactivity: Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.

```{r, echo=FALSE}
p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS,      # tooltip added here to Class
        data_id = CLASS),     # data_id added here to Class          
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Dotplot of Maths scores") 

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #000080;"),  #CSS Codes here for color hex NavyBlue
    opts_hover_inv(css = "opacity:0.2;") #CSS Codes here for opaque
  )                                        
)     
```

## 3.6.6 Click effect with onclick

`onclick` argument of ggiraph provides hotlink interactivity on the web.

The code chunk below shown an example of `onclick`.

```{r, results='hide'}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Dotplot of Maths scores") 

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)                                        
```

Interactivity: Web document link with a data object will be displayed on the web browser upon mouse click.

```{r, echo=FALSE}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)+
  scale_fill_manual(values = c("Female" = "#e8a9e4", "Male" = "#92e8e8"))+
  ggtitle("Dotplot of Maths scores") 

girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)                                     
```

Note. *Click actions must be a string column in the dataset containing valid javascript instructions.*

## **3.6.7 Coordinated Multiple Views with ggiraph**

Coordinated multiple views methods has been implemented in the data visualisation below.

```{r, echo=FALSE}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)+ 
  ggtitle("Dotplot of Maths scores") 

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)+ 
  ggtitle("Dotplot of English scores") 

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

Notice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

In order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:

1.  Appropriate interactive functions of ggiraph will be used to create the multiple views.

2.  patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.

```{r, results='hide'}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)+ 
  theme_dark()+
  ggtitle("Dotplot of Math scores") 

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH, fill=GENDER)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)+ 
  theme_dark()+
  ggtitle("Dotplot of English scores") 

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```

The data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.

# **3.7 Interactive Data Visualisation - plotly methods!**

Plotly’s R graphing library create interactive web graphics from **ggplot2** graphs and/or a custom interface to the (MIT-licensed) JavaScript library [**plotly.js**](https://plotly.com/javascript/) inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.

```{r, echo=FALSE}
img <- image_read("https://r4va.netlify.app/chap03/img/image2.jpg")
plot(img)
```

There are two ways to create interactive graph by using plotly, they are:

-   by using *plot_ly()*, and

-   by using *ggplotly()*

## **3.7.1 Creating an interactive scatter plot: plot_ly() method**

The tabset below shows an example a basic interactive plot created by using *plot_ly()*.

```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```

## **3.7.2 Working with visual variable: plot_ly() method**

### Colour and Colour Palette

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e. RACE). Colour palette is customised as well with Set2.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS,         
        type= "scatter", 
        mode="markers",
        color = ~RACE,
        colors="Set2")
```

### Data Labels on Hover

Gender and Science scores may be added on Hover.

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        type= "scatter", 
        mode="markers",
        color = ~RACE,
        colors="Set2",
        #Hover text
        text=~paste("Gender: ", GENDER, "<br>Science: ", SCIENCE))
```

### Chart Title

Chart title may be added

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        type= "scatter", 
        mode="markers",
        color = ~RACE,
        colors="Set2",
        #Hover text
        text=~paste("Gender: ", GENDER, "<br>Science: ", SCIENCE))%>%
  layout(title = "Scatterplot of English by Math Scores")  # Title
```

## **3.7.3 Creating an interactive scatter plot: ggplotly() method**

The code chunk below plots an interactive scatter plot by using *ggplotly()*.

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH, fill=GENDER)) +
  geom_point(size=2) +
  ggtitle("Scatterplot of Math by English Scores") + 
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

Notice that the only extra line you need to include in the code chunk is ggplotly().

## **3.7.4 Coordinated Multiple Views with plotly**

The creation of a coordinated linked plot by using plotly involves three steps:

-   [`highlight_key()`](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package is used as shared data.

-   two scatterplots will be created by using ggplot2 functions.

-   lastly, [*subplot()*](https://plotly.com/r/subplots/) of **plotly** package is used to place them next to each other side-by-side.

```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH, fill=GENDER)) +
  geom_point(size=2) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE, fill=GENDER)) +
  geom_point(size=2) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))%>%
layout(
    showlegend = FALSE)
```

Thing to learn from the code chunk:

-   `highlight_key()` simply creates an object of class [crosstalk::SharedData](https://rdrr.io/cran/crosstalk/man/SharedData.html).

-   Visit this [link](https://rstudio.github.io/crosstalk/) to learn more about crosstalk.

### Customisation of Main Title and Axis

```{r}
d <- highlight_key(exam_data)

# First plot (MATHS vs ENGLISH)
p1 <- ggplot(data = d, 
             aes(x = MATHS, y = ENGLISH, fill = GENDER)) +
  geom_point(size = 2) +
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + 
  labs(
    title = "MATHS by ENGLISH",
    x = "MATH",  # Shared X-axis label
    y = "ENGLISH"
  ) 

# Second plot (MATHS by SCIENCE)
p2 <- ggplot(data = d, 
             aes(x = MATHS, y = SCIENCE, fill = GENDER)) +
  geom_point(size = 2) +  
  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + 
  labs(
    title = "MATHS by SCIENCE",
    x = "MATH",  # Shared X-axis label
    y = "SCIENCE"
  ) 

# Convert ggplot to plotly objects
p1_plotly <- ggplotly(p1)
p2_plotly <- ggplotly(p2)

# Combine the plots using subplot
subplot(p1_plotly, p2_plotly, nrows = 1, shareX = TRUE, shareY = FALSE) %>%
  layout(
    title = "Scatterplot Comparison",
    showlegend = FALSE,
    xaxis = list(title = "MATH"),  # Shared X-axis label
    yaxis = list(title = "ENGLISH"),  
    yaxis2 = list(title = "SCIENCE"), 
    margin = list(t = 80),  # Adjust space
    autosize = TRUE,  # Allow auto resizing
    xaxis2 = list(domain = c(0.6, 1)),  # The second plot (SCIENCE) starts here
    yaxis2 = list(domain = c(0, 1))  # The second plot takes full height
  )
```

# **3.8 Interactive Data Visualisation - crosstalk methods!**

[Crosstalk](https://rstudio.github.io/crosstalk/index.html) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

## **3.8.1 Interactive Data Table: DT package**

-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)

-   Data objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).

```{r}
DT::datatable(exam_data, class= "compact")
```

## **3.8.2 Linked brushing: crosstalk method**

Code chunk below is used to implement the coordinated brushing shown above.

```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS, fill=GENDER)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)     
```

Things to learn from the code chunk:

-   *highlight()* is a function of **plotly** package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.

-   *bscols()* is a helper function of **crosstalk** package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. **Warning:** This will bring in all of Bootstrap!.

## **3.8.3 Interactive Sunburst**

In the code chunk, levels are created for each Subject (Maths, English, Science):

-   Level 1: Pass/Fail

-   Level 2: Passing Grades (A\*, A, B, C)

-   Level 3: Race Breakdown (Chinese, Malay, Indian, Others)

-   Level 4: Class (3A to 3I)

```{r}
# Function to prepare data for plotly sunburst with RACE and CLASS
prepare_plotly_interactive_data_actual <- function(df, subject_col) {
  df_processed <- df %>%
    mutate(
      Subject = subject_col,
      PassFail = ifelse(.data[[subject_col]] >= 50, "Pass", "Fail"),
      Grade = case_when(
        .data[[subject_col]] < 50 ~ "Fail",
        .data[[subject_col]] >= 50 & .data[[subject_col]] < 60 ~ "C",
        .data[[subject_col]] >= 60 & .data[[subject_col]] < 70 ~ "B",
        .data[[subject_col]] >= 70 & .data[[subject_col]] < 90 ~ "A",
        .data[[subject_col]] >= 90 ~ "A*"
      )
    )

  # Prepare data for the first level (Subject -> Pass/Fail)
  level1 <- df_processed %>%
    group_by(Subject, PassFail) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, sep = "-"),
      parents = Subject,
      labels = PassFail
    )

  # Prepare data for the second level (Pass -> Grade)
  level2_pass <- df_processed %>%
    filter(PassFail == "Pass") %>%
    group_by(Subject, PassFail, Grade) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, Grade, sep = "-"),
      parents = paste(Subject, PassFail, sep = "-"),
      labels = Grade
    )

  # Prepare data for the third level (Grade -> RACE)
  level3_race <- df_processed %>%
    filter(PassFail == "Pass") %>%
    group_by(Subject, PassFail, Grade, RACE) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, Grade, RACE, sep = "-"),
      parents = paste(Subject, PassFail, Grade, sep = "-"),
      labels = RACE
    )

  # Prepare data for the fourth level (RACE -> CLASS)
  level4_class <- df_processed %>%
    filter(PassFail == "Pass") %>%
    group_by(Subject, PassFail, Grade, RACE, CLASS) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = "-"),
      parents = paste(Subject, PassFail, Grade, RACE, sep = "-"),
      labels = CLASS
    )

  # Root level
  root <- data.frame(
    ids = unique(df_processed$Subject),
    labels = unique(df_processed$Subject),
    parents = NA,
    Count = n_distinct(df_processed$ID)
  )

  plotly_df <- bind_rows(root, level1, level2_pass, level3_race, level4_class)
  return(plotly_df)
}

# Define the subjects to visualize
subjects_to_visualize <- c("MATHS", "ENGLISH", "SCIENCE")
plot_titles <- c("Maths", "English", "Science")

# Create the plotly figure
fig_interactive_actual <- plot_ly()

# Add sunburst for the first subject (MATHS)
interactive_data_subject1 <- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])
fig_interactive_actual <- fig_interactive_actual %>%
  add_trace(
    data = interactive_data_subject1,
    ids = ~ids,
    labels = ~labels,
    parents = ~parents,
    values = ~Count,
    type = 'sunburst',
    domain = list(column = 0),
    maxdepth = 2,
    name = plot_titles[1] # Subtitle
  )

# Add sunburst for the second subject (ENGLISH)
interactive_data_subject2 <- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])
fig_interactive_actual <- fig_interactive_actual %>%
  add_trace(
    data = interactive_data_subject2,
    ids = ~ids,
    labels = ~labels,
    parents = ~parents,
    values = ~Count,
    type = 'sunburst',
    domain = list(column = 1),
    maxdepth = 2,
    name = plot_titles[2] # Subtitle
  )

# Add sunburst for the third subject (SCIENCEC)
interactive_data_subject3 <- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])
fig_interactive_actual <- fig_interactive_actual %>%
  add_trace(
    data = interactive_data_subject3,
    ids = ~ids,
    labels = ~labels,
    parents = ~parents,
    values = ~Count,
    type = 'sunburst',
    domain = list(column = 2),
    maxdepth = 2,
    name = plot_titles[3] # Subtitle
  )

fig_interactive_actual <- fig_interactive_actual %>%
  layout(
    title = "Performance Breakdown by Subject", # Main title
    grid = list(columns = 3, rows = 1),
    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title
    sunburstcolorway = c(
      "#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
      "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880",
      "#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99",
      "#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a"
    ),
    extendsunburstcolors = TRUE
  )

fig_interactive_actual

```

How to use the interactive chart to drill deeper?:

1.  Choose a Subject, click "Pass".

2.  Click a grade (from A\*, A, B, C).

3.  Click a race (from Chinese, Malay, Indian, Others).

4.  Click a class (from 3A to 3I).

Clicking on the middle circle at any level after the root level will allow you to exit one level.

### 3.8.3.1 Adding Percentage Figures

```{r}
# Function to prepare data for plotly sunburst with RACE and CLASS
prepare_plotly_interactive_data_actual <- function(df, subject_col) {
  df_processed <- df %>%
    mutate(
      Subject = subject_col,
      PassFail = ifelse(.data[[subject_col]] >= 50, "Pass", "Fail"),
      Grade = case_when(
        .data[[subject_col]] < 50 ~ "Fail",
        .data[[subject_col]] >= 50 & .data[[subject_col]] < 60 ~ "C",
        .data[[subject_col]] >= 60 & .data[[subject_col]] < 70 ~ "B",
        .data[[subject_col]] >= 70 & .data[[subject_col]] < 90 ~ "A",
        .data[[subject_col]] >= 90 ~ "A*"
      )
    )

  # Prepare data for the first level (Subject -> Pass/Fail)
  level1 <- df_processed %>%
    group_by(Subject, PassFail) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, sep = "-"),
      parents = Subject,
      labels = PassFail
    )

  # Prepare data for the second level (Pass -> Grade)
  level2_pass <- df_processed %>%
    filter(PassFail == "Pass") %>%
    group_by(Subject, PassFail, Grade) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, Grade, sep = "-"),
      parents = paste(Subject, PassFail, sep = "-"),
      labels = Grade
    )

  # Prepare data for the third level (Grade -> RACE)
  level3_race <- df_processed %>%
    filter(PassFail == "Pass") %>%
    group_by(Subject, PassFail, Grade, RACE) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, Grade, RACE, sep = "-"),
      parents = paste(Subject, PassFail, Grade, sep = "-"),
      labels = RACE
    )

  # Prepare data for the fourth level (RACE -> CLASS)
  level4_class <- df_processed %>%
    filter(PassFail == "Pass") %>%
    group_by(Subject, PassFail, Grade, RACE, CLASS) %>%
    summarise(Count = n_distinct(ID), .groups = "drop") %>%
    mutate(
      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = "-"),
      parents = paste(Subject, PassFail, Grade, RACE, sep = "-"),
      labels = CLASS
    )

  # Root level
  root <- data.frame(
    ids = unique(df_processed$Subject),
    labels = paste0(unique(df_processed$Subject), "\n "), 
    parents = NA,
    Count = n_distinct(df_processed$ID)
  )

  plotly_df <- bind_rows(root, level1, level2_pass, level3_race, level4_class) %>%
    group_by(parents) %>%
    mutate(percentage = Count / sum(Count, na.rm = TRUE)) %>%
    ungroup()

  return(plotly_df)
}

# Define the subjects to visualize
subjects_to_visualize <- c("MATHS", "ENGLISH", "SCIENCE")
plot_titles <- c("Maths", "ENG", "SCI")

# Create the plotly figure
fig_interactive_actual <- plot_ly()

# Add sunburst for the first subject (MATHS)
interactive_data_subject1 <- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])
fig_interactive_actual <- fig_interactive_actual %>%
  add_trace(
    data = interactive_data_subject1,
    ids = ~ids,
    labels = ~paste0(labels, " (", round(percentage * 100, 1), "%)"),
    parents = ~parents,
    values = ~Count,
    type = 'sunburst',
    domain = list(column = 0),
    maxdepth = 2,
    name = plot_titles[1]
  )

# Add sunburst for the second subject (ENGLISH)
interactive_data_subject2 <- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])
fig_interactive_actual <- fig_interactive_actual %>%
  add_trace(
    data = interactive_data_subject2,
    ids = ~ids,
    labels = ~paste0(labels, " (", round(percentage * 100, 1), "%)"),
    parents = ~parents,
    values = ~Count,
    type = 'sunburst',
    domain = list(column = 1),
    maxdepth = 2,
    name = plot_titles[2]
  )

# Add sunburst for the second subject (SCIENCE)
interactive_data_subject3 <- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])
fig_interactive_actual <- fig_interactive_actual %>%
  add_trace(
    data = interactive_data_subject3,
    ids = ~ids,
    labels = ~paste0(labels, " (", round(percentage * 100, 1), "%)"),
    parents = ~parents,
    values = ~Count,
    type = 'sunburst',
    domain = list(column = 2),
    maxdepth = 2,
    name = plot_titles[3]
  )

fig_interactive_actual <- fig_interactive_actual %>%
  layout(
    title = "Performance Breakdown by Subject",
    grid = list(columns = 3, rows = 1),
    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title
    sunburstcolorway = c(
      "#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
      "#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880",
      "#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99",
      "#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a"
    ),
    extendsunburstcolors = TRUE
  )

fig_interactive_actual

```

# **3.9 Reference**

## **3.9.1 ggiraph**

This [link](https://davidgohel.github.io/ggiraph/index.html) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)

-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)

-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)

-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

## **3.9.2 plotly for R**

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)

-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).

-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)

-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.

-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly’s R API.

-   [Getting Started](https://gganimate.com/articles/gganimate.html)

-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.

-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
