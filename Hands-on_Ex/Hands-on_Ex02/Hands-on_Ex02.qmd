---
title: "Hands-on Exercise 2"
author: "Audrey Tan"
---

# **2 Beyond ggplot2 Fundamentals**

# 2.1 Overview

In this chapter, there are several ggplot2 extensions used for creating more elegant and effective statistical graphics. The learning outcomes are:

-   control the placement of annotation on a graph by using functions provided in ggrepel package,

-   create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,

-   plot composite figure by combining ggplot2 graphs by using patchwork package.

# 2.2 Getting Started

## 2.2.1 Installing and loading the required libraries

In this exercise, beside tidyverse, four R packages will be used. They are:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below checks if these packages have been installed and also will load them onto the working R environment.

```{r}
pacman::p_load(ggrepel, patchwork,
ggthemes, hrbrthemes,
tidyverse,
plotly)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(magick)
library(ggdist)
library(cowplot)
```

## 2.2.2 Importing data

The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package and stores it in exam_data in R Studio.

```{r}
exam_data <- read_csv("data/Exam_data.csv", show_col_types = FALSE)
```

There are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.

-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

The code chunk below allows a glimpse into exam_data by their 7 column headers.

```{r}
# Display the structure of your exam_data
glimpse(exam_data)
```

# 2.3 Beyond ggplot2 Annotation: ggrepel

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point(color="lightpink4") +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

**ggrepel** is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text.

```{r, echo=FALSE}
img <- image_read("https://r4va.netlify.app/chap02/img/image2.jpg")
plot(img)
```

We simply replace `geom_text()`by geom_text_repel() and `geom_label()` by geom_label_repel.

## 2.3.1 Working with ggrepel

### Example for geom_label_repel

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point(color= "darkblue") +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  geom_label_repel(aes(label = ID, 
                   colour = GENDER),
                   fontface = "bold")+
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

# 2.4 Beyond ggplot2 Themes

gplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are:

`theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

### The Minimal Theme

In the example below, *The Minimal* theme is used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="cornflowerblue") +
  theme_minimal() +
  ggtitle("Distribution of Maths scores") 
```

### The Dark Theme

In the example below, *The Dark* theme is used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="aquamarine") +
  theme_dark() +
  ggtitle("Distribution of Maths scores") 
```

Refer to this [link](https://ggplot2.tidyverse.org/reference/index.html#themes) to learn more about ggplot2 `Themes`

## 2.4.1 Working with ggtheme package

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), ‘Stata’, ‘Excel’, and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

### The Economist Theme

In the example below, *The Economist* theme is used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25",
                 fill="cyan3") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

### Wall Street Journal Theme

In the example below, *The Wall Street Journal* theme is used.

```{r}
p<-ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="cyan3") +
  theme_wsj()

# Add title
p <- p + labs(title = "Distribution of English Scores")
p + theme(
  plot.title = element_text(color = "black", size = 15, face = "bold")
)
```

It also provides some extra geoms and scales for ‘ggplot2’. Consult [this vignette](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) to learn more.

## 2.4.2 Working with hrbthems package

[**hrbrthemes**](https://cran.r-project.org/web/packages/hrbrthemes/index.html) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

```{r}
p <- ggplot(data=exam_data, 
             aes(x = MATHS,
                 fill=GENDER)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25") +
  ggtitle("Distribution of Maths scores by Gender") +
  theme_ipsum(base_family = "sans") 

# Add color palette
p + scale_fill_brewer(palette = "Pastel1")

```

The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult [this vignette](https://hrbrmstr.github.io/hrbrthemes/articles/why_hrbrthemes.html) to learn more.

### Increase font size/ axis label/ remove grid lines/ add subtitle

```{r}
p <- ggplot(data=exam_data, 
             aes(x = MATHS,
                 fill=GENDER)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="black") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y", base_family = "sans")

# Add color palette and titles
p + scale_fill_brewer(palette = "Pastel1") + 
  labs(title = "Distribution of Math Scores",
              subtitle = "(by gender)") + 
  theme(
  plot.title = element_text(color = "black", size = 15, face = "bold"),
  plot.subtitle = element_text(color = "grey34"),
)
```

::: callout-note
-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15, and

-   `grid` argument is used to remove the x-axis grid lines.
:::

# 2.5 Beyond Single Graph

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, composite plots are created by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.

**Math**

```{r}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="aquamarine3") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")+
  theme(plot.title = element_text(size = 9))
```

**English**

```{r}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="mediumpurple1") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")+
  theme(plot.title = element_text(size = 9))
```

**English vs Math**

```{r}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")+
  theme(plot.title = element_text(size = 9))
```

## 2.5.1 Creating Composite Graphics: pathwork methods

There are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/index.html) package. In this section, I am going to shared with you an ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.

-   Parenthesis () to create a subplot group.

-   Two-Row Layout using the Division Sign `/`

## 2.5.2 Combining two ggplot2 graphs

Figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!

```{r}
p1 + p2
```

## 2.5.3 Combining three ggplot2 graphs

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   “/” operator to stack two ggplot2 graphs,

-   “\|” operator to place the plots beside each other,

-   “()” operator the define the sequence of the plotting.

```{r}
(p1 / p2) | p3
```

To learn more about, refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html).

## 2.5.4 Creating a composite figure with tag

In order to identify subplots in text, **patchwork** also provides auto-tagging capabilities as shown in the figure below.

### Roman Numerals- Uppercase

'I' for uppercase and 'i' for lower case roman numerals

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

### Latin Letters- Uppercase

'A' for uppercase and 'a' for lower case Latin letters

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'A')
```

### Arabic Numerals

'1' for Arabic numerals

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = '1')
```

## 2.5.5 Creating figure with insert

Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

### Insert P2 to Top Left

```{r}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

### Insert P1 to Bottom Right

```{r}
p3 + inset_element(p1, 
                   left = 0.6, 
                   bottom = 0, 
                   right = 1, 
                   top = 0.4)
```

## 2.5.6 Creating a composite figure by using patchwork and ggtheme

Figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.

```{r}
patchwork <- (p1 / p2) | p3 
patchwork & theme_economist()&
  theme(
    plot.title = element_text(size = 8),       # Adjust main patchwork title size
    plot.subtitle = element_text(size = 8),    # Adjust main patchwork subtitle size 
    plot.caption = element_text(size = 7),     # Adjust main patchwork caption size 
    strip.text = element_text(size = 8),        # Adjust facet label sizes 
    axis.title.x = element_text(size = 8),       # Adjust x-axis label sizes
    axis.title.y = element_text(size = 8)        # Adjust y-axis label sizes
  )
```

## 2.5.7 Creating Raincloud plots

**Shortcomings of barplots:**

The **barplot** with whisker error bars to visualise the mean or median and the standard error may be prone to distortion, fail to represent underlying data parameter inferences, lead to misleading inferences of magnitude of difference between conditions, and may obscure difference in distributions (Allen et al., 2021).

**Remedies:**

-   Add **jittered raw data points** to the standard **boxplot** and +/- standard error scheme.

-   Add **dotplots** tosupplement visualizations of central tendency and error, but at the risk of added complexity due to the dependence of such plots on choices such as bin-width and dot size, and the risk of reading issues when there are many observations.

-   **Violin plot overlaid with boxplots** or similar. However, there is little to be gained statistically, by mirroring the violin plot, and therefore violating the philosophy of minimising the “data-ink ratio” (Allen et al., 2021; Tufte, 1983).

*Click to see detailed information on [shortcomings and remedies of barplot](https://wellcomeopenresearch.org/articles/4-63).*

**Solution to limitations**:

The **raincloud plot** combines various plots, to address the aforementioned limitations in an intuitive, modular, and statistically robust format. Raincloud plots combine a ‘split-half violin’, raw jittered data points, and a standard visualization of central tendency (i.e., mean or median) and error, such as a boxplot (Allen et al., 2021).

```{r, echo=FALSE}
# Grouping subjects
simdat <- exam_data %>%
  pivot_longer(
    cols = c("ENGLISH", "MATHS", "SCIENCE"),
    names_to = "group",
    values_to = "score"
  )

# Factor for consistent group order
simdat$group <- factor(simdat$group, levels = c("ENGLISH", "MATHS", "SCIENCE"))
```

```{r, echo=FALSE}
# Define custom flat violin geom without ggname()
GeomFlatViolin <- ggproto("GeomFlatViolin", Geom,
  setup_data = function(data, params) {
    data$width <- data$width %||%
      params$width %||% (resolution(data$x, FALSE) * 0.9)

    data %>%
      group_by(x) %>%
      mutate(
        ymin = min(y),
        ymax = max(y),
        xmin = x,
        xmax = x + violinwidth * width
      )
  },

  draw_group = function(data, panel_scales, coord) {
    data <- transform(data,
                      xminv = x,
                      xmaxv = x + violinwidth * (xmax - x))

    newdata <- rbind(
      arrange(transform(data, x = xmaxv), y),
      arrange(transform(data, x = xminv), -y)
    )

    newdata <- rbind(newdata, newdata[1, ])

    # No need for ggname(), directly use GeomPolygon$draw_panel
    GeomPolygon$draw_panel(newdata, panel_scales, coord)
  },

  draw_key = draw_key_polygon,

  default_aes = aes(
    weight = 1, colour = "black", fill = "white", size = 0.5,
    alpha = NA, linetype = "solid"
  ),

  required_aes = c("x", "y")
)

# Wrapper function for geom_flat_violin
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
                             position = "dodge", trim = TRUE, scale = "area",
                             show.legend = NA, inherit.aes = TRUE, ...) {
  layer(
    data = data,
    mapping = mapping,
    stat = stat,
    geom = GeomFlatViolin,
    position = position,
    show.legend = show.legend,
    inherit.aes = inherit.aes,
    params = list(trim = trim, scale = scale, ...)
  )
}
```

```{r}
# plot
p4 <- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +
  geom_flat_violin(
    position = position_nudge(x = 0.25),
    adjust = 2,
    trim = TRUE
  ) +
  geom_point(
    position = position_jitter(width = 0.15),
    size = 0.25
  ) +
  geom_boxplot(
    aes(x = as.numeric(group) + 0.25, y = score),
    outlier.shape = NA,
    alpha = 0.3,
    width = 0.1,
    colour = "BLACK",
    position = position_nudge(x = 0)
  ) +
  scale_fill_brewer(palette = "Set2") +  # palette for the fill
  scale_color_brewer(palette = "Set2") +  # palette for the color
  guides(fill = "none", colour = "none") +
  ylab("Score") +
  xlab("Subject") +
  theme_cowplot() +
  coord_flip() +
  ggtitle("Raincloud Plot")

suppressWarnings(plot(p4))  # Suppress warnings

```

In the **raincloud plot** above, the following elements are visualised:

1.  **Split-half violin** (density plot): **Distribution of the data** for each subject, filled with color, and is a smoothed density estimate of the data.

2.  **Boxplot**: Overlaid on top of the violin, showing the **quartiles, median**, and **outliers** for the data.

3.  **Raw jittered data points ("rain")**: Individual data points ("raindrop") shown as **small, scattered dots**. Shows the data points distribution within each subject.

### 2.5.7.1 Drilling Deeper into Interactive Rain Points

We may dissect the plot without the violin density plot. Then using tooltip we can hover over each individual "raindrop" to show the student's ID and Class per subject, in an interactive manner.

```{r}
# tooltip
simdat$tooltip <- paste0("ID = ", simdat$ID, "\nClass = ", simdat$group)

# Create the plot
p4_interactive <- suppressWarnings({
  p4 <- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +  geom_point(
      aes(text = tooltip),  # Add tooltip in the 'text' aesthetic
      position = position_jitter(width = 0.15),
      size = 0.25
    ) +
    geom_boxplot(
      aes(x = as.numeric(group) + 0.25, y = score),
      outlier.shape = NA,
      alpha = 0.3,
      width = 0.1,
      colour = "BLACK",
      position = position_nudge(x = 0)
    ) +
    scale_fill_brewer(palette = "Set2") +  # palette for the fill
    scale_color_brewer(palette = "Set2") +  # palette for the color
    guides(fill = "none", colour = "none") +
    ylab("Score") +
    xlab("Subject") +
    theme_cowplot() +
    coord_flip() +
    ggtitle("Dissected Raincloud Plot")

  # Convert to interactive plotly plot with the tooltip
  ggplotly(p4, tooltip = "text")  # Use 'text' for hover tooltip
})

# Display the interactive plot
p4_interactive
```

# 2.6 Reference

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)

-   [ggrepel](https://ggrepel.slowkow.com/)

-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)

-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)

-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)

-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)

-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \[version 2; peer review: 2 approved\]. *Welcome Open Res* 2021, pp. 4:63.

-   Tufte ER: The Visual Display of Quantitative Information. (Reprinted Ed edition). Cheshire, Conn: Graphics Press USA. 1983. [Reference Source](https://books.google.co.in/books?id=BHazAAAAIAAJ&dq=The+Visual+Display+of+Quantitative+Information+%28Reprinted+Ed+edition%29.+1983&focus=searchwithinvolume&q=The+Visual+Display+of+Quantitative+Information+%28Reprinted+Ed+edition%29.+1983)
