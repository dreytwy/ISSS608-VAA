[
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "View my Tableau profile :"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts.\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\n# First part: ggplot object\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID), #Student's ID\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\n# Next part: ggiraph\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved.\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n# Customising the tooltip\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # Student's ID\n  \"\\n Class = \", exam_data$CLASS)) # Student's Class\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#customising-tooltip-style",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\n\nTooltip: Black Background and White Bolded Font\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n# Customising Tooltip style\ntooltip_css &lt;- \"background-color:black; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\nTooltip: White Background and Black Bolded Font\nNotice that the earlier background colour of the tooltip is black and the font colour is white and bold.\nWe can change it to a White Background and Black fonts here:\n\n\n\n\n\n\n\n\nTooltip: Pink Background with Rounded Borders and White Fonts\nNotice that the background colour of the tooltip is pink with round borders and the font colour is white.\nThe student’s ID and Class will be displayed.\n\n# Customising Tooltip style\ntooltip_css &lt;- \"background-color:#d8118c;color:white;padding:5px;border-radius:3px;\"\n\n# Combined Student ID and Class \nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # Student's ID\n  \"\\n Class = \", exam_data$CLASS)) # Student's Class\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = exam_data$tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip. The bar charts are also sorted by ascending math scores.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\n# Reorder RACE by mean MATHS score\nexam_data &lt;- exam_data %&gt;%\n  group_by(RACE) %&gt;%\n  mutate(mean_math = mean(MATHS, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(RACE = reorder(RACE, mean_math))\n\n# Plot\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,\n    fill=\"aquamarine2\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )+  \n  ggtitle(\"Maths scores by Races\")\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),        # data_id added here to Class     \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n    options = list(\n    opts_hover(css = \"fill:black;\")\n  )\n)    \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;” but black has been used here for better contrast."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#styling-hover-effect",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #333333;\"),  #CSS codes here for Color Hex Gray20\n    opts_hover_inv(css = \"opacity:0.2;\") #CSS codes here for opaque\n  )                                        \n)       \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\nThere are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,           # tooltip added here to Class   \n        data_id = CLASS),          # data_id added here to Class      \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #000080;\"),  #CSS Codes here for color hex NavyBlue\n    opts_hover_inv(css = \"opacity:0.2;\") #CSS Codes here for opaque\n  )                                        \n)     \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#click-effect-with-onclick",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nClick actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+ \n  theme_dark()+\n  ggtitle(\"Dotplot of Math scores\") \n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+ \n  theme_dark()+\n  ggtitle(\"Dotplot of English scores\") \n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\n\nColour and Colour Palette\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). Colour palette is customised as well with Set2.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,         \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\")\n\n\n\n\n\nData Labels on Hover\nGender and Science scores may be added on Hover.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\",\n        #Hover text\n        text=~paste(\"Gender: \", GENDER, \"&lt;br&gt;Science: \", SCIENCE))\n\n\n\n\n\nChart Title\nChart title may be added\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\",\n        #Hover text\n        text=~paste(\"Gender: \", GENDER, \"&lt;br&gt;Science: \", SCIENCE))%&gt;%\n  layout(title = \"Scatterplot of English by Math Scores\")  # Title"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH, fill=GENDER)) +\n  geom_point(size=2) +\n  ggtitle(\"Scatterplot of Math by English Scores\") + \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH, fill=GENDER)) +\n  geom_point(size=2) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE, fill=GENDER)) +\n  geom_point(size=2) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))%&gt;%\nlayout(\n    showlegend = FALSE)\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk.\n\n\nCustomisation of Main Title and Axis\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\n# First plot (MATHS vs ENGLISH)\np1 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point(size = 2) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + \n  labs(\n    title = \"MATHS by ENGLISH\",\n    x = \"MATH\",  # Shared X-axis label\n    y = \"ENGLISH\"\n  ) \n\n# Second plot (MATHS by SCIENCE)\np2 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = SCIENCE, fill = GENDER)) +\n  geom_point(size = 2) +  \n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + \n  labs(\n    title = \"MATHS by SCIENCE\",\n    x = \"MATH\",  # Shared X-axis label\n    y = \"SCIENCE\"\n  ) \n\n# Convert ggplot to plotly objects\np1_plotly &lt;- ggplotly(p1)\np2_plotly &lt;- ggplotly(p2)\n\n# Combine the plots using subplot\nsubplot(p1_plotly, p2_plotly, nrows = 1, shareX = TRUE, shareY = FALSE) %&gt;%\n  layout(\n    title = \"Scatterplot Comparison\",\n    showlegend = FALSE,\n    xaxis = list(title = \"MATH\"),  # Shared X-axis label\n    yaxis = list(title = \"ENGLISH\"),  \n    yaxis2 = list(title = \"SCIENCE\"), \n    margin = list(t = 80),  # Adjust space\n    autosize = TRUE,  # Allow auto resizing\n    xaxis2 = list(domain = c(0.6, 1)),  # The second plot (SCIENCE) starts here\n    yaxis2 = list(domain = c(0, 1))  # The second plot takes full height\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-sunburst",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-sunburst",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.5 Interactive Sunburst",
    "text": "3.7.5 Interactive Sunburst\nIn the code chunk, levels are created for each Subject (Maths, English, Science):\n\nLevel 1: Pass/Fail\nLevel 2: Passing Grades (A*, A, B, C)\nLevel 3: Race Breakdown (Chinese, Malay, Indian, Others)\nLevel 4: Class (3A to 3I)\n\nInstead of a typical sunburst, this interactive sunburst allows user interaction on clicks. Hover effects have been added as well.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# Function to prepare data for plotly sunburst with RACE and CLASS\nprepare_plotly_interactive_data_actual &lt;- function(df, subject_col) {\n  df_processed &lt;- df %&gt;%\n    mutate(\n      Subject = subject_col,\n      PassFail = ifelse(.data[[subject_col]] &gt;= 50, \"Pass\", \"Fail\"),\n      Grade = case_when(\n        .data[[subject_col]] &lt; 50 ~ \"Fail\",\n        .data[[subject_col]] &gt;= 50 & .data[[subject_col]] &lt; 60 ~ \"C\",\n        .data[[subject_col]] &gt;= 60 & .data[[subject_col]] &lt; 70 ~ \"B\",\n        .data[[subject_col]] &gt;= 70 & .data[[subject_col]] &lt; 90 ~ \"A\",\n        .data[[subject_col]] &gt;= 90 ~ \"A*\"\n      )\n    )\n\n  # Prepare data for the first level (Subject -&gt; Pass/Fail)\n  level1 &lt;- df_processed %&gt;%\n    group_by(Subject, PassFail) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, sep = \"-\"),\n      parents = Subject,\n      labels = PassFail\n    )\n\n  # Prepare data for the second level (Pass -&gt; Grade)\n  level2_pass &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, sep = \"-\"),\n      parents = paste(Subject, PassFail, sep = \"-\"),\n      labels = Grade\n    )\n\n  # Prepare data for the third level (Grade -&gt; RACE)\n  level3_race &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, sep = \"-\"),\n      labels = RACE\n    )\n\n  # Prepare data for the fourth level (RACE -&gt; CLASS)\n  level4_class &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE, CLASS) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      labels = CLASS\n    )\n\n  # Root level\n  root &lt;- data.frame(\n    ids = unique(df_processed$Subject),\n    labels = unique(df_processed$Subject),\n    parents = NA,\n    Count = n_distinct(df_processed$ID)\n  )\n\n  plotly_df &lt;- bind_rows(root, level1, level2_pass, level3_race, level4_class)\n  return(plotly_df)\n}\n\n# Define the subjects to visualize\nsubjects_to_visualize &lt;- c(\"MATHS\", \"ENGLISH\", \"SCIENCE\")\nplot_titles &lt;- c(\"Maths\", \"English\", \"Science\")\n\n# Create the plotly figure\nfig_interactive_actual &lt;- plot_ly()\n\n# Add sunburst for the first subject (MATHS)\ninteractive_data_subject1 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject1,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 0),\n    maxdepth = 2,\n    name = plot_titles[1] # Subtitle\n  )\n\n# Add sunburst for the second subject (ENGLISH)\ninteractive_data_subject2 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject2,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 1),\n    maxdepth = 2,\n    name = plot_titles[2] # Subtitle\n  )\n\n# Add sunburst for the third subject (SCIENCEC)\ninteractive_data_subject3 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject3,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 2),\n    maxdepth = 2,\n    name = plot_titles[3] # Subtitle\n  )\n\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  layout(\n    title = \"Performance Breakdown by Subject\", # Main title\n    grid = list(columns = 3, rows = 1),\n    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title\n    sunburstcolorway = c(\n      \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n      \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\",\n      \"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\n      \"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"\n    ),\n    extendsunburstcolors = TRUE\n  )\n\nfig_interactive_actual\n\n\n\nHow to use the interactive chart to drill deeper?:\n\nChoose a Subject, click “Pass”.\nClick a grade (from A*, A, B, C).\nClick a race (from Chinese, Malay, Indian, Others).\nClick a class (from 3A to 3I).\n\nClicking on the middle circle at any level after the root level will allow you to exit one level.\n\n3.7.5.1 Adding Percentage Figures\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# Function to prepare data for plotly sunburst with RACE and CLASS\nprepare_plotly_interactive_data_actual &lt;- function(df, subject_col) {\n  df_processed &lt;- df %&gt;%\n    mutate(\n      Subject = subject_col,\n      PassFail = ifelse(.data[[subject_col]] &gt;= 50, \"Pass\", \"Fail\"),\n      Grade = case_when(\n        .data[[subject_col]] &lt; 50 ~ \"Fail\",\n        .data[[subject_col]] &gt;= 50 & .data[[subject_col]] &lt; 60 ~ \"C\",\n        .data[[subject_col]] &gt;= 60 & .data[[subject_col]] &lt; 70 ~ \"B\",\n        .data[[subject_col]] &gt;= 70 & .data[[subject_col]] &lt; 90 ~ \"A\",\n        .data[[subject_col]] &gt;= 90 ~ \"A*\"\n      )\n    )\n\n  # Prepare data for the first level (Subject -&gt; Pass/Fail)\n  level1 &lt;- df_processed %&gt;%\n    group_by(Subject, PassFail) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, sep = \"-\"),\n      parents = Subject,\n      labels = PassFail\n    )\n\n  # Prepare data for the second level (Pass -&gt; Grade)\n  level2_pass &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, sep = \"-\"),\n      parents = paste(Subject, PassFail, sep = \"-\"),\n      labels = Grade\n    )\n\n  # Prepare data for the third level (Grade -&gt; RACE)\n  level3_race &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, sep = \"-\"),\n      labels = RACE\n    )\n\n  # Prepare data for the fourth level (RACE -&gt; CLASS)\n  level4_class &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE, CLASS) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      labels = CLASS\n    )\n\n  # Root level\n  root &lt;- data.frame(\n    ids = unique(df_processed$Subject),\n    labels = paste0(unique(df_processed$Subject), \"\\n \"), \n    parents = NA,\n    Count = n_distinct(df_processed$ID)\n  )\n\n  plotly_df &lt;- bind_rows(root, level1, level2_pass, level3_race, level4_class) %&gt;%\n    group_by(parents) %&gt;%\n    mutate(percentage = Count / sum(Count, na.rm = TRUE)) %&gt;%\n    ungroup()\n\n  return(plotly_df)\n}\n\n# Define the subjects to visualize\nsubjects_to_visualize &lt;- c(\"MATHS\", \"ENGLISH\", \"SCIENCE\")\nplot_titles &lt;- c(\"Maths\", \"ENG\", \"SCI\")\n\n# Create the plotly figure\nfig_interactive_actual &lt;- plot_ly()\n\n# Add sunburst for the first subject (MATHS)\ninteractive_data_subject1 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject1,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 0),\n    maxdepth = 2,\n    name = plot_titles[1]\n  )\n\n# Add sunburst for the second subject (ENGLISH)\ninteractive_data_subject2 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject2,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 1),\n    maxdepth = 2,\n    name = plot_titles[2]\n  )\n\n# Add sunburst for the second subject (SCIENCE)\ninteractive_data_subject3 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject3,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 2),\n    maxdepth = 2,\n    name = plot_titles[3]\n  )\n\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  layout(\n    title = \"Performance Breakdown by Subject\",\n    grid = list(columns = 3, rows = 1),\n    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title\n    sunburstcolorway = c(\n      \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n      \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\",\n      \"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\n      \"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"\n    ),\n    extendsunburstcolors = TRUE\n  )\n\nfig_interactive_actual"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nThe Plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS, fill=GENDER)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)     \n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#ggiraph",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.9.1 ggiraph",
    "text": "3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#plotly-for-r",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.9.2 plotly for R",
    "text": "3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\nMarginal Histograms — They’re Not Just for Scatterplots"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2.1 Install and launching R packages",
    "text": "1.2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\nLoad the required libraries\n\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(magick)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2.2 Importing the data",
    "text": "1.2.2 Importing the data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package and stores it in exam_data in R Studio.\n\nexam_data &lt;-read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nThe data consists of year end examination grades of a cohort of primary 3 students from a local school.\nThe dataframe has 7 columns and 322 rows. Four of the columns contains categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nR Graphics is the built-in R plotting method. By comparing the plots between R Graphics and ggplot via a histogram, we see some differences.\n\nR GraphicsGGPLOT2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nThe code is simpler for R Graphics as compared to ggplot.\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill=\"mediumorchid\")+\n  ggtitle(\"Distribution of Maths Scores\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nHowever, here are a few advantages of ggplot2:\n\nNo need to make own legends.\nAble to perform faceting (1.9 Essential Grammatical Elements in ggplot2: Facets) to display data in multiple subplots.\nAble to use tidydata to do exploratory data analysis through data.table or dplyr.\nggplot2 looks better\n\nAs pointed out by Hadley Wickham :\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5)+\nggtitle(\"Barplot of Races by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, fill = \"darkseagreen1\")+  \nggtitle(\"Dotplot of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n1) scale_y_continuous() is used to turn off the y-axis, and\n2) binwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5, fill = \"darkseagreen1\", alpha = 0.5) +\nggtitle(\"Dotplot of Maths Scores\")+\nscale_y_continuous(NULL, breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"darkorchid2\") +  \nggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic(). R Color Brewer is used to set a palette colour called Set2.\n\n\nhst&lt;-ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") +  \n  ggtitle(\"Distribution of Maths Scores by Gender\")\nhst + scale_fill_brewer(palette = \"Set2\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_density",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6 Geometric Objects: geom_density",
    "text": "1.7.6 Geometric Objects: geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()  +  \nggtitle(\"Density plot of Maths Scores\")\n\n\n\n\n\n\n\n\n\nTwo density lines\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Density plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot(aes(fill = GENDER), alpha = 0.5)  +  \nggtitle(\"Boxplot of Maths Scores by Gender\")\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5, notch=TRUE)+  \nggtitle(\"Notched plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Violin plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH,\n           color=GENDER)) +\n  geom_point(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Scatter plot of Maths by English Scores with Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data = exam_data, \n       aes(x = GENDER, y = MATHS)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +   # color-filled \n  geom_jitter(aes(color = GENDER),              \n              width = 0.2, size = 0.8, alpha = 0.7) +\n  ggtitle(\"Maths Scores by Gender\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5)+\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)    +\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) +\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(size=0.5) +\n  ggtitle(\"Scatter plot of Maths by English Scores by Gender\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\n\nOverriding best fit smoothing method\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, \n              linewidth=0.5)+\n  ggtitle(\"Scatter plot of Maths by English Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,aes(fill = GENDER), alpha = 0.5) +\n    facet_wrap(~ CLASS)       +\n  ggtitle(\"Trellis plot of Maths Scores for different Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,aes(fill = GENDER), alpha = 0.5) +\n    facet_grid(~ CLASS)      +\n  ggtitle(\"Trellis plot of Maths Scores for different Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5)    +\n  ggtitle(\"Bar plot for Races\") \n\n\n\n\n\n\n\n\n\nFlipping into horizontal bar chart\nThe code chunk below flips the vertical bar chart into horizontal bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5) +\n  coord_flip() +\n  ggtitle(\"Bar plot for Races\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, linewidth=0.5)  +\n  ggtitle(\"Scatter plot of Math by English Scores with Gender\") \n\n\n\n\n\n\n\n\n\nStarting the axis ranges from 0-100\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"Scatter plot of Math by English Scores with Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\n\nGray\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\nClassic\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nMinimal\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nBlack and White\nThe code chunk below plot a horizontal bar chart using theme_bw()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course.   These are my posts for Hands-On Exercises:\n\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Published - Oldest\n      \n      \n        Published - Newest\n      \n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nPublished\n\n\n\n\n\n\n\n\n1. A Layered Grammar of Graphics: ggplot2 methods\n\n\nApr 18, 2025\n\n\n\n\n\n\n2. Beyond ggplot2 Fundamentals\n\n\nApr 24, 2025\n\n\n\n\n\n\n3a. Programming Interactive Data Visualisation with R\n\n\nMay 1, 2025\n\n\n\n\n\n\n3b. Programming Animated Statistical Graphics with R\n\n\nMay 1, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Audrey!\nEducation\nSingapore Management University\nMasters of IT in Business (Data Science & Analytics)\nExperience\nAnalytics | Finance | Risk & Compliance\nCPA certified\nEnjoys\nCoffee"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, other R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nploty: an R package for creating interactive web-based graphs.\ndplyr: an R package for data manipulation using a consistent grammar of data transformation. Part of tidyverse and used for filtering, selecting, mutating, summarizing, and joining data.\nggplot2: an R package for creating data visualizations using the Grammar of Graphics.\nRColorBrewer: an R package for creating color palettes\nmagick: an R package for image processing to read, edit, compose, and convert images easily.\nggdist: an R package for visualizing distributions and uncertainty. It provides tools like stat_halfeye(), stat_pointinterval(), etc., for making raincloud plots.\ncowplot: an R package for enhancing ggplot2 output, especially when combining multiple plots.\nggExtra: an R package for arranging multiple grid-based plots into a single view.\n\nCode chunk below checks if these packages have been installed and also will load them onto the working R environment.\n\npacman::p_load(\n  ggrepel, ggthemes,\n  hrbrthemes, patchwork,\n  tidyverse, plotly,\n  gridExtra, dplyr,\n  ggplot2, RColorBrewer,\n  magick, ggdist,\n  cowplot, ggExtra\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package and stores it in exam_data in R Studio.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\nThe code chunk below allows a glimpse into exam_data by their 7 column headers.\n\n# Display the structure of your exam_data\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nExample for geom_label_repel\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(color= \"darkblue\") +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID, \n                   colour = GENDER),\n                   fontface = \"bold\")+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe Economist Theme\nIn the example below, The Economist theme is used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\",\n                 fill=\"cyan3\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nWall Street Journal Theme\nIn the example below, The Wall Street Journal theme is used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np&lt;-ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"cyan3\") +\n  theme_wsj()\n\n# Add title\np &lt;- p + labs(title = \"Distribution of English Scores\")\np + theme(\n  plot.title = element_text(color = \"black\", size = 15, face = \"bold\")\n)\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n             aes(x = MATHS,\n                 fill=GENDER)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\") +\n  ggtitle(\"Distribution of Maths scores by Gender\") +\n  theme_ipsum(base_family = \"sans\") \n\n# Add color palette\np + scale_fill_brewer(palette = \"Pastel1\")\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nIncrease font size/ axis label/ remove grid lines/ add subtitle\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n             aes(x = MATHS,\n                 fill=GENDER)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\", base_family = \"sans\")\n\n# Add color palette and titles\np + scale_fill_brewer(palette = \"Pastel1\") + \n  labs(title = \"Distribution of Math Scores\",\n              subtitle = \"(by gender)\") + \n  theme(\n  plot.title = element_text(color = \"black\", size = 15, face = \"bold\"),\n  plot.subtitle = element_text(color = \"grey34\"),\n)\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nRoman Numerals- Uppercase\n‘I’ for uppercase and ‘i’ for lower case roman numerals\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\nLatin Letters- Uppercase\n‘A’ for uppercase and ‘a’ for lower case Latin letters\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\nArabic Numerals\n‘1’ for Arabic numerals\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nInsert P2 to Top Left\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\nInsert P1 to Bottom Right\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p1, \n                   left = 0.6, \n                   bottom = 0, \n                   right = 1, \n                   top = 0.4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()&\n  theme(\n    plot.title = element_text(size = 8),       # Adjust main patchwork title size\n    plot.subtitle = element_text(size = 8),    # Adjust main patchwork subtitle size \n    plot.caption = element_text(size = 7),     # Adjust main patchwork caption size \n    strip.text = element_text(size = 8),        # Adjust facet label sizes \n    axis.title.x = element_text(size = 8),       # Adjust x-axis label sizes\n    axis.title.y = element_text(size = 8)        # Adjust y-axis label sizes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visualising-patterns-andor-distributions",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visualising-patterns-andor-distributions",
    "title": "Hands-on Exercise 2",
    "section": "2.5.7 Visualising Patterns and/or Distributions",
    "text": "2.5.7 Visualising Patterns and/or Distributions\n\n2.5.7.1 Creating a Highlight Table\n\nThe highlight table/ heatmap, uses colour coding to allow quick identification of numbers within a table. It presents patterns, trends, and relationships within the data.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculate percentage scores\nexam_data_percentage &lt;- exam_data %&gt;%\n  mutate(\n    ENGLISH_PERCENT = (ENGLISH / 100) * 100,\n    MATHS_PERCENT = (MATHS / 100) * 100,\n    SCIENCE_PERCENT = (SCIENCE / 100) * 100\n  )\n\n# Create the highlight table data\nhighlight_table_data &lt;- exam_data_percentage %&gt;%\n  group_by(CLASS) %&gt;%\n  summarise(\n    MATHS = round(mean(MATHS_PERCENT), 1),\n    ENGLISH = round(mean(ENGLISH_PERCENT), 1),\n    SCIENCE = round(mean(SCIENCE_PERCENT), 1)\n  ) %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE), \n               names_to = \"Subject\", \n               values_to = \"Average_Percentage\") %&gt;%\n  pivot_wider(names_from = \"Subject\", \n              values_from = \"Average_Percentage\")\n\n# Create the highlight table using ggplot2\nhighlight_table_plot &lt;- ggplot(highlight_table_data %&gt;%\n                                pivot_longer(\n                                  cols = c(ENGLISH, \n                                           MATHS,\n                                           SCIENCE),\n                                  names_to = \"Subject\",\n                                  values_to= \"Average_Percentage\"),\n                               aes(x = Subject, \n                                    y = factor(CLASS, levels = rev(c(\"3A\", \"3B\", \"3C\", \"3D\", \"3E\", \"3F\", \"3G\", \"3H\", \"3I\"))), \n                                   fill= Average_Percentage)) +\n  geom_tile(color = \"white\") +\n  geom_text(aes(label = Average_Percentage), color = \"black\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"royalblue3\") +\n  labs(\n    title = \"Average Percentage Scores of Subjects by Class\", \n    fill = \"Avg. Percentage\") +\n  theme_minimal() +\n  theme(axis.title = element_blank(),\n        panel.grid = element_blank(),\n        panel.background = element_blank(),\n        axis.ticks = element_blank())\nprint(highlight_table_plot)\n\n\n\nThe highlight table here shows the average scores for each class by their subject. The colour gradient shows the scores from low (lighter colour) to high (darker colour).\nWe may infer that the average percentage scores for each subject from the students in Class 3A (darker blue) are higher than in 3I (lighter blue). We may continue to compare between subjects and classes in this manner.\n\n\n2.5.7.2 Combining Scatterplot with Marginal Histograms\nA highlight table or scatterplot can be combined with marginal histograms.\n\nHere, the scatterplot visualizes the relationship between two subjects.\nThe marginal histogram provides a side-by-side view of the distribution of each subject in the scatterplot.\n\n\nMaths vs Science: Code & PlotMaths vs English: Code & PlotEnglish vs Science: Code & Plot\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x = MATHS, \n                           y = SCIENCE))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"Maths vs Science Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x = MATHS, \n                           y = ENGLISH))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"Maths vs English Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x =ENGLISH, \n                           y =SCIENCE))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"English vs Science Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n\nTrend: There appears to be a positive trend for each subject. Students that do well in one appear to do well in the other.\nSkewness: Slightly negatively skewed distribution (longer left tail) for Math, Science and English.\nData concentration: Math [75-90 range], Science [50-75], English [60-80]. Fewer students at both ends of higher and lower scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-raincloud-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-raincloud-plots",
    "title": "Hands-on Exercise 2",
    "section": "2.5.8 Creating Raincloud plots",
    "text": "2.5.8 Creating Raincloud plots\nShortcomings of barplots:\nThe barplot with whisker error bars to visualise the mean or median and the standard error may be prone to distortion, fail to represent underlying data parameter inferences, lead to misleading inferences of magnitude of difference between conditions, and may obscure difference in distributions (Allen et al., 2021).\nRemedies:\n\nAdd jittered raw data points to the standard boxplot and +/- standard error scheme.\nAdd dotplots tosupplement visualizations of central tendency and error, but at the risk of added complexity due to the dependence of such plots on choices such as bin-width and dot size, and the risk of reading issues when there are many observations.\nViolin plot overlaid with boxplots or similar. However, there is little to be gained statistically, by mirroring the violin plot, and therefore violating the philosophy of minimising the “data-ink ratio” (Allen et al., 2021; Tufte, 1983).\n\nClick to see detailed information on shortcomings and remedies of barplot.\nSolution to limitations:\nThe raincloud plot combines various plots, to address the aforementioned limitations in an intuitive, modular, and statistically robust format. Raincloud plots combine a ‘split-half violin’, raw jittered data points, and a standard visualization of central tendency (i.e., mean or median) and error, such as a boxplot (Allen et al., 2021).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n# plot\np4 &lt;- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +\n  geom_flat_violin(\n    position = position_nudge(x = 0.25),\n    adjust = 2,\n    trim = TRUE\n  ) +\n  geom_point(\n    position = position_jitter(width = 0.15),\n    size = 0.25\n  ) +\n  geom_boxplot(\n    aes(x = as.numeric(group) + 0.25, y = score),\n    outlier.shape = NA,\n    alpha = 0.3,\n    width = 0.1,\n    colour = \"BLACK\",\n    position = position_nudge(x = 0)\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +  # palette for the fill\n  scale_color_brewer(palette = \"Set2\") +  # palette for the color\n  guides(fill = \"none\", colour = \"none\") +\n  ylab(\"Score\") +\n  xlab(\"Subject\") +\n  theme_cowplot() +\n  coord_flip() +\n  ggtitle(\"Raincloud Plot\")\n\nsuppressWarnings(plot(p4))  # Suppress warnings\n\n\n\nThe raincloud plot above visualised the following elements:\n\nSplit-half violin (density plot): Distribution of the data for each subject, filled with color, and is a smoothed density estimate of the data.\nBoxplot: Overlaid on top of the violin, showing the quartiles, median, and outliers for the data.\nRaw jittered data points (“rain”): Individual data points (“raindrop”) shown as small, scattered dots. Shows the data points distribution within each subject.\n\n\n2.5.8.1 Drilling Deeper into Interactive Rain Points\nWe may dissect the plot without the violin density plot. Then using tooltip we can hover over each individual “raindrop” to show the student’s ID and Class per subject, in an interactive manner.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# tooltip\nsimdat$tooltip &lt;- paste0(\"ID = \", simdat$ID, \"\\nClass = \", simdat$CLASS)\n\n# Create the plot\np4_interactive &lt;- suppressWarnings({\n  p4 &lt;- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +  geom_point(\n      aes(text = tooltip),  # Add tooltip in the 'text' aesthetic\n      position = position_jitter(width = 0.15),\n      size = 0.25\n    ) +\n    geom_boxplot(\n      aes(x = as.numeric(group) + 0.25, y = score),\n      outlier.shape = NA,\n      alpha = 0.3,\n      width = 0.1,\n      colour = \"BLACK\",\n      position = position_nudge(x = 0)\n    ) +\n    scale_fill_brewer(palette = \"Set2\") +  # palette for the fill\n    scale_color_brewer(palette = \"Set2\") +  # palette for the color\n    guides(fill = \"none\", colour = \"none\") +\n    ylab(\"Score\") +\n    xlab(\"Subject\") +\n    theme_cowplot() +\n    coord_flip() +\n    ggtitle(\"Dissected Raincloud Plot\")\n\n  # Convert to interactive plotly plot with the tooltip\n  ggplotly(p4, tooltip = \"text\")  # Use 'text' for hover tooltip\n})\n\n# Display the interactive plot\np4_interactive\n\n\n\nIt is interesting to note that Student 36 from class 3A scored top for Science, Math, and English."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.1.1 Basic concepts of animation",
    "text": "3.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#terminology",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.1.2 Terminology",
    "text": "3.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, ask the question: Does it makes sense to go through the effort?\n\nIf conducting an exploratory data analysis, a animated graphic may not be worth the time investment.\nHowever, when giving a presentation, a few well-placed animated graphics can help an audience connect with the topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.2.1 Loading the R packages",
    "text": "3.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#importing-the-data",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.2.2 Importing the data",
    "text": "3.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.undefined\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.3.1 Building a static population bubble plot",
    "text": "3.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.3.2 Building the animated bubble plot",
    "text": "3.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\nString literal interpolation in title is also used to dynamically update the plot information based on the frame.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-multiple-animated-subplots",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-multiple-animated-subplots",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.3.3 Building multiple animated subplots",
    "text": "3.3.3 Building multiple animated subplots\nWe can also create multiple animated bubble subplots by Continent.\nIn the code chunk below,\n\nfacet_warp() is used on Continent.\n\n\nggplot(globalPop, aes(Old, Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~Continent) +\n  # gganimate\n  labs(title = 'Year: {frame_time}', , \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')\n\nThe animated bubble charts"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "3.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "3B. Programming Animated Statistical Graphics with R",
    "section": "3.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "3.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  }
]