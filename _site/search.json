[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background-and-questions",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#background-and-questions",
    "title": "Take-home_Ex02",
    "section": "1.1 Background and Questions",
    "text": "1.1 Background and Questions\nIn this study, we tackled Mini-case 3 of VAST Challenge 2025.\n\n1.1.1 Background\nOver the past decade, the community of Oceanus has faced numerous transformations and challenges evolving from its fishing-centric origins. Following major crackdowns on illegal fishing activities, suspects have shifted investments into more regulated sectors such as the ocean tourism industry, resulting in growing tensions. This increased tourism has recently attracted the likes of international pop star Sailor Shift, who announced plans to film a music video on the island.\nClepper Jensen, a former analyst at FishEye and now a seasoned journalist for the Hacklee Herald, has been keenly observing these rising tensions. Recently, he turned his attention towards the temporary closure of Nemo Reef. By listening to radio communications and utilizing his investigative tools, Clepper uncovered a complex web of expedited approvals and secretive logistics. These efforts revealed a story involving high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group The Green Guardians, pointing towards a story of corruption and manipulation.\nOur task is to develop new and novel visualizations and visual analytics approaches to help Clepper get to the bottom of this story.\n\n\n1.1.2 Questions\nClepper diligently recorded all intercepted radio communications over the last two weeks. With the help of his intern, they have analyzed their content to identify important events and relationships between key players. The result is a knowledge graph describing the last two weeks on Oceanus. Clepper and his intern have spent a large amount of time generating this knowledge graph, and they would now like some assistance using it to answer the following questions.\n\nQuestion 2\nClepper has noticed that people often communicate with (or about) the same people or vessels, and that grouping them together may help with the investigation.\n2.a Use visual analytics to help Clepper understand and explore the interactions and relationships between vessels and people in the knowledge graph.\n2.b Are there groups that are more closely associated? If so, what are the topic areas that are predominant for each group?\n-For example, these groupings could be related to: Environmentalism (known associates of Green Guardians), Sailor Shift, and fishing/leisure vessels.\nQuestion 4\nClepper suspects that Nadia Conti, who was formerly entangled in an illegal fishing scheme, may have continued illicit activity within Oceanus.\n4.a Through visual analytics, provide evidence that Nadia is, or is not, doing something illegal.\n4.b Summarize Nadia’s actions visually. Are Clepper’s suspicions justified?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-data",
    "title": "Take-home_Ex02",
    "section": "1.2 The Data",
    "text": "1.2 The Data\nWe used the dataset provided by VAST Challenge. We were provided a knowledge graph created from transcripts of boat radio communications for two weeks on Oceanus. We were asked to identify people, their roles, and the events and locations they talked to get to the bottom of the story. This graph is a network data that contains nodes that represent the different entities, events, and relationships, and edges which represent the relationships between different nodes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#methodology",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#methodology",
    "title": "Take-home_Ex02",
    "section": "1.3 Methodology",
    "text": "1.3 Methodology\nTo answer these questions, we investigated the communications and relationships among entities. We did this by creating visualisation such as subgraphs of networks, chord diagrams, timeline plots, wordclouds, and circular bar charts. Then we tabled the findings, and discussion/ interpretations.\nBefore we start, we would like to address the difference in the usage of the English language as we mainly use British English in our studies while the data was prepared in American English. For instance, harbor and harbour were synonymous in this study."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-packages",
    "title": "Take-home_Ex02",
    "section": "2.1 Loading Packages",
    "text": "2.1 Loading Packages\n\n\n\nUtility Tools\nGraphing Tools\n\n\n\n\n\njsonlite - To parse JSON\ntidyverse - Data science tools\nggtext - Tools for text formatting\nknitr - For better table displays\nlubridate - For processing date and time\nhms - For durations\nscales - For breaks and labels\ntidytext - For functions text mining\ndplyr - For transforming, filtering, summarising data\ntm - For text mining\nSnowBallC - For Porter’s word stemming\nmagick - For graphics and image processing\nSmartEDA - EDA with some graphing\nstringr - For wrapping\nreadr - For reading rectangular data\nreactable - For interactive data tables\n\n\npatchwork - For combining ggplot plots\nggraph - For plotting network data\ntidygraph - For graph manipulations\nigraph - Contains functions for network analysis\nggiraph - Interactive plots\nplotly - Interactive plots\nwordcloud- For frequency representation of words\nggh4x - For axis, strip, and facet customizations\nvisNetwork - For interactive visualisation of networks.\nggplot2 - For building plots\nRColorBrewer - Colour schemes for graphics\ncirclize - For circular plots\nggalluvial - For alluvial diagrams\nwordcloud2 - For creating wordclouds\n\n\n\n\nThe code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R.\n\n\nShow the code\npacman::p_load(\n  jsonlite, tidyverse, ggtext,\n  knitr, lubridate, hms, scales,\n  tidytext, dplyr, tm, SnowballC,\n  magick, patchwork, ggraph, \n  tidygraph, igraph, ggiraph, \n  SmartEDA, plotly, wordcloud, \n  ggh4x, visNetwork, ggplot2,\n  RColorBrewer, circlize, \n  stringr, wordcloud2, ggalluvial,\n  reactable, readr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-data",
    "title": "Take-home_Ex02",
    "section": "2.2 Loading Data",
    "text": "2.2 Loading Data\nIn the code chunk below, fromJSON() of jsonlite package was used to import mc3.json file into R and save the output object.\n\n\nShow the code\nmc3_data &lt;- fromJSON(\"data/mc3_graph.json\")\nmc3_schema &lt;- fromJSON(\"data/MC3_schema.json\")\n\n\nIt contains graph data, where nodes can be accessed via nodes and edges via links. This dataset had many columns but we filtered the relevant data during wrangling."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#defining-common-variables",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#defining-common-variables",
    "title": "Take-home_Ex02",
    "section": "2.3 Defining common variables",
    "text": "2.3 Defining common variables\nWe will also set some values for consistency throughout all graphs.\n\nStyle and ColoursOthers\n\n\n\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",\n  \"Relationship\" = \"#AF8DC3\",\n  \"Nadia Conti\" = \"red\"\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",\n  \"Relationship\" = \"square x\",\n  \"Nadia Conti\" = \"star\"\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n\n\n\nCONFIGS = list(\n  default_seed = 1234 # For reproduceability\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspecting-knowledge-graph-structure",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#inspecting-knowledge-graph-structure",
    "title": "Take-home_Ex02",
    "section": "2.4 Inspecting knowledge graph structure",
    "text": "2.4 Inspecting knowledge graph structure\nIn the code chunk below glimpse() is used to reveal the structure of mc3_data knowledge graph.\n\nThe CodeThe Result\n\n\nglimpse(mc3_data)\n\n\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame': 1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':   1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame': 3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "title": "Take-home_Ex02",
    "section": "2.5 Extracting the edges and nodes tables",
    "text": "2.5 Extracting the edges and nodes tables\nNext, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from mc3 tibble dataframe into two separate tibble dataframes called mc3_nodes_raw and mc3_edges_raw respectively.\n\nThe CodeNodes structureEdges structure\n\n\n\nmc3_nodes_raw &lt;- as_tibble(mc3_data$nodes)\nmc3_edges_raw &lt;- as_tibble(mc3_data$edges)\n\nWe also looked into the nodes and edges structure.\n\n\n\nExpData(data=mc3_nodes_raw,type=2)\n\n   Index     Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1              type     character     1159             0          0.000\n2      2             label     character     1159             0          0.000\n3      3              name     character       72          1087          0.938\n4      4          sub_type     character     1159             0          0.000\n5      5                id     character     1159             0          0.000\n6      6         timestamp     character      770           389          0.336\n7      7   monitoring_type     character       70          1089          0.940\n8      8          findings     character       70          1089          0.940\n9      9           content     character      584           575          0.496\n10    10   assessment_type     character       33          1126          0.972\n11    11           results     character       32          1127          0.972\n12    12     movement_type     character       33          1126          0.972\n13    13       destination     character       41          1118          0.965\n14    14  enforcement_type     character       21          1138          0.982\n15    15           outcome     character       19          1140          0.984\n16    16     activity_type     character        4          1155          0.997\n17    17      participants       integer        1          1158          0.999\n18    18   thing_collected    data.frame    -2314          2316       1158.000\n19    19         reference     character        1          1158          0.999\n20    20              date     character        5          1154          0.996\n21    21              time     character        3          1156          0.997\n22    22   friendship_type     character        2          1157          0.998\n23    23   permission_type     character       55          1104          0.953\n24    24        start_date     character       90          1069          0.922\n25    25          end_date     character        6          1153          0.995\n26    26       report_type     character       19          1140          0.984\n27    27   submission_date     character       22          1137          0.981\n28    28 jurisdiction_type     character       13          1146          0.989\n29    29   authority_level     character        7          1152          0.994\n30    30 coordination_type     character       73          1086          0.937\n31    31  operational_role     character       38          1121          0.967\n   No_of_distinct_values\n1                      3\n2                     92\n3                     73\n4                     25\n5                   1159\n6                    612\n7                      6\n8                     70\n9                    581\n10                     4\n11                    33\n12                     4\n13                    26\n14                     3\n15                    20\n16                     3\n17                     1\n18                     2\n19                     2\n20                     6\n21                     4\n22                     3\n23                     4\n24                    69\n25                     6\n26                     4\n27                    23\n28                    13\n29                     3\n30                    53\n31                    35\n\n\n\n\n\nExpData(data=mc3_edges_raw,type=2)\n\n  Index Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1     1            id     character     3169            57          0.018\n2     2   is_inferred       logical     3226             0          0.000\n3     3        source     character     3226             0          0.000\n4     4        target     character     3226             0          0.000\n5     5          type     character     2204          1022          0.317\n  No_of_distinct_values\n1                  3170\n2                     2\n3                  1052\n4                  1156\n5                     4"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nodes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nodes",
    "title": "Take-home_Ex02",
    "section": "3.1 Nodes",
    "text": "3.1 Nodes\n\nNodesDrilling into Node sub_typeEntity subtypesEvent subtypesRelationship subtypes\n\n\nIn the code chunk below, ExpCatViz() of SmartEDA package is used to reveal the frequency distribution of all categorical fields in mc3_nodes tibble dataframe.\n\nExpCatViz(data=mc3_nodes_raw,\n          col=\"navyblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below uses ggplot2 functions to reveal the frequency distribution of sub_type field of mc3_nodes_raw.\n\n# Step 1: Count and reorder\nmc3_nodes_ordered &lt;- mc3_nodes_raw %&gt;%\n  count(sub_type) %&gt;%\n  arrange((n)) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot with navy bars, sorted, and horizontal\nggplot(mc3_nodes_ordered, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(x = \"Sub_type\", y = \"Count\",\n    title = \"Distribution of Subtypes\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Entity subtypes are filtered.\n\n# Step 1: Filter for type == \"Entity\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Entity\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Entity Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Entity Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the Event subtypes are filtered.\n\n# Step 1: Filter for type == \"Event\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Event\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type)) \n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Event Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Event Subtypes\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, the relationship subtypes are filtered.\n\n# Step 1: Filter for type == \"Relationship\", count sub_type, sort \nrelationship_subtypes &lt;- mc3_nodes_raw %&gt;%\n  filter(type == \"Relationship\") %&gt;%\n  count(sub_type) %&gt;%\n  arrange(n) %&gt;%\n  mutate(sub_type = factor(sub_type, levels = sub_type))\n\n# Step 2: Plot\nggplot(relationship_subtypes, aes(x = sub_type, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    x = \"Relationship Subtype\",\n    y = \"Count\",\n    title = \"Distribution of Relationship Subtypes\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#findings-from-eda",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#findings-from-eda",
    "title": "Take-home_Ex02",
    "section": "3.1.1 Findings from EDA",
    "text": "3.1.1 Findings from EDA\n\nNodesEvent TypesRelationship TypesEntity TypesCourse of Action\n\n\nWe will use the EDA findings to determine data to focus on or eliminate. From the bar charts and the original data on mc3_nodes_raw, it was observed that:\n\nNodes were one of three types (Entity, Event, Relationship), where each of these types have their sub_types. Majority were of event type, followed by relationship, and entity.\n\nThere were 25 subtypes. Communications made up the bulk of the sub_type for Events. Coordinates made up the bulk of the sub_type for Relationship. The additional node sub_types not mentioned in the VAST 2025 MC3 Data Description under Node Attributes were: fishing, communication and coordinates.\n\n\n\n\n\nObservations of EDA from Event types:\n\nFindings field were filled when there were monitoring_type.\nContent refers to radio communication content.\nResults field were filled when there were assessment_type performed.\nWhen there is an enforcement_type of enforcement operations or warnings, there might be an outcome at times.\nWhen there is a movement_type, there might be a place of destination at times.\n\n\n\n\n\nObservations of EDA from Relationship types:\n\nWhen the subtype was coordinate, there were data in the field named coordination_types.\nWhen the subtype was operate, there were data in the field named operational_roles.\nWhen there is a jurisdiction_type, there might be an authority_level.\nThere are only restricted or special access data within permission_types.\nWhen there is a report_type of data transmission or environmental report, there might be a submission_date.\n\n\n\n\n\nObservations of EDA from Entity types:\n\nThe 5 id under Group sub-types were not very useful information.\n\n\n\n\n\nElimination and directed focus:\n\nRelative to the entire dataset, there were little assessment_type (3%), movement_type (2%), enforcement_type (2%), permission_type (4%), report_type (2%), authority_level (1%). We will direct our focus on other areas instead of these.\nThere were no to little useful data in the fields named: activity_type, references, dates, time, and friendship_type. These were not utilised.\nWe directed our focus on Event_Communication, Event_Monitoring, and Event_VesselMovement."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#edges",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#edges",
    "title": "Take-home_Ex02",
    "section": "3.2 Edges",
    "text": "3.2 Edges\nThe code chunk below used ExpCATViz() of SmartEDA package to reveal the frequency distribution of all categorical fields in mc3_edges_raw tibble dataframe.\n\nFrequency Distribution of Categorical FieldsFilter by type == sent\n\n\n\nExpCatViz(data=mc3_edges_raw,\n          col=\"navyblue\")\n\n[[1]]\n\n\n\n\n\n\n\n\n\nEntities are connected by edges to other Entities via an Event or Relationship node. The one exception to this is the Communication Event subtype, which is additionally linked to either an Event or Relationship node. The type field denotes the connector or edge type for the Entities, Event, and Relationship nodes. The edges are one of these: received, evidence_for, sent, NA.\n\n\n\n# Step 1: Filter for type == \"sent\"\nfiltered_edges &lt;- mc3_edges_raw %&gt;%\n  filter(type == \"sent\") %&gt;%\n  count(source) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(source = factor(source, levels = rev(unique(source))))  # descending \n\n# Step 2: Plot\nggplot(filtered_edges, aes(x = source, y = n)) +\n  geom_col(fill = \"navy\") +\n  coord_flip() +\n  labs(\n    title = \"Distribution of 'sent' Edges type by Source\",\n    x = \"Source\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nWhat we understood from the information provided by Vast Challenge on Directional Edges:\n\nFor relationship as colleagues node or friends node, the node will have arrows/ edges pointing towards the relationship node.\nFor other relationships and events, the direction would be following the source and target."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning-and-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-cleaning-and-wrangling",
    "title": "Take-home_Ex02",
    "section": "4.1 Data Cleaning and Wrangling",
    "text": "4.1 Data Cleaning and Wrangling\n\nCleaning and wrangling nodesUnique Node CountCleaning and wrangling edgesUnique Edges CountOther preparatory work\n\n\n\nconvert values in id field into character data type,\nexclude records with id value are na,\nexclude records with similar id values,\nexclude thing_collected , time , date, friendship_type field, and\nsave the cleaned tibble dataframe into a new tibble datatable called mc3_nodes_cleaned.\n\n\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  select(-thing_collected, -time, -date, -friendship_type)\n\n\n\n\n\n# A tibble: 27 × 2\n   column            unique_count\n   &lt;chr&gt;                    &lt;int&gt;\n 1 id                        1159\n 2 timestamp                  612\n 3 content                    581\n 4 label                       92\n 5 name                        73\n 6 findings                    70\n 7 start_date                  69\n 8 coordination_type           53\n 9 operational_role            35\n10 results                     33\n# ℹ 17 more rows\n\n\n\n\n\nrenamed source and target fields to from_id and to_id respectively,\nconverted values in from_id and to_id fields to character data type,\nexcluded values in from_id and to_id which not found in the id field of mc3_nodes_cleaned,\nexcluded records whereby from_id and/or to_id values are missing, and\nsaved the cleaned tibble dataframe and called it mc3_edges_cleaned.\n\n\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target) %&gt;%\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Parse to_id to get supertype and sub_type for target nodes (e.g., Event_Communication)\n  separate(to_id, into = c(\"to_id_supertype\", \"to_id_sub_type\", \"to_id_num\"),\n           sep = \"_\", remove = FALSE, fill = \"right\", extra = \"merge\") %&gt;%\n  # Filter to ensure from_id and to_id exist in mc3_nodes_cleaned (prevent orphaned edges)\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id) %&gt;%\n  filter(!is.na(from_id), !is.na(to_id))\n\nprint(\"Columns in mc3_edges_cleaned after initial cleaning:\")\n\n[1] \"Columns in mc3_edges_cleaned after initial cleaning:\"\n\nprint(colnames(mc3_edges_cleaned))\n\n[1] \"id\"              \"is_inferred\"     \"from_id\"         \"to_id\"          \n[5] \"to_id_supertype\" \"to_id_sub_type\"  \"to_id_num\"       \"type\"           \n\nprint(\"Head of mc3_edges_cleaned after initial cleaning:\")\n\n[1] \"Head of mc3_edges_cleaned after initial cleaning:\"\n\nprint(head(mc3_edges_cleaned))\n\n# A tibble: 6 × 8\n  id    is_inferred from_id to_id to_id_supertype to_id_sub_type to_id_num type \n  &lt;chr&gt; &lt;lgl&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;     &lt;chr&gt;\n1 2     TRUE        Sam     Rela… Relationship    Suspicious     217       &lt;NA&gt; \n2 3     FALSE       Sam     Even… Event           Communication  370       sent \n3 5     TRUE        Sam     Even… Event           Assessment     600       &lt;NA&gt; \n4 3013  TRUE        Sam     Rela… Relationship    Colleagues     430       &lt;NA&gt; \n5 &lt;NA&gt;  TRUE        Sam     Rela… Relationship    Friends        272       &lt;NA&gt; \n6 &lt;NA&gt;  TRUE        Sam     Rela… Relationship    Colleagues     215       &lt;NA&gt; \n\n\n\n\n\n# Find the number of unique types in each column\nunique_counts &lt;- mc3_edges_cleaned %&gt;%\n  summarise_all(n_distinct) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"column\", values_to = \"unique_count\")\n\n# Print the unique counts for each column\nprint(unique_counts)\n\n# A tibble: 8 × 2\n  column          unique_count\n  &lt;chr&gt;                  &lt;int&gt;\n1 id                      3170\n2 is_inferred                2\n3 from_id                 1052\n4 to_id                   1156\n5 to_id_supertype           71\n6 to_id_sub_type            21\n7 to_id_num                860\n8 type                       4\n\n\n\n\nNext, code chunk below will be used to create mapping of character id in mc3_nodes_cleaned to row index\n\nnode_index_lookup &lt;- mc3_nodes_cleaned %&gt;%\n  mutate(.row_id = row_number()) %&gt;%\n  select(id, .row_id)\n\nNext, the code chunk below was used to join and convert from_id and to_id to integer indices. At the same time we also dropped rows with unmatched nodes.\n\nmc3_edges_indexed &lt;- mc3_edges_cleaned %&gt;%\n  left_join(node_index_lookup, by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(from = .row_id) %&gt;%\n  left_join(node_index_lookup, by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(to = .row_id) %&gt;%\n  # Filter out edges where either source or target node was not found\n  filter(!is.na(from) & !is.na(to)) %&gt;%\n  # Select all columns to carry forward to mc3_edges_final\n  select(from, to, id, is_inferred, type, # Original edge attributes\n         from_id, to_id, to_id_supertype, to_id_sub_type, to_id_num # Original IDs and parsed target type\n         )\n\nNext the code chunk below was used to subset nodes to only those referenced by edges.\n\nused_node_indices &lt;- sort(unique(c(mc3_edges_indexed$from, mc3_edges_indexed$to)))\nmc3_nodes_final &lt;- mc3_nodes_cleaned %&gt;%\n  slice(used_node_indices) %&gt;%\n  mutate(new_index = row_number())\n\nWe then used the code chunk below to rebuild lookup from old index to new index.\n\nold_to_new_index &lt;- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(used_node_indices)\n)\n\nLastly, the code chunk below was used to update edge indices to match new node table.\n\nmc3_edges_final &lt;- mc3_edges_indexed %&gt;%\n  left_join(old_to_new_index, by = c(\"from\" = \"old_index\")) %&gt;%\n  rename(from_new = new_index) %&gt;%\n  left_join(old_to_new_index, by = c(\"to\" = \"old_index\")) %&gt;%\n  rename(to_new = new_index) %&gt;%\n  # Explicitly select all columns that are needed downstream\n  select(from = from_new, to = to_new,\n         id, is_inferred, type,\n         from_id, to_id, to_id_supertype, to_id_sub_type, to_id_num)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#building-the-tidygraph-object",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#building-the-tidygraph-object",
    "title": "Take-home_Ex02",
    "section": "4.2 Building the tidygraph object",
    "text": "4.2 Building the tidygraph object\n\nBuild the object-tbl_graphExamining the object\n\n\n\nmc3_graph &lt;- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)\n\n\n\n\nstr(mc3_graph)\n\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 28\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 8\n  .. ..$ id             : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  .. ..$ is_inferred    : logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type           : chr [1:3226] NA \"sent\" NA NA ...\n  .. ..$ from_id        : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  .. ..$ to_id          : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  .. ..$ to_id_supertype: chr [1:3226] \"Relationship\" \"Event\" \"Event\" \"Relationship\" ...\n  .. ..$ to_id_sub_type : chr [1:3226] \"Suspicious\" \"Communication\" \"Assessment\" \"Colleagues\" ...\n  .. ..$ to_id_num      : chr [1:3226] \"217\" \"370\" \"600\" \"430\" ...\n $ :&lt;environment: 0x000001da11691cb0&gt; \n - attr(*, \"active\")= chr \"nodes\""
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph--ggraph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph--ggraph",
    "title": "Take-home_Ex02",
    "section": "5.1 Visualising the knowledge graph- ggraph",
    "text": "5.1 Visualising the knowledge graph- ggraph\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\nShow the code\nset.seed(1234)\n\n\nIn the code chunk below, ggraph functions are used to create the whole graph.\n\nThe Graph- ggraphThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`),\n                  size = 2) +\n  geom_node_text(aes(label = type),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nThe entire graph was rather detailed and it was hard to discover useful patterns. In order to gain meaningful visual discovery, we had to look into the details. For instance, we would next plot sub-graphs or interactive graphs."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph--visnetwork",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualising-the-knowledge-graph--visnetwork",
    "title": "Take-home_Ex02",
    "section": "5.2 Visualising the knowledge graph- VisNetwork",
    "text": "5.2 Visualising the knowledge graph- VisNetwork\nVisNetwork provides the user to understand relationships through interactivity. For instance:\n\nThe individual nodes can be selected from the drop-down menu to view its connected nodes and edges.\nThe hover tooltip provides additional details from fields such as content, coordination_type, findings, destination, operational_role, results, and jurisdiction_type based on the related id information from mc3_nodes_final."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-graph--visnetwork",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#the-graph--visnetwork",
    "title": "Take-home_Ex02",
    "section": "The Graph- VisNetwork",
    "text": "The Graph- VisNetwork\n\n\n\n\n\n\n\n\n\n\nShow the code\n# ---- 1. Define styles and legends ----\n\nevent_subtypes &lt;- c(\n  \"Communication\", \"Monitoring\", \"VesselMovement\", \"Assessment\",\n  \"Collaborate\", \"Endorsement\", \"TourActivity\", \"TransponderPing\",\n  \"Harbor Report\", \"Fishing\", \"Criticize\"\n)\n\nrelationship_subtypes &lt;- c(\n  \"Coordinates\", \"AccessPermission\", \"Operates\", \"Colleagues\",\n  \"Suspicious\", \"Reports\", \"Jurisdiction\", \"Unfriendly\", \"Friends\"\n)\n\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",         # type level\n  \"Relationship\" = \"#AF8DC3\"   # type level\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",              # type level\n  \"Relationship\" = \"square x\"    # type level\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n# ---- 2. Prepare nodes ----\nnodes &lt;- mc3_nodes_final %&gt;%\n  mutate(\n    label = ifelse(is.na(name), id, name),\n    \n    # These parts are for pulling the related data from other fields\n    tooltip_extra = case_when(\n      type == \"Event\" & sub_type == \"Communication\" ~ content,\n      type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n      type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n      type == \"Event\" & sub_type == \"Assessment\" ~ results,\n      type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n      type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n      type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n      TRUE ~ NA_character_\n    ),\n    \n    title = paste0(\n      \"&lt;b&gt;\", label, \"&lt;/b&gt;&lt;br&gt;\",\n      \"Type: \", type, \"&lt;br&gt;\",\n      \"Sub-type: \", sub_type, \"&lt;br&gt;\",\n      ifelse(!is.na(tooltip_extra), paste0(\"&lt;br&gt;&lt;b&gt;Details:&lt;/b&gt; \", tooltip_extra), \"\")\n    ),\n    \n    # Fallback logic: if sub_type is NA or not in styling list, use type instead\n    group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)\n  ) %&gt;%\n  select(id, label, group, title) %&gt;%\n  distinct()\n\n# ---- 3. Prepare directed edges (type == \"sent\") ----\n\nedges &lt;- mc3_edges_final %&gt;%\n  filter(from_id %in% nodes$id & to_id %in% nodes$id) %&gt;%\n  select(from = from_id, to = to_id)\n\n# ---- 4. Build visNetwork ----\n\nnet &lt;- visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visNodes(font = list(\n    size = 14,\n    color = STYLES$node_label_dark,\n    face = STYLES$font_family,\n    vadjust = -15\n  ))\n\n# ---- 5. Apply shape and color per group ----\n\nfor (group_name in names(node_legend_colors_plot)) {\n  net &lt;- net %&gt;% visGroups(\n    groupname = group_name,\n    color = node_legend_colors_plot[[group_name]],\n    shape = node_legend_shapes_plot[[group_name]]\n  )\n}\n# ---- 6. Add legend ----\n\nused_groups &lt;- unique(nodes$group)\n\nlegend_df &lt;- tibble::tibble(\n  label = used_groups,\n  shape = node_legend_shapes_plot[used_groups],\n  color = node_legend_colors_plot[used_groups]\n) %&gt;%\n  distinct(label, .keep_all = TRUE)  # remove duplicates just in case\n\nnet &lt;- net %&gt;% visLegend(\n  addNodes = legend_df,\n  ncol = 2,                         # number of columns\n  position = \"left\",              \n  main = \"Entity (Sub)Types\",      # title\n  useGroups = FALSE                # show custom legend entries\n)\n# ---- 7. Render ----\nnet"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#all-communications",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#all-communications",
    "title": "Take-home_Ex02",
    "section": "7.1 All Communications",
    "text": "7.1 All Communications\nSince the content column determines the important events and relationships, the communication sub_type in the original nodes file would be useful. Thus, the communication to_id_sub_type and from_id_sub_type from the original edges file will also be useful.\n\n7.1.1 Creation of a timeline of all radio communications in table format\n\nThe TableThe Code\n\n\n\n\n\n\n|timestamp           |sender_name |recipient_name       |content                                                                                                                                                                                                                                                                                    |\n|:-------------------|:-----------|:--------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|2040-10-05 10:48:00 |Sam         |Kelly                |Hey Kelly, it's Sam. This permit approval seems fishy. Could you get details on who signed off on it while you're at the harbor? I need to understand these 'special access corridors' before my meeting with Elise tomorrow.                                                              |\n|2040-10-01 08:13:00 |Kelly       |Sam                  |Sam, it's Kelly! Let's meet at Sunrise Point at 7 AM for birdwatching. Bring your new binoculars and some water. I've heard there might be some rare shorebirds passing through this weekend. Can't wait!                                                                                  |\n|2040-10-07 08:11:00 |Kelly       |Sam                  |Hey Sam, it's Kelly! Got some photos of those crates - definitely marked 'fragile' and 'handle with care.' Neptune's crew is being super secretive. They're using special loading equipment I've never seen before. See you at 7 for birdwatching!                                         |\n|2040-10-05 09:45:00 |Nadia Conti |Haacklee Harbor      |Haacklee Harbor, this is Nadia Conti. I need to cancel the special access corridor arrangements for Nemo Reef immediately. Plans have changed due to unforeseen circumstances. Destroy all related documentation. I'll contact you when we're ready to proceed with alternative locations. |\n|2040-10-05 09:49:00 |Nadia Conti |Oceanus City Council |This is Nadia Conti. My cancellation was due to scheduling conflicts with our tourism development initiatives. I wasn't aware of any permit approvals. I'll submit revised documentation for alternative sustainable tourism proposals next week.                                          |\n|2040-10-08 08:18:00 |Nadia Conti |Liam Thorne          |Liam, Nadia here. Need your services urgently. Investigation brewing around Nemo Reef permits. Double your usual fee if you can ensure Harbor Master remains cooperative through next week. Meet at the usual place tomorrow, 10PM.                                                        |\n|2040-10-08 08:25:00 |Nadia Conti |Neptune              |Neptune, this is Nadia. Need clarity on 'underwater foundation work' at Nemo Reef. This extends beyond our agreed scope. Meet me at the marina tomorrow at 6AM to discuss implications and additional resource requirements.                                                               |\n|2040-10-08 08:30:00 |Nadia Conti |Neptune              |Neptune, Nadia here. Just confirming our 0600 meeting at the marina. I've reviewed the modified equipment specs with The Accountant. Please bring detailed timeline for foundation work and cost implications. We need to stay under radar.                                                |\n|2040-10-08 11:23:00 |Nadia Conti |Marlin               |Marlin, Nadia here. I understand you're inquiring about eastern shoal routes. Those are temporary diversions due to equipment transport needs. I'll have Davis provide the necessary documentation tonight. Nothing to be concerned about.                                                 |\n|2040-10-12 08:44:00 |Nadia Conti |Liam Thorne          |Liam, Nadia here. Redirect all remaining operations from southwest immediately. Move equipment to our secondary location. I'll handle EcoVigil through proper channels. Meet me at the usual place at 2100 hours with updated documentation.                                               |\n\n\n\n\n# --- 1. Extract All Communications ---\n# Logic: Sender (source) --sent--&gt; Event_Communication (target) --received--&gt; Recipient (target)\n# This extracts all communication events\n\n# --- 2. Clean and Prepare Nodes ---\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  # Rename 'type' to 'supertype' to reduce confusion with communication type\n  rename(supertype = type) %&gt;%\n  # Select only columns that are needed and are consistently present\n  select(id, name, sub_type, content, timestamp) \n\n# --- 3. Clean and Prepare Edges ---\n# Rename 'type' in edges to 'edge_type' to avoid conflict with node 'supertype'\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target,\n         edge_type = type) %&gt;% # Renamed 'type' to 'edge_type'\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Filter out any edges where from_id or to_id are not in cleaned nodes\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id)\n\nother_communications_df &lt;- mc3_edges_cleaned %&gt;%\n  filter(edge_type == \"sent\") %&gt;% # Start with 'sent' edges\n  # Join with nodes to get content and timestamp of the Event_Communication node\n  left_join(mc3_nodes_cleaned %&gt;% select(id, content, timestamp),\n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(event_id = to_id, event_content = content, event_timestamp = timestamp) %&gt;%\n  # Now, find the recipient of this communication event\n  left_join(mc3_edges_cleaned %&gt;%\n              filter(edge_type == \"received\") %&gt;%\n              select(event_id_match = from_id, recipient_id = to_id),\n            by = c(\"event_id\" = \"event_id_match\")) %&gt;%\n  # Join with nodes to get the sender's name and sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type),\n            by = c(\"from_id\" = \"id\")) %&gt;%\n  rename(sender_id_actual = from_id, sender_name = name, sender_sub_type = sub_type) %&gt;%\n  # Join with nodes to get the recipient's name and sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type),\n            by = c(\"recipient_id\" = \"id\")) %&gt;%\n  rename(recipient_name = name, recipient_sub_type = sub_type) %&gt;%\n  # Select and rename final columns for all communications\n  select(\n    communication_type = edge_type, # This will be \"sent\" from original filter\n    sender_id = sender_id_actual,\n    sender_name,\n    sender_sub_type,\n    recipient_id,\n    recipient_name,\n    recipient_sub_type,\n    event_id,\n    content = event_content,\n    timestamp = event_timestamp\n  ) \n\n# create a timeline visualization or inspect content.\nprint(knitr::kable(head(other_communications_df %&gt;%\n                          select(timestamp, sender_name, \n                                 recipient_name, content), 10),\n                   format = \"markdown\", align = \"l\"))\n\n\n\n\n\n7.1.2 Unique count from each sender subtype\n\nUnique CountThe Code\n\n\n\n\n# A tibble: 4 × 3\n  sender_sub_type unique_senders sender_names                                   \n  &lt;chr&gt;                    &lt;int&gt; &lt;chr&gt;                                          \n1 Person                      17 Boss, Clepper Jensen, Davis, Elise, Kelly, Lia…\n2 Vessel                      14 Defender, EcoVigil, Horizon, Knowles, Mako, Ma…\n3 Organization                 5 Glitters Team, Green Guardians, Oceanus City C…\n4 Location                     3 Haacklee Harbor, Himark Harbor, Paackland Harb…\n\n\n\n\nsender_names_by_type &lt;- other_communications_df %&gt;%\n  group_by(sender_sub_type) %&gt;%\n  summarise(\n    unique_senders = n_distinct(sender_name),\n    sender_names = paste(sort(unique(sender_name)), collapse = \", \")\n  ) %&gt;%\n  arrange(desc(unique_senders))  # sort from largest to smallest\n\n# View the table\nprint(sender_names_by_type)\nThere were no Group sub-type as confirmed by this filtered table.\n\n\n\n\n\n7.1.3 Static Chord Diagram- All Communicators\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# --- Step 1: Build communication matrix ---\nsent_df &lt;- other_communications_df %&gt;%\n  filter(communication_type == \"sent\") %&gt;%\n  count(sender_name, recipient_name, name = \"sent\")\n\nreceived_df &lt;- other_communications_df %&gt;%\n  filter(communication_type == \"received\") %&gt;%\n  count(sender_name = recipient_name, recipient_name = sender_name, name = \"received\")\n\ncombined_df &lt;- full_join(sent_df, received_df, by = c(\"sender_name\", \"recipient_name\")) %&gt;%\n  mutate(across(c(sent, received), ~replace_na(., 0)),\n         total = sent + received)\n\ncomm_matrix &lt;- xtabs(total ~ sender_name + recipient_name, data = combined_df)\n\n# --- Step 2: Assign color per entity sub-type ---\ntype_lookup &lt;- other_communications_df %&gt;%\n  select(name = sender_name, type = sender_sub_type) %&gt;%\n  bind_rows(other_communications_df %&gt;% select(name = recipient_name, type = recipient_sub_type)) %&gt;%\n  distinct(name, .keep_all = TRUE)\n\n# Define pastel Set2 colors for each type\ntype_colors_palette &lt;- brewer.pal(n = 4, name = \"Set2\")\nnames(type_colors_palette) &lt;- c(\"Person\", \"Organization\", \"Vessel\", \"Location\")\n\n# Map to nodes in the matrix\ngrid_colors &lt;- type_colors_palette[type_lookup$type]\nnames(grid_colors) &lt;- type_lookup$name\ngrid_colors &lt;- grid_colors[rownames(comm_matrix)]\n\n# --- Step 3: Plot chord diagram ---\ncircos.clear()\npar(mar = c(4, 2, 8, 10))  # bottom, left, top, right\n\nchordDiagram(\n  comm_matrix,\n  grid.col = grid_colors,\n  transparency = 0.25,\n  annotationTrack = \"grid\",\n  preAllocateTracks = list(track.height = 0.1)\n)\n\n# Add readable sector names\ncircos.trackPlotRegion(\n  track.index = 1,\n  panel.fun = function(x, y) {\n    name &lt;- get.cell.meta.data(\"sector.index\")\n    circos.text(\n      x = mean(get.cell.meta.data(\"xlim\")),\n      y = 0,\n      labels = str_wrap(name, 10),\n      facing = \"clockwise\",\n      niceFacing = TRUE,\n      adj = c(0, 0.5),\n      cex = 0.6\n    )\n  },\n  bg.border = NA\n)\n\n# --- Step 4: Title, subtitle ---\ntitle(\n  main = \"Chord Diagram of Communication Flows\",\n  cex.main = 1.6,\n  font.main = 2,\n  line = 5\n)\nmtext(\"Each ribbon shows volume of sent + received messages\", side = 3, line = 3, cex = 1, col = \"gray30\")\nmtext(\"Note. Group subtype is excluded from this diagram\", side = 1, line = 3, cex = 0.8, col = \"gray40\")\n\n# --- Step 5: Custom Legend ---\nlegend_items &lt;- names(type_colors_palette)\nlegend(\n  x = 1.1, y = 0.85, legend = legend_items,\n  fill = type_colors_palette,\n  border = \"gray30\",\n  bty = \"n\",\n  cex = 0.7,\n  pt.cex = 0.7,\n  title = \"Entity Sub-Type\" \n\n)\n\n\nFindings:\nThe thickness of each ribbon (chord) represents the magnitude of the relationship. A thicker ribbon represents more frequent communications (sent + received) between a sender and recipient.\nHere, we have an overview of paired communicators who have higher frequencies. We also can see the links between communicators. These are the entities who communicated frequently with others that we might want to focus on:\n\nPerson: The Intern, The Lookout, Clepper Jensen, Davis, Miranda Jordan, Mrs. Money.\nOrganization: Oceanus City Council, Green Guardian\nVessel: Reef Guardian, Neptune, Mako, Remora\nLocation: Himark Habor\nGroup: N/A\n\n\n\n7.1.4 Heatmap of Correspondences\n\nHeatmapThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Count interactions\nadj_df &lt;- other_communications_df %&gt;%\n  count(sender_name, recipient_name, name = \"count\")\n\n# Step 2: Compute total sent and received counts\nsender_order &lt;- adj_df %&gt;%\n  group_by(sender_name) %&gt;%\n  summarise(total_sent = sum(count)) %&gt;%\n  arrange(desc(total_sent)) %&gt;%\n  pull(sender_name)\n\nrecipient_order &lt;- adj_df %&gt;%\n  group_by(recipient_name) %&gt;%\n  summarise(total_received = sum(count)) %&gt;%\n  arrange(desc(total_received)) %&gt;%\n  pull(recipient_name)\n\n# Step 3: Reorder factor levels\nadj_df &lt;- adj_df %&gt;%\n  mutate(\n    sender_name = factor(sender_name, levels = sender_order),\n    recipient_name = factor(recipient_name, levels = recipient_order)\n  )\n\n# Step 4: Plot heatmap\nggplot(adj_df, aes(x = recipient_name, y = sender_name, fill = count)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"white\", high = \"navyblue\") +\n  labs(\n    title = \"Sender-Recipient Communication Heatmap\",\n    subtitle = \"Top communicators sorted to bottom-left\",\n    x = \"Recipient\",\n    y = \"Sender\",\n    fill = \"Messages\"\n  ) +\n  theme_minimal(base_size = 10) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(size = 12, face = \"bold\"),\n    plot.subtitle = element_text(size = 10),\n    panel.grid = element_blank()\n  )\n\n\n\nFindings:\nAfter extraction of the entities who communicated frequently (from the Static Chord Diagram), we tabled who they communicated with by using the heatmap. E.g. Name1 communicated with Name2.\n\n\n\n\n\n\n\n\nName 1 Subtype\nName1\nName2\n\n\n\n\nPerson\nThe Intern\nThe Lookout, Mrs. Money\n\n\nPerson\nClepper Jensen\nMiranda Jordan\n\n\nPerson\nDavis\nNeptune\n\n\nPerson\nMrs. Money\nThe Intern, The Middleman, Boss\n\n\nVessel\nMako\nRemora, Green Guardians, Oceanus City Council, Neptune, Reef Guardians, Himark Harbor, Davis, Sentinel, Paackland Habor, Samantha Blake, Serenity, Osprey\n\n\nVessel\nRemora\nMako, Neptune, Himark Habor, Davis, Paackland Harbor, V. Miesel Shipping, Marlin, Small Fry\n\n\nVessel\nNeptune\nMako, Himark Habor, Remora, Mrs Money, V. Miesel Shipping, Nadia, Serenity\n\n\nVessel\nReef Guardian\nGreen Guardians, Oceanus City Council, Mako, Paackland Harbor, EcoVigil, Serenity, Defender\n\n\nOrganization\nGreen Guardian\nGreen Guardians, Oceanus City Council, The Lookout, Sentinel, Horizon\n\n\nOrganization\nOceanus City Council\nGreen Guardians, Reef Guardians, Himark Harbor, Sentinel, Paackland Harbor, Liam Thorne, Samantha Blake, Haacklee Harbor\n\n\nLocation\nHimark Habor\nOceanus City Council, Mako, Serenity, Marlin"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#people-and-vessels",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#people-and-vessels",
    "title": "Take-home_Ex02",
    "section": "7.2 People and Vessels",
    "text": "7.2 People and Vessels\nDue to a large number of entity subtypes as people and vessels in 7.1.4, we then looked into the characters’ and vessel’s identity and their actual communication content.\n\n7.2.1 Filter by Vessel and Person only\n\nThe Code\n\n\n\nperson_vessel_df &lt;- other_communications_df %&gt;%\n  filter(\n    (sender_sub_type == \"Person\" & recipient_sub_type == \"Vessel\") |\n    (sender_sub_type == \"Vessel\" & recipient_sub_type == \"Person\") |\n    (sender_sub_type == \"Person\" & recipient_sub_type == \"Person\") |\n    (sender_sub_type == \"Vessel\" & recipient_sub_type == \"Vessel\")\n  )\n\n\n\n\n\n\n7.2.2 Plotted Timeline- People & Vessels\n\n\nShow the code\n# --- FACTORING and DATETIME CLEANING ---\nperson_vessel_df_for_plot &lt;- person_vessel_df %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    sender_sub_type = factor(sender_sub_type, levels = c(\"Person\", \"Vessel\")),\n    communicating_pair_sorted = paste(pmin(sender_name, recipient_name), pmax(sender_name, recipient_name), sep = \" & \")\n  )\n\n# --- WRAPPING CONTENT AND TOOLTIP ---\nplot_data1 &lt;- person_vessel_df_for_plot %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    date = as.Date(timestamp),\n    time = format(timestamp, \"%H:%M:%S\"),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", date, \"&lt;br&gt;\",\n      \"&lt;b&gt;Time:&lt;/b&gt; \", time, \"&lt;br&gt;\",\n      \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Event_id:&lt;/b&gt; \", event_id, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# Plot\np &lt;-ggplot(plot_data1, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = sender_id,\n    shape = sender_sub_type,\n    text = tooltip_text\n  ),show.legend = c(color = TRUE, shape = FALSE), \n  size = 2, alpha = 0.7) +\n  scale_shape_manual(values = c(\"Person\" = 16, \"Vessel\" = 17)) +\n  facet_wrap(~ sender_sub_type, ncol = 1, scales = \"fixed\") +\n  scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"14:00:00\")),  # reversed to show time top-to-bottom\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\", \"14:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\")\n)+\n  scale_x_date(\n  date_breaks = \"1 day\",\n  date_labels = \"%d %b\"\n)+\n  labs(\n    title = \"Communication Events Over Time (Sender's Perspective)\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    color = \"Sender (subtype, name)\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 8), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# --- Convert to interactive plot ---\nggplotly(p, tooltip = \"tooltip_text\")\n\n\n\n\n\n\n\n7.2.2.1 Findings on People/ Vessels:\n\nCore logic:\n\nIf two names appear as sender and recipient in the same message, they cannot belong to the same person — i.e., they’re not aliases of each other.\nIf two names sent a message at the exact time, they cannot belong to the same person.\nFor instance, if Nadia sent a message to The Accountant, they would not be the same individual. If Nadia sent a message at 10am to The Accountant and The Lookout also sent a message at 10am to The Intern, Nadia and The Lookout cannot be the same person.\n\nSelect only The Accountant, Mrs. Money, Elise: We see close timings between Mrs. Money and Elise on 8 Oct, and 10 Oct. These were on the same topic. Elise then disappears from radar on 10 Oct. She reappears as The Accountant and Mrs. Money on 11 Oct on the same topic and remains only as The Accountant till 14 Oct.\nSelect only Liam and The Middleman: The Middleman disappeared on 7 Oct and appeared as Liam on 8 Oct. On 11 Oct Mrs. Money asked The Middleman if anything was found by conservation vessels. On the same day, Liam reappeared and replied Elise that nothing was found by them.\nSelect only The Boss and Nadia: The Boss disappeared on 5 Oct and reappeared as Nadia on 8 Oct. Likely the same person.\nSelect only Small Fry and Rodriguez: on 2 Oct Rodriguez corresponded with Remora and Mako on meeting at the slip #14. It happened again on 14 Oct as he took on dual roles and responded to the same message with different names. Likely the same person.\nSelect only The Lookout and Sam: on 7 Oct Sam asked Kelly to get information on who authorized the permit. 2 minutes later, The Lookout (Kelly) responded to The Intern (Sam), that it was signed by Jensen from City Council.\nSeawatch only appeared on 10 Oct but Horizon talked to Seawatch on 8 Oct. Therefore, some other entity is Seawatch before or during 8 Oct. Defender told Seawatch on 3 Oct at 8.39am that it increased its patrol and informed Seawatch to maintain vigilance. The Lookout (Seawatch) responded to Sentinel (Defender) at 8.41am that it acknowledged the need for vigilance.\nAfter getting a general idea of the characters’ involvement, we looked at the interactions in 7.3."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#discussion-interpretation-on-all-communications",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#discussion-interpretation-on-all-communications",
    "title": "Take-home_Ex02",
    "section": "7.3 Discussion/ Interpretation on all communications:",
    "text": "7.3 Discussion/ Interpretation on all communications:\nFrom the interactive plot, we were able to select certain names of individuals and/or vessels from the legend and read their conversations. We segmented entities based on our first cut of observations of the following people or vessels and rated them as suspicious or non-suspicious. We tabled out what we have learnt with variables: Sender, Recipient, Commonalities, Rationale, Suspicious?, Date, Event Id, in Section 7.3.1 and 7.3.2.\n\n7.3.1 Suspicious Conversations\n\n\nShow the code\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr) # For separate_rows, if needed for 'Event Id' later\n\n# Create the data frame using tribble, consolidating multi-line entries\ndf_new_data &lt;- tribble(\n  ~Sender, ~Recipient, ~Commonalities, ~Rationale, ~Suspicious_Status, ~Date, ~Event_Id,\n  \"The Lookout (Person)\", \"The Intern (Person)\", \"Mako\", \"Jensen from City Council signed a permit to set a corridor for Mako vessel.\", \"Jensen\", \"5/10\", \"371\",\n  \"Glitters Team aka. Sailor Shift Team\", \"Boss (Person)\", \"Permit, Commissioner Torres\", \"Glitters thanked their Boss who got Commissioner Torres to sign off the permit\", \"Nadia aka The Boss\", \"6/10\", \"389\",\n  \"Remora (Vessel)\", \"Sailor Shift Team aka. Glitters Team\", \"Permit, Commissioner Torres\", \"Davis thanked Nadia who got Commissioner Torres to sign off the permit\", \"Nadia aka The Boss\", \"6/10\", \"388\",\n  \"Mrs. Money (Person)\", \"Mako (Vessel); Neptune (Vessel)\", \"Mako, Remora, Neptune\", \"Mrs. Money is the Financial Controller who provides the payment protocols for Mako and Remora's captions. She also provides the encryption protocols and transfer devices. Mrs. Money coordinates payment protocols for Remora and Mako captains\", \"Elise aka. Mrs. Money\", \"7/10\", \"458 and 464\",\n  \"Neptune/ Neptune Captain\", \"Elise aka. Mrs. Money (Person)\", \"Remora, Mako\", \"Neptune told her to coordinate payment protocols for Remora and Mako captains\", \"Elise aka. Mrs. Money\", \"7/10\", \"456 and 518\",\n  \"Remona (Vessel)\", \"Rodriquez (Person)\", \"Sailor Shift\", \"Nemo Reef selected for Sailor Shift's music shoot.; Nadia personally handled permits for Nemo Reefs after meeting Davis.\", \"Both\", \"2/10\", \"153 and 328\",\n  \"Remona (Vessel)\", \"Nadia (Person)\", \"Delta 3, Sailor Shift\", \"Tourism facade created by Remona and awaiting installation of underwater lighting placements at Nemo Reef.\", \"Both\", \"14/10\", \"943\",\n  \"Davis (Person)\", \"Mako (Vessel)\", \"Rodriquez, Nadia, Neptune\", \"Rodriquez will help with logistics.\", \"Both\", \"2/10\", \"115\",\n  \"Davis (Person)\", \"Mako (Vessel)\", \"Rodriquez, Nadia, Neptune\", \"V. Miesel's Marine Research Permit is CR-7844. There is a 5 day deadline from 8 Oct.\", \"Both\", \"8/10\", \"548\",\n  \"Davis (Person)\", \"Mako (Vessel)\", \"Rodriquez, Nadia, Neptune\", \"V. Miesel approved their operational authority.\", \"Both\", \"12/10\", \"802\",\n  \"Davis (Person)\", \"Remona (Vessel)\", \"Client\", \"Davis wants to maintain client's privacy with Paackland Harbour.\", \"Both, and also Paackland Harbour\", \"4/10\", \"282\",\n  \"Mako (Vessel)\", \"Davis (Person)\", \"Permit CR-7844, Boss\", \"Davis is a captain.\", \"Both\", \"5/10\", \"349\",\n  \"Mako (Vessel)\", \"Boss (Person)\", \"Boss, Samantha\", \"Oceanus Council approved Mako's departure to Nemo Reef with minimal documentation.\", \"Oceanus Council\", \"5/10\", \"365\",\n  \"Boss (Person)\", \"Marko (Vessel)\", \"Mission, Boss\", \"Informed Marko to abort mission as conservation patrols are tracking it\", \"Both\", \"4/10\", \"316\",\n  \"Small Fry aka Rodriquez (Person)\", \"Remora (Vessel, Mako (Vessel)\", \"Slip #14, Glitters Team, Sailor Team\", \"Mako asked Rodriquez when he could come by slip #14.; Small Fry replied he would come by slip #14 in 30 minutes time.; Small Fry surprised that Glitters Team filing for paperwork downtown for protected area of Nemo Reef.\", \"Both\", \"2/10\", \"142, 143 and 156\",\n  \"Neptune\", \"Nadia (Person); Neptune (Vessel)\", \"Equipment specs\", \"Neptune asked to meet Nadia at 0600 and confirm the equipment specs approved by Elise.; Nadia confirmed the time with Neptune and agreed to show her reviewed equipment specs from The Accountant.\", \"Both; Elise aka The Accountant\", \"8/10\", \"537 and 738\",\n  \"Knowles (Vessel)\", \"Davis (Person)\", \"Boss\", \"Instructed by Mako to provide equipment transfer.\", \"Both\", \"14/10\", \"1001 and 1003\",\n  \"Sentinel(Vessel)\", \"Mako (Vessel)\", \"Permit\", \"Mako told Sentinel it was operating under NR-1045.\", \"Mako\", \"7/10\", \"467\",\n  \"Mako (Vessel)\", \"Sentinel (Vessel)\", \"Permit\", \"Sentinel asked the reasons for Mako operating under permit NR-1045\", \"Mako\", \"8/10\", \"574\",\n  \"Mako (Vessel)\", \"Sentinel (Vessel)\", \"Permit\", \"Mako told Sentinel it was operating under permit CR-7844 (marine equipment transport) not NR-1045\", \"Mako\", \"8/10\", \"575\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez\", \"Rodriquez filed for permits under Sailor Shifts Team for 2 commercial and 1 private yatch to perform environmental sampling.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"2/10\", \"130\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez\", \"Rodriquez is connected to a mining consortium with previous violations in protected areas.\", \"Rodriquez is suspicious. The communicators are not suspicious\", \"2/10\", \"134\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez\", \"Rodriquez is connected to Council Knowles and they are related to V. Miesel Shipping which is possibly a shell company which has vessels.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"3/10\", \"201\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez is suspicious\", \"Council Knowles' brother-in-law owns the offshore bank account to V. Miesel Shipping. The company is involved in rare earth extraction.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"3/10\", \"204\",\n  \"Miranda (Person)\", \"Clepper Jesen (Person)\", \"Rodriquez is suspicious\", \"Knowles accepted cash from Rodriquez.\", \"Rodriquez is suspicious. The communicators are not suspicious.\", \"3/10\", \"206\"\n)\n\n# Process the data (primarily for consistent whitespace and Event_Id splitting if necessary)\ndf_processed &lt;- df_new_data %&gt;%\n  # Standardize delimiters and remove excess whitespace across all character columns.\n  mutate(\n    across(where(is.character), ~ str_replace_all(.x, \"[,\\n]+\", \", \") %&gt;% str_trim())\n  ) %&gt;%\n  # For Event_Id, replace \"and\" with comma and then separate rows if needed\n  mutate(Event_Id = str_replace_all(Event_Id, \" and \", \", \")) %&gt;%\n  mutate(across(where(is.character), str_trim)) %&gt;%\n  mutate(Event_Id = as.character(Event_Id)) # Ensure Event_Id is character\n\n# Create the reactable table\nreactable(\n  df_processed,\n  filterable = TRUE,\n  searchable = TRUE,\n  paginationType = \"numbers\",\n  defaultPageSize = 5,\n  showPageSizeOptions = TRUE,\n  pageSizeOptions = c(5, 10, 20, 50, 100),\n  striped = TRUE,\n  highlight = TRUE,\n  columns = list(\n    Sender = colDef(name = \"Sender\", minWidth = 120),\n    Recipient = colDef(name = \"Recipient\", minWidth = 120),\n    Commonalities = colDef(name = \"Commonalities\", minWidth = 150),\n    Rationale = colDef(name = \"Rationale\", minWidth = 300),\n    # Rename Suspicious_Status for display\n    Suspicious_Status = colDef(name = \"Suspicious?\", minWidth = 150),\n    # Date column as text, no special date sorting\n    Date = colDef(name = \"Date\", minWidth = 80, align = \"center\"),\n    Event_Id = colDef(name = \"Event Id\", minWidth = 80, align = \"center\")\n  ),\n  theme = reactableTheme(\n    borderColor = \"#dfe2e5\",\n    stripedColor = \"#f6f8fa\",\n    highlightColor = \"#f0f5f9\",\n    cellPadding = \"8px 12px\",\n    style = list(fontFamily = \"Verdana, Geneva, sans-serif\", fontSize = \"14px\"),\n    headerStyle = list(\n      \"&.rt-th:hover\" = list(backgroundColor = \"#e0e6eb\"),\n      fontSize = \"15px\",\n      fontWeight = 600,\n      color = \"#333\",\n      background = \"#f7f7f7\"\n    ),\n    rowSelectedStyle = list(backgroundColor = \"#e6f2ff\", \"&:hover\" = list(backgroundColor = \"#e6f2ff\")),\n    searchInputStyle = list(width = \"100%\", margin = \"5px 0\", padding = \"5px\"),\n    filterInputStyle = list(width = \"100%\", margin = \"2px 0\", padding = \"4px\")\n  )\n)\n\n\n\n\n\n\n\n\n7.3.2 Non-suspicious conversations\n\n\nShow the code\n# Load necessary packages\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr) # For separate_rows\nlibrary(lubridate) # For date parsing\n\n# 1. Manually parse the data into a tribble\n# Each row in the tribble corresponds to a logical entry from provided text.\n# Multi-line strings within a cell are captured using '\\n'.\n# The 'Suspicious?' column is named 'Suspicious_Status' in R to avoid special characters,\n# and will be renamed in the reactable column definition for display.\ndf_raw_input &lt;- tribble(\n  ~Sender, ~Recipient, ~Commonalities, ~Rationale, ~Suspicious_Status, ~Date, ~Event_Id,\n  \"Samantha (Person)\", \"Sailor Shift Team aka Glitters Team (Organization)\", \"Permit, Nemo Reef, Music Video\", \"Samantha was assisting Sailor Shift Team to coordinate the permit and equipment rental for their music video and wanted confirmation on Nemo Reef as their intended location.\", \"Unsure\", \"1/10\", \"64\",\n  \"Sailor Shift Team aka Glitters Team (Organization)\", \"Samantha (Person)\", \"Permit, Nemo Reef,\", \"Glitters Team confirmed with Samantha that they would like to use Nemo Reef as their primary location\", \"Unsure\", \"1/10\", \"66\",\n  \"Mako (Vessel)\", \"Samantha (Person)\", \"Nemo Reef Permit\", \"Mako claims that Samantha has a coordination team. Preparing for an event in a week's time from 6 Oct.\", \"Samantha is not\", \"6/10\", \"380\",\n  \"Mako (Vessel)\", \"Samantha (Person)\", \"Nemo Reef Permit\", \"Samantha advised them to stop activities which might be illegal without permit\", \"Samantha is not\", \"10/10\", \"687\",\n  \"The Lookout (Person)\", \"Sentinel (Vessel)\", \"Marina's Dream, Music Video\", \"Spotted 3 suspicious vessels around Nemo Reef on 3/10.\", \"Both are not\", \"3/10\", \"171\",\n  \"The Lookout (Person)\", \"Sentinel (Vessel)\", \"Marina's Dream, Music Video\", \"Spotted music video production on 13/10\", \"Both are not\", \"13/10\", \"912\",\n  \"The Lookout (Person)\", \"Horizon (Vessel)\", \"Music Video\", \"Found it suspicious to spot lighting rigs and cameras at 12pm. Wanted Horizon to investigate\", \"Both are not\", \"13/10\", \"926\",\n  \"EcoVigil (Vessel)\", \"Liam (Person)\", \"ROVs\", \"Collection of water samples using ROVs\", \"EcoVigil is not\", \"11/10\", \"737 and 751\" # \"and\" will be handled by separate_rows\n)\n\n# 2. Process the data for display and sorting\ndf_processed &lt;- df_raw_input %&gt;%\n  # Standardize delimiters and remove excess whitespace across all character columns.\n  # This flattens multi-line strings within cells and makes 'separate_rows' more reliable.\n  mutate(\n    across(where(is.character), ~ str_replace_all(.x, \"[,\\n]+\", \", \") %&gt;% str_trim())\n  ) %&gt;%\n  # Handle the \"and\" in Event_Id, converting it to a comma for consistent splitting.\n  mutate(Event_Id = str_replace_all(Event_Id, \" and \", \", \")) %&gt;%\n  # Now, use separate_rows for Event_Id if it contains multiple comma-separated values.\n  # 'Date' column appears to be single-valued in this dataset, so it's not included here.\n  # If Date could also have multiple values (e.g., \"1/10, 2/10\"), you would add it to separate_rows.\n  separate_rows(Event_Id, sep = \", \", convert = FALSE) %&gt;%\n  # Trim whitespace again after separation in case of leading/trailing spaces\n  mutate(across(where(is.character), str_trim)) %&gt;%\n  # Convert Date to actual date objects for proper sorting.\n  # Using `dmy` for day/month/year format and assuming the current year (2025).\n  mutate(\n    FullDate = paste0(Date, \"/2025\"), # Add the current year for correct parsing\n    ParsedDate = dmy(FullDate, quiet = TRUE) # Convert to Date object (Day Month Year)\n  ) %&gt;%\n  # Order the data by parsed date and then event ID\n  arrange(ParsedDate, Event_Id) %&gt;%\n  select(-FullDate) %&gt;% # Remove the helper column\n  # Ensure Event_Id is character type for display purposes\n  mutate(Event_Id = as.character(Event_Id))\n\n# 3. Create the reactable table\nreactable(\n  df_processed,\n  filterable = TRUE, # Enable column filters at the top of each column\n  searchable = TRUE, # Add a global search box above the table\n  paginationType = \"numbers\", # Display page numbers (e.g., 1, 2, 3 instead of Prev/Next)\n  defaultPageSize = 5, # Show 5 rows per page by default\n  showPageSizeOptions = TRUE, # Allow users to select different page sizes\n  pageSizeOptions = c(5, 10, 20, 50, 100), # Available page size options\n  striped = TRUE, # Add alternating row colors for better readability\n  highlight = TRUE, # Highlight the row when the user hovers over it\n  # Define the default sorting for the table when it first loads\n  defaultSorted = list(ParsedDate = \"asc\"), # Sort by the hidden ParsedDate column in ascending order\n  columns = list(\n    # The 'ParsedDate' column is used internally for correct date sorting but is not displayed\n    ParsedDate = colDef(\n      show = FALSE\n    ),\n    # Define how each visible column should be displayed and behave\n    Date = colDef(\n      name = \"Date\", # Display name for the column header\n      defaultSortOrder = \"asc\", # Ensure initial sort is ascending for the displayed date\n      minWidth = 80, # Minimum width for the column to ensure content fits\n      align = \"center\" # Align text to the center for better presentation of dates\n    ),\n    Sender = colDef(name = \"Sender\", minWidth = 120),\n    Recipient = colDef(name = \"Recipient\", minWidth = 120),\n    Commonalities = colDef(name = \"Commonalities\", minWidth = 150),\n    Rationale = colDef(name = \"Rationale\", minWidth = 300),\n    # Custom definition for the 'Suspicious_Status' column to display its original name\n    Suspicious_Status = colDef(name = \"Suspicious?\", minWidth = 150),\n    Event_Id = colDef(\n      name = \"Event ID\", # Display name for the column header\n      minWidth = 80, # Minimum width\n      align = \"center\" # Align text to the center\n    )\n  ),\n  # Customize the visual theme of the reactable table for a consistent look and feel\n  theme = reactableTheme(\n    borderColor = \"#dfe2e5\", # Defines the color of table borders\n    stripedColor = \"#f6f8fa\", # Defines the background color of striped rows\n    highlightColor = \"#f0f5f9\", # Defines the background color when a row is hovered over\n    cellPadding = \"8px 12px\", # Sets the padding inside table cells\n    style = list(fontFamily = \"Verdana, Geneva, sans-serif\", fontSize = \"14px\"), # General font family and size for table content\n    headerStyle = list(\n      \"&.rt-th:hover\" = list(backgroundColor = \"#e0e6eb\"), # Hover effect for table headers\n      fontSize = \"15px\", # Font size for headers\n      fontWeight = 600, # Font weight for headers (bold)\n      color = \"#333\", # Text color for headers\n      background = \"#f7f7f7\" # Background color for headers\n    ),\n    rowSelectedStyle = list(backgroundColor = \"#e6f2ff\", \"&:hover\" = list(backgroundColor = \"#e6f2ff\")), # Style for selected rows\n    searchInputStyle = list(width = \"100%\", margin = \"5px 0\", padding = \"5px\"), # Style for the global search input box\n    filterInputStyle = list(width = \"100%\", margin = \"2px 0\", padding = \"4px\") # Style for individual column filter input boxes\n  )\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#community-detection-and-centrality-measure--ggraph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#community-detection-and-centrality-measure--ggraph",
    "title": "Take-home_Ex02",
    "section": "7.5 Community Detection and Centrality Measure- ggraph",
    "text": "7.5 Community Detection and Centrality Measure- ggraph\n\n7.5.1 Community Detection- All\nSince we had an idea of the identity of the characters involved and their sub types, we wanted to uncover the communities they belonged to. We used the Louvian method for community detection to find communities that were densely connected internally but sparse to others.\n\nCommunity DetectionThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)  \n\n# --- STEP 1: Prepare the edge list ---\nedge_df &lt;- other_communications_df %&gt;%\n  select(sender_id, recipient_id) %&gt;%\n  filter(!is.na(sender_id) & !is.na(recipient_id)) %&gt;%\n  rename(from = sender_id, to = recipient_id) %&gt;%\n  distinct()\n\n# Remove self-loops\nedge_df &lt;- edge_df %&gt;% filter(from != to)\n\n# --- STEP 2: Create the graph object (undirected) ---\ng &lt;- tbl_graph(edges = edge_df, directed = FALSE)\n\n# --- STEP 3: Run Louvain community detection ---\ng &lt;- g %&gt;%\n  mutate(community = group_louvain())\n\n# --- STEP 4: Visualize the graph ---\nggraph(g, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(color = as.factor(community)), size = 5) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Community Detection in Communication Network\",\n       color = \"Community\")\n\n\n\n\n\n7.5.2 Centrality Measure- All\nWe then proceeded to use the PageRank centrality algorithm to assign a numerical weight to each node to reflect its importance. The community attribute we previously calculated was then assigned to this graph.\n\nPageRank Centrality AlgorithmThe NetworkThe Code\n\n\n\n\n# A tibble: 10 × 5\n   name                 pagerank degree betweenness closeness\n   &lt;chr&gt;                   &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Mako                   0.0756     37      220.      0.0179\n 2 Reef Guardian          0.0536     25      105.      0.0152\n 3 Oceanus City Council   0.0516     26       47.9     0.0147\n 4 Remora                 0.0436     21       39.0     0.0139\n 5 Neptune                0.0410     19       56.2     0.0145\n 6 V. Miesel Shipping     0.0355     17        9.84    0.0130\n 7 Nadia Conti            0.0354     17       27.9     0.0141\n 8 Himark Harbor          0.0347     17       22.6     0.0130\n 9 Sentinel               0.0331     16       27.8     0.0143\n10 Green Guardians        0.0318     15       27.4     0.0143\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234) \n\n# --- STEP: Compute Centrality Measures ---\ng &lt;- g %&gt;%\n  mutate(\n    pagerank = centrality_pagerank(),\n    degree = centrality_degree(),\n    betweenness = centrality_betweenness(),\n    closeness = centrality_closeness()\n  )\n\n# Show top 10 nodes by PageRank\ng %&gt;%\n  as_tibble() %&gt;%\n  select(name, pagerank, degree, betweenness, closeness) %&gt;%\n  arrange(desc(pagerank)) %&gt;%\n  head(10)\n\n# Visualize by Centrality\nggraph(g, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(size = pagerank, color = as.factor(community)), alpha = 0.8) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 3,\n                 max.iter = 5000) + # &lt;--- Increased this value \n  theme_void() +\n  labs(title = \"Network with PageRank Centrality\",\n       size = \"PageRank\", color = \"Community\")\n\n\n\n\n7.5.2.1 Findings:\n\nThere were around 6 closely associated groups. Community 5 (Clepper and Miranda) appeared to be segmented from the central group, due to the non-involvement from the nature of the investigative work.\nFrom the graph, we extracted the 11 influential nodes to focus on:\n\nCommunity 1: Reef Guardian, EcoVigil\nCommunity 2: Neptune, Remora, Nadia, V. Miesel Shipping, Davis\nCommunity 3: Mako\nCommunity 4: Mrs. Money, Boss, The Middleman\nCommunity 5: N/A as they were not very influential at global level\nCommunity 6: N/A as they were not very influential at global level\n\n\n\n\n\n7.5.3 Wordclouds- Unigram\n\nThe WordcloudsThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 1. Extract node community assignments\ng_node_communities &lt;- g %&gt;%\n  as_tibble() %&gt;%\n  select(sender_name = name, community)\n\n# 2. Join communication content with community assignments\ncontent_with_community &lt;- other_communications_df %&gt;%\n  left_join(g_node_communities, by = c(\"sender_name\")) %&gt;%\n  filter(!is.na(community), !is.na(content))\n\n# 3. Unnest tokens for unigrams\nunigrams &lt;- content_with_community %&gt;%\n  unnest_tokens(word, content, token = \"words\") %&gt;%\n  anti_join(stop_words, by = \"word\") %&gt;%\n  count(community, word, sort = TRUE)\n\n# 4. Unnest tokens for bigrams\nbigrams &lt;- content_with_community %&gt;%\n  unnest_tokens(bigram, content, token = \"ngrams\", n = 2) %&gt;%\n  separate(bigram, into = c(\"word1\", \"word2\"), sep = \" \") %&gt;%\n  filter(!word1 %in% stop_words$word,\n         !word2 %in% stop_words$word) %&gt;%\n  unite(bigram, word1, word2, sep = \" \") %&gt;%\n  count(community, bigram, sort = TRUE)\n\n# 5a. Plot word clouds per community\npar(mfrow = c(2, 3))  # 2 rows, 3 columns layout for 6 communities\nfor (i in sort(unique(unigrams$community))) {\n  words &lt;- unigrams %&gt;% filter(community == i)\n  suppressWarnings({\n    set.seed(432)  # Set seed for reproducibility\n    wordcloud(words = words$word,\n              freq = words$n,\n              max.words = 80,\n              scale = c(3, 0.5),\n              colors = brewer.pal(8, \"Dark2\"),\n              random.order = FALSE)\n  })\n  mtext(paste(\"Community\", i), side = 3, line = 1, adj = 0.5, cex = 1.5, col = \"black\")\n}\n\n\n\n\n\n7.5.4 Wordclouds- Bigrams\nWe decided to also look into bigrams to obtain more contextual information.\n\nThe WordcloudsThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 5b. Plot word clouds per community\npar(mfrow = c(2, 3))  # 2 rows, 3 columns layout for 6 communities\nfor (i in sort(unique(bigrams$community))) {\n  words &lt;- bigrams %&gt;% filter(community == i)\n  \n  if (nrow(words) &lt; 1) next  # Skip if no words\n  \n  suppressWarnings({\n    set.seed(432)  # Set seed for reproducibility\n    wordcloud(words = words$bigram,  # &lt;-- FIXED here\n              freq = words$n,\n              max.words = min(20, nrow(words)),\n              scale = c(3, 0.5),\n              colors = brewer.pal(8, \"Dark2\"),\n              random.order = FALSE)\n  })\n  mtext(paste(\"Community\", i), side = 3, line = 1, adj = 0.5, cex = 1.5, col = \"black\")\n}\n\n\n\n\nCertain words stood out more by their size in the unigram and bigrams. To view clearer frequencies and patterns among the community, we furthered the visualisations into circular barcharts of bigrams.\n\n\n\n7.5.5 Circular barchart for Top Bigrams per Community\n\nThe Circular BarchartThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# --- Configuration ---\nnum_top_bigrams_per_community &lt;- 8\nempty_bar_count &lt;- 2 # gaps btw comm.\n#excluded_community &lt;- 5 # too little in community 5\n\n# --- 1. Prepare the Combined Dataset ---\nall_communities_data &lt;- bigrams %&gt;%\n#  filter(community != excluded_community) %&gt;%\n  group_by(community) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_head(n = num_top_bigrams_per_community) %&gt;%\n  ungroup()\n\nall_communities_data$community &lt;- as.factor(all_communities_data$community)\n\nto_add &lt;- data.frame(\n  bigram = NA,\n  n = NA,\n  community = rep(levels(all_communities_data$community), each = empty_bar_count)\n)\n\nplot_data &lt;- rbind(all_communities_data, to_add) %&gt;%\n  arrange(community)\n\nplot_data$id &lt;- seq_len(nrow(plot_data)) # Keep ID as numeric here\n\n# --- 2. Prepare Label Data ---\nlabel_data &lt;- plot_data\nnumber_of_bar &lt;- nrow(label_data)\nlabel_data$angle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar\nlabel_data$hjust &lt;- ifelse(label_data$angle &lt; -90, 1, 0)\nlabel_data$angle &lt;- ifelse(label_data$angle &lt; -90, label_data$angle + 180, label_data$angle)\n\n# --- 3. Prepare Data for Baselines (Community Dividers) ---\nbase_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start = min(id, na.rm = TRUE), # Keep as numeric\n    end = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    title_position = mean(c(start, end))\n  ) %&gt;%\n  ungroup()\n\n# --- 4. Prepare Data for Grid Lines (Optional: Value Scales) ---\nmax_n_value &lt;- max(plot_data$n, na.rm = TRUE)\ngrid_lines_values &lt;- c(20, 40, 60, 80, 100)\ngrid_lines_values &lt;- grid_lines_values[grid_lines_values &lt;= max_n_value]\n\ngrid_segments_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start_id = min(id, na.rm = TRUE), # Keep as numeric\n    end_id = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  )\n\ngrid_data_final &lt;- tibble()\nfor(val in grid_lines_values) {\n  temp_data &lt;- grid_segments_data %&gt;%\n    mutate(y_value = val)\n  grid_data_final &lt;- bind_rows(grid_data_final, temp_data)\n}\n\n# --- Data for grid line LABELS ---\ngrid_label_data &lt;- data.frame(\n  x_pos = max(plot_data$id, na.rm = TRUE) + 2, # Fixed x position outside the plot\n  y_pos = grid_lines_values,\n  label_text = as.character(grid_lines_values)\n)\n\n# --- 5. Make the Unified Plot ---\np &lt;- ggplot(plot_data, aes(x = id, y = n, fill = community)) + # &lt;--- x = id (numeric)\n  # Add background grid lines for value (e.g., 20, 40, 60, 80)\n  geom_segment(data = grid_data_final,\n               aes(x = start_id - 0.5, y = y_value, xend = end_id + 0.5, yend = y_value),\n               inherit.aes = FALSE,\n               color = \"grey\", alpha = 0.8, linewidth = 0.3) +\n\n  # Add text showing the value of each grid line at a fixed position\n  geom_text(data = grid_label_data,\n            aes(x = x_pos, y = y_pos, label = label_text),\n            inherit.aes = FALSE,\n            color = \"grey\", size = 3, angle = 0, fontface = \"bold\", hjust = 0) +\n\n  # Bars for the bigrams (main plot elements)\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"white\", linewidth = 0.1,\n           width = 1.4) + # &lt;--- Add width=1 to remove space between bars if id is numeric\n\n  # Set limits for the y-axis, providing space for labels\n  ylim(-max_n_value * 0.7, max_n_value * 1.2) +\n\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\") # Top, Right, Bottom, Left margins\n  ) +\n  coord_polar(start = 0) +\n\n  # Add bigram labels\n  geom_text(\n    data = label_data,\n    aes(x = id, y = n + 10, label = bigram, hjust = hjust), # &lt;--- x = id (numeric)\n    color = \"black\", fontface = \"bold\", alpha = 0.8, size = 2.8,\n    angle = label_data$angle, inherit.aes = FALSE\n  ) +\n\n  # Add base lines for each community segment\n  geom_segment(\n    data = base_data,\n    aes(x = start - 0.5, y = -10, xend = end + 0.5, yend = -10),\n    colour = \"black\", alpha = 0.8, linewidth = 0.6, inherit.aes = FALSE\n  ) +\n\n  # Add community group labels\n  geom_text(\n    data = base_data,\n    aes(x = title_position, y = -40, label = paste(\"Comm.\", community)),\n    colour = \"black\", alpha = 0.9, size = 2, fontface = \"bold\", inherit.aes = FALSE\n  )+\n  # --- Add the Title ---\n  labs(\n    title = \"Circular Bar Chart by Community\",\n    subtitle = \"Frequencies of key bigrams within each community\", # Updated subtitle\n    caption = paste0(\"AT | Generated: \", Sys.Date())\n  ) +\n  # Apply the Set2 Brewer palette\n  scale_fill_brewer(palette = \"Set2\") +\n  # --- Customize title appearance ---\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 10)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 10)),\n    plot.caption = element_text(hjust = 1, size = 7, color = \"grey50\")\n  )\n\nprint(p)\n\n\n\n\n\n7.5.6 Community Group Membership- All\nThe topic area was gathered from the bigram wordclouds and circular bar chart. The Group Name was created based on knowledge from the Members in the group and the topic area. These were the information from the 6 segmented groups:\n\nThe TableThe Code\n\n\n\n\n\nCommunity Group Membership Summary\n\n\n\n\n\n\n\n\nGroup Number\nTopic Area\nMembers\nGroup Name\n\n\n\n\n1\ngreen guardians, city council, paackland harbor, green guardians, nemo reef, water quality\nDefender, EcoVigil, Green Guardians, Horizon, Liam Thorne, Northern Light, Oceanus City Council, Paackland Harbor, Port Security, Reef Guardian, Seawatch, Sentinel, The Lookout\nConservationist Group\n\n\n2\nnemo reef, miesel shipping, permit, cr 7844, delta 3\nCity Officials, Davis, Elise, Nadia Conti, Neptune, Remora, Rodriguez, Sailor Shifts Team, Small Fry, V. Miesel Shipping\nSailor Shift\n\n\n3\nnemo reef, himark harbor, samantha blake, radio silence\nHaacklee Harbor, Himark Harbor, Knowles, Mako, Marlin, Osprey, Serenity\nMaritime\n\n\n4\nmoney, 0500 meeting, nemo reef, intern reporting, conservation activity, financial projections\nBoss, Glitters Team, Mrs. Money, Samantha Blake, The Accountant, The Intern, The Middleman\nSuspicious Characters\n\n\n5\nsam, kelly, loading equipment\nKelly, Sam\nSam & Kelly\n\n\n6\nmiranda reporting, jensen, project poseidon, conservation vessels, nemo reef\nClepper Jensen, Miranda Jordan\nHacklee Herald\n\n\n\n\n\n\n\nset.seed(1234)\n\n# 6. Create a tidy summary table of members per community\ngrouped_members &lt;- g %&gt;%\n  as_tibble() %&gt;%\n  select(name, community) %&gt;%\n  group_by(community) %&gt;%\n  summarise(\n    Members = paste(sort(name), collapse = \", \"),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    `Group Number` = community,\n    `Topic Area` = case_when(\n      community == 1 ~ \"green guardians, city council, paackland harbor, green guardians, nemo reef, water quality\",\n      community == 2 ~ \"nemo reef, miesel shipping, permit, cr 7844, delta 3\",\n      community == 3 ~ \"nemo reef, himark harbor, samantha blake, radio silence\",\n      community == 4 ~ \"money, 0500 meeting, nemo reef, intern reporting, conservation activity, financial projections\",\n      community == 5 ~ \"sam, kelly, loading equipment\",\n      community == 6 ~ \"miranda reporting, jensen, project poseidon, conservation vessels, nemo reef\",\n      TRUE ~ \"Other\"\n    ),\n    `Group Name` = case_when(\n      community == 1 ~ \"Conservationist Group\",\n      community == 2 ~ \"Sailor Shift\",\n      community == 3 ~ \"Maritime\",\n      community == 4 ~ \"Suspicious Characters\",\n      community == 5 ~ \"Sam & Kelly\",\n      community == 6 ~ \"Hacklee Herald\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  ) %&gt;%\n  select(`Group Number`, `Topic Area`, `Members`, `Group Name`)\n\n# Show the summary table in a clean format\nkable(grouped_members, caption = \"Community Group Membership Summary\", align = \"l\")\n\n\n\n\n7.5.6.1 Findings:\n\nWe focused on the 11 nodes in the suspicious groups named:\n\nSailor Shift (Influential Nodes: Neptune, Remora, Nadia, V. Miesel Shipping, Davis);\nMaritime (Influential Node: Mako);\nConservationist Group: (Influential Nodes: Reef Guardian, EcoVigil); and\nSuspicious Characters (Influential Nodes: Mrs. Money, Boss, The Middleman).\n\nWe held back on the slightly less influential nodes such as: Sam & Kelly, and Hacklee Herald which was where Clepper Jensen worked as a journalist.\n\n\n\n\n7.5.7 Interactive Chord Diagram by Community\nIn 7.1, we previously created a static chord diagram and heatmap to identify node pairs with higher interactions, and the interactions across entity subtypes.\nHere, the interactive chord diagram showed the correspondences among communities at every two hour intervals.\n\n\nShow the code\n# Get community membership from graph object\ncommunity_df &lt;- g %&gt;%\n  as_tibble() %&gt;%\n  select(name, community)\n\n\n\n\n\n\n\n\n\nInteractive Communication Flows Over Time\n\n\n\nUse the slider to view communication over time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.5.7.1 Findings:\nWe noticed some cross community direct and indirect communication occured mainly among influential nodes, suggesting collaboration. These are some sample linkages with arrows regardless of sent or received:\n\n\n\n\n\n\n\nCommunity X\nNode Linkages (Community X -&gt; Community X -&gt; Community Y)\n\n\n\n\nSuspicious Characters\nMrs. Money -&gt; Intern -&gt; The Lookout\nLiam -&gt; Paackland Harbor -&gt; The Middleman\nGlitters Team -&gt; Boss -&gt; Mako\nGlitters Team -&gt; Samantha Blake -&gt; Sailor Shifts Team\n\n\nSailor Shift\nNeptune -&gt; Elise -&gt; Mako\nNeptune -&gt; Davis -&gt; Mako\nRemora -&gt; Neptune -&gt; Boss\nRodriguez -&gt; Remora -&gt; Mako\nRemora -&gt; Small Fry -&gt; Mako\nDavis -&gt; Remora -&gt; Paackland Harbor\nV. Miesel Shipping -&gt; Neptune -&gt; Mako\n\n\nSam & Kelly\nKelly -&gt; Sam - &gt; The Lookout\n\n\nMaritime\nMako -&gt; Himark Harbor -&gt; Oceanus City Council\n\n\nHacklee Herald\nN/A (Only Direct Community X to X communications)\n\n\nConservationist Group\nReef Guardian -&gt; Oceanus City Council -&gt; Nadia\nReef Guardian -&gt; Paackland Harbor -&gt; Mako\nOceanus City Council -&gt; Liam -&gt; Nadia\n\n\n\nWe also noticed that at times, certain individuals sent messages but there were no response back. This could possibly be due to the pseudonyms being used to send or reply to the same content. For instance, there was a message from Davis to Rodriguez on 14 Oct around 1200-1400 but there was no response by Rodriguez. By looking at the content field, we then found out that he was Small Fry due to the responses he provided to Davis which was originally addressed to Rodriguez.\n\n\n\n7.5.8 Community Detection- People & Vessels\nSince our nodes (apart from V. Miesel Shipping) were mostly of people and vessels, in order for us to drill even deeper into people and vessels, we recreated the process for only people and vessels.\n\nCommunity DetectionThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# --- STEP 1: Prepare the edge list ---\nedge_df_pv &lt;- person_vessel_df %&gt;%\n  select(sender_id, recipient_id) %&gt;%\n  filter(!is.na(sender_id) & !is.na(recipient_id)) %&gt;%\n  rename(from = sender_id, to = recipient_id) %&gt;%\n  distinct()\n\n# Optional: remove self-loops\nedge_df_pv &lt;- edge_df_pv %&gt;% filter(from != to)\n\n# --- STEP 2: Create the graph object (undirected) ---\ng_pv &lt;- tbl_graph(edges = edge_df_pv, directed = FALSE)\n\n# --- STEP 3: Run Louvain community detection ---\ng_pv &lt;- g_pv %&gt;%\n  mutate(community = group_louvain())\n\n# --- STEP 4: Visualize the graph ---\nggraph(g_pv, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(color = as.factor(community)), size = 5) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Community Detection in Communication Network\",\n       color = \"Community\")\n\n\n\n\n\n7.5.9 Centrality Measure- People & Vessels\n\nPageRank Centrality AlgorithmThe NetworkThe Code\n\n\n\n\n# A tibble: 10 × 5\n   name          pagerank degree betweenness closeness\n   &lt;chr&gt;            &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Mako            0.105      26      146.      0.0244\n 2 Reef Guardian   0.0741     19       57.2     0.0208\n 3 Neptune         0.0536     14       16.2     0.02  \n 4 Remora          0.0477     12        9.94    0.0182\n 5 Davis           0.0452     11       10.6     0.0182\n 6 Mrs. Money      0.0429     10       34.6     0.0192\n 7 Boss            0.0425     10       34.1     0.0185\n 8 Sentinel        0.0410     10       25.8     0.02  \n 9 Nadia Conti     0.0402     10       15.0     0.0185\n10 Horizon         0.0376      9       11.6     0.0192\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# --- STEP: Compute Centrality Measures ---\ng_pv &lt;- g_pv %&gt;%\n  mutate(\n    pagerank = centrality_pagerank(),\n    degree = centrality_degree(),\n    betweenness = centrality_betweenness(),\n    closeness = centrality_closeness()\n  )\n\n# Show top 10 nodes by PageRank\ng_pv %&gt;%\n  as_tibble() %&gt;%\n  select(name, pagerank, degree, betweenness, closeness) %&gt;%\n  arrange(desc(pagerank)) %&gt;%\n  head(10)\n\n# Visualize by Centrality\nggraph(g_pv, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) +\n  geom_node_point(aes(size = pagerank, color = as.factor(community)), alpha = 0.8) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void() +\n  labs(title = \"Network with PageRank Centrality\",\n       size = \"PageRank\", color = \"Community\")\n\n\n\n\n7.5.9.1 Findings:\n\nThere were 5 closely associated groups. Community 5 (Clepper and Miranda) appeared to be segmented from the central group, due to the non-involvement from the nature of their investigative work.\nFrom the graph, we extracted the 8 influential nodes to focus on:\n\nCommunity 1: Mako\nCommunity 2: Neptune, Remora, Nadia, Davis\nCommunity 3: N/A as they were not very influential at global level\nCommunity 4: Mrs. Money, Boss, The Middleman\nCommunity 5: N/A as they were not very influential at global level\nCommunity 6: N/A as they were not very influential at global level\n\n\n\n\n\n7.5.10 Wordclouds- Bigrams\nWe focused on bigrams here to get more contextual data.\n\nThe WordcloudsThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 5b. Plot word clouds per community\npar(mfrow = c(2, 3))  # 2 rows, 3 columns layout for 5 communities\nfor (i in sort(unique(bigrams$community))) {\n  words &lt;- bigrams %&gt;% filter(community == i)\n  \n  if (nrow(words) &lt; 1) next  # Skip if no words\n  \n  suppressWarnings({\n    set.seed(432)  # Set seed for reproducibility\n    wordcloud(words = words$bigram,  # &lt;-- FIXED here\n              freq = words$n,\n              max.words = min(30, nrow(words)),\n              scale = c(3, 0.5),\n              colors = brewer.pal(8, \"Dark2\"),\n              random.order = FALSE)\n  })\n  mtext(paste(\"Community\", i), side = 3, line = 1, adj = 0.5, cex = 1.5, col = \"black\")\n}\n\n\n\n\n\n7.5.11 Circular barchart for Top Bigrams per Community\n\nThe Circular BarchartThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# --- Configuration ---\nnum_top_bigrams_per_community &lt;- 8\nempty_bar_count &lt;- 2 # gaps btw comm.\n#excluded_community &lt;- 5 # too little in community 5\n\n# --- 1. Prepare the Combined Dataset ---\nall_communities_data &lt;- bigrams %&gt;%\n#  filter(community != excluded_community) %&gt;%\n  group_by(community) %&gt;%\n  arrange(desc(n)) %&gt;%\n  slice_head(n = num_top_bigrams_per_community) %&gt;%\n  ungroup()\n\nall_communities_data$community &lt;- as.factor(all_communities_data$community)\n\nto_add &lt;- data.frame(\n  bigram = NA,\n  n = NA,\n  community = rep(levels(all_communities_data$community), each = empty_bar_count)\n)\n\nplot_data &lt;- rbind(all_communities_data, to_add) %&gt;%\n  arrange(community)\n\nplot_data$id &lt;- seq_len(nrow(plot_data)) # Keep ID as numeric here\n\n# --- 2. Prepare Label Data ---\nlabel_data &lt;- plot_data\nnumber_of_bar &lt;- nrow(label_data)\nlabel_data$angle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar\nlabel_data$hjust &lt;- ifelse(label_data$angle &lt; -90, 1, 0)\nlabel_data$angle &lt;- ifelse(label_data$angle &lt; -90, label_data$angle + 180, label_data$angle)\n\n# --- 3. Prepare Data for Baselines (Community Dividers) ---\nbase_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start = min(id, na.rm = TRUE), # Keep as numeric\n    end = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    title_position = mean(c(start, end))\n  ) %&gt;%\n  ungroup()\n\n# --- 4. Prepare Data for Grid Lines (Optional: Value Scales) ---\nmax_n_value &lt;- max(plot_data$n, na.rm = TRUE)\ngrid_lines_values &lt;- c(20, 40, 60, 80, 100)\ngrid_lines_values &lt;- grid_lines_values[grid_lines_values &lt;= max_n_value]\n\ngrid_segments_data &lt;- plot_data %&gt;%\n  group_by(community) %&gt;%\n  summarize(\n    start_id = min(id, na.rm = TRUE), # Keep as numeric\n    end_id = max(id, na.rm = TRUE) - empty_bar_count # Keep as numeric\n  )\n\ngrid_data_final &lt;- tibble()\nfor(val in grid_lines_values) {\n  temp_data &lt;- grid_segments_data %&gt;%\n    mutate(y_value = val)\n  grid_data_final &lt;- bind_rows(grid_data_final, temp_data)\n}\n\n# --- Data for grid line LABELS ---\ngrid_label_data &lt;- data.frame(\n  x_pos = max(plot_data$id, na.rm = TRUE) + 2, # Fixed x position outside the plot\n  y_pos = grid_lines_values,\n  label_text = as.character(grid_lines_values)\n)\n\n# --- 5. Make the Unified Plot ---\np &lt;- ggplot(plot_data, aes(x = id, y = n, fill = community)) + # &lt;--- x = id (numeric)\n  # Add background grid lines for value (e.g., 20, 40, 60, 80)\n  geom_segment(data = grid_data_final,\n               aes(x = start_id - 0.5, y = y_value, xend = end_id + 0.5, yend = y_value),\n               inherit.aes = FALSE,\n               color = \"grey\", alpha = 0.8, linewidth = 0.3) +\n\n  # Add text showing the value of each grid line at a fixed position\n  geom_text(data = grid_label_data,\n            aes(x = x_pos, y = y_pos, label = label_text),\n            inherit.aes = FALSE,\n            color = \"grey\", size = 3, angle = 0, fontface = \"bold\", hjust = 0) +\n\n  # Bars for the bigrams (main plot elements)\n  geom_bar(stat = \"identity\", alpha = 0.8, color = \"white\", linewidth = 0.1,\n           width = 1) + # &lt;--- Add width=1 to remove space between bars if id is numeric\n\n  # Set limits for the y-axis, providing space for labels\n  ylim(-max_n_value * 0.7, max_n_value * 1.2) +\n\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\") # Top, Right, Bottom, Left margins\n  ) +\n  coord_polar(start = 0) +\n\n  # Add bigram labels\n  geom_text(\n    data = label_data,\n    aes(x = id, y = n + 10, label = bigram, hjust = hjust), # &lt;--- x = id (numeric)\n    color = \"black\", fontface = \"bold\", alpha = 0.8, size = 2.8,\n    angle = label_data$angle, inherit.aes = FALSE\n  ) +\n\n  # Add base lines for each community segment\n  geom_segment(\n    data = base_data,\n    aes(x = start - 0.5, y = -10, xend = end + 0.5, yend = -10),\n    colour = \"black\", alpha = 0.8, linewidth = 0.6, inherit.aes = FALSE\n  ) +\n\n  # Add community group labels\n  geom_text(\n    data = base_data,\n    aes(x = title_position, y = -40, label = paste(\"Comm.\", community)),\n    colour = \"black\", alpha = 0.9, size = 2, fontface = \"bold\", inherit.aes = FALSE\n  )+\n  # --- Add the Title ---\n  labs(\n    title = \"Circular Bar Chart by Community\",\n    subtitle = \"Frequencies of key bigrams within each community\", # Updated subtitle\n    caption = paste0(\"AT | Generated: \", Sys.Date())\n  ) +\n  # Apply the Set2 Brewer palette\n  scale_fill_brewer(palette = \"Set2\") +\n  # --- Customize title appearance ---\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\", margin = margin(b = 10)),\n    plot.subtitle = element_text(hjust = 0.5, size = 12, margin = margin(b = 10)),\n    plot.caption = element_text(hjust = 1, size = 7, color = \"grey50\")\n  )\n\nprint(p)\n\n\n\n\n\n7.5.12 Community Group Membership- People & Vessels\nThe topic area was gathered from the bigram wordclouds and circular bar chart. The Group Name was created based on knowledge from the Members in the group and the topic area. These are the information for the 5 segmented groups:\n\nThe TableThe Code\n\n\n\n\n\nCommunity Group Membership Summary\n\n\n\n\n\n\n\n\nGroup Number\nTopic Area\nMembers\nGroup Name\n\n\n\n\n1\nnemo reef, himark harbor, samantha blake, city council\nDefender, EcoVigil, Horizon, Knowles, Mako, Marlin, Osprey, Reef Guardian, Samantha Blake, Seawatch, Sentinel, Serenity\nConservationist Group\n\n\n2\nsouth dock, equipment transfer, security team, nemo reef, delta3, cr 7844\nDavis, Elise, Liam Thorne, Nadia Conti, Neptune, Remora, Rodriguez, Small Fry\nPermit\n\n\n3\nintern reporting, conservation vessels, nemo reef\nKelly, Sam, The Intern, The Lookout\nPseudonym\n\n\n4\n10am tomorrow, 0500 tomorrow, funding channels, alternative funding\nBoss, Mrs. Money, The Accountant, The Middleman\nSuspicious\n\n\n5\nclassification markings, project poseidon, clearance documents, harbor security\nClepper Jensen, Miranda Jordan\nHacklee Herald\n\n\n\n\n\n\n\nset.seed(1234)\n# 6. Create a tidy summary table of members per community\ngrouped_members &lt;- g_pv %&gt;%\n  as_tibble() %&gt;%\n  select(name, community) %&gt;%\n  group_by(community) %&gt;%\n  summarise(\n    Members = paste(sort(name), collapse = \", \"),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    `Group Number` = community,\n    `Topic Area` = case_when(\n      community == 1 ~ \"nemo reef, himark harbor, samantha blake, city council\",\n      community == 2 ~ \"south dock, equipment transfer, security team, nemo reef, delta3, cr 7844\",\n      community == 3 ~ \"intern reporting, conservation vessels, nemo reef\",\n      community == 4 ~ \"10am tomorrow, 0500 tomorrow, funding channels, alternative funding\",\n      community == 5 ~ \"classification markings, project poseidon, clearance documents, harbor security\",\n      TRUE ~ \"Other\"\n    ),\n    `Group Name` = case_when(\n      community == 1 ~ \"Conservationist Group\",\n      community == 2 ~ \"Permit\",\n      community == 3 ~ \"Pseudonym\",\n      community == 4 ~ \"Suspicious\",\n      community == 5 ~ \"Hacklee Herald\",\n      TRUE ~ \"Miscellaneous\"\n    )\n  ) %&gt;%\n  select(`Group Number`, `Topic Area`, `Members`, `Group Name`)\n\n# Show the summary table in a clean format\nkable(grouped_members, caption = \"Community Group Membership Summary\", align = \"l\")\n\n\n\n\n7.5.12.1 Findings:\n\nMovements and changes in membership since section 7.5.6:\n\nMako moved from Maritime to Conservationist.\nSamantha Blake moved from the Suspicious Characters to Conservationist.\nSam and Kelly moved from their own Community to Pseudonym.\nThe Lookout moved from Conservationist Group to Pseudonym.\nThe Intern moved from Suspicious Characters to Pseudonym.\nSailor Shift community renamed to Permit\n\nFrom 11 nodes in section 7.5.6.1, we further narrowed down on the 8 nodes in the suspicious groups named:\n\nPermit (Influential Nodes: Neptune, Remora, Nadia, Davis);\nConservationist Group (Influential Node: Mako);\nSuspicious (Influential Nodes: Mrs. Money, Boss, The Middleman).\n\nWe held back on the slightly less influential nodes such as: Hacklee Herald which was where Clepper Jensen worked as a journalist.\n\n\n\n\n7.5.13 Plotted Community Timeline- People & Vessels\nWe then decided to plot the timeline based on community colours to uncover patterns.\n\n\nShow the code\n# --- FACTORING and DATETIME CLEANING ---\nperson_vessel_df_for_plot &lt;- person_vessel_df %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    sender_sub_type = factor(sender_sub_type, levels = c(\"Person\", \"Vessel\")),\n    communicating_pair_sorted = paste(pmin(sender_name, recipient_name), pmax(sender_name, recipient_name), sep = \" & \")\n  )\n\n# Get community membership from graph object\ncommunity_df &lt;- g_pv %&gt;%\n  as_tibble() %&gt;%\n  select(name, community)\n\n# --- WRAPPING CONTENT AND TOOLTIP ---\nplot_data1 &lt;- person_vessel_df_for_plot %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    date = as.Date(timestamp),\n    time = format(timestamp, \"%H:%M:%S\"),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", date, \"&lt;br&gt;\",\n      \"&lt;b&gt;Time:&lt;/b&gt; \", time, \"&lt;br&gt;\",\n      \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;Event_id:&lt;/b&gt; \", event_id, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# Merge with plot_data1 using sender_id == name\nplot_data1 &lt;- plot_data1 %&gt;%\n  left_join(community_df, by = c(\"sender_id\" = \"name\"))\n\n# Plot\np &lt;- ggplot(plot_data1, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = as.factor(community),\n    shape = sender_sub_type,\n    text = tooltip_text\n  ), show.legend = c(color = TRUE, shape = FALSE),\n  size = 2, alpha = 0.7) +\n  scale_shape_manual(values = c(\"Person\" = 16, \"Vessel\" = 17)) +\n  facet_wrap(~ sender_sub_type, ncol = 1, scales = \"fixed\") +\n    scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"14:00:00\")),  # reversed to show time top-to-bottom\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\", \"14:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\")\n)+\n  scale_x_date(\n  date_breaks = \"1 day\",\n  date_labels = \"%d %b\"\n)+\n  labs(\n    title = \"Communication Events Over Time (Sender's Perspective)\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    color = \"Community\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# --- Convert to interactive plot ---\nggplotly(p, tooltip = \"tooltip_text\")\n\n\n\n\n\n\n\n\n7.5.14 Discussion/ Interpretation:\nWe mainly focused on the conversations by 8 influential nodes and some related nodes:\n\nConservation Group (Comm.1): Samantha Blake informed Mako to stop operations on 8 and 10th Oct. Serenity is a private luxury yacht. Osprey was likely a tourism vessel looking for charter from Mako for their tourists.\nPermit (Comm. 2): Neptune, Remora, Nadia, and Davis were working on Nemo Reef operation. This referred to the Music Video Production for Sailor Shift on 14 Oct.\nPseudonym (Comm. 3): Other than communicating among themselves, The Lookout appeared to have also externally corresponded with Sentinel, Reef Guardian and Horizon (conservation based topics), while The Intern also externally corresponded with Mrs. Money.\nSuspicious (Comm. 4): The Middleman had access to Council documents. Mrs. Money had funding from sources that would not flag out to regulators for her operations. Mrs. Money was investigating V. Miesel’s structures. On 5 Oct, Boss told Mrs. Money to disguise financial trails through tourism ventures and destroy evidence of Nemo Reef operations.\nHacklee Herald (Comm. 5): Conversations between Clepper and his intern Miranda which ended on 11 Oct. Miranda mentioned an Oceanus City Council Member meeting with unmarked vessels at night."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nadias-ego-network--louvain-community",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nadias-ego-network--louvain-community",
    "title": "Take-home_Ex02",
    "section": "8.1 Nadia’s Ego Network- Louvain community",
    "text": "8.1 Nadia’s Ego Network- Louvain community\n\nEgo NetworkThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\n# Assume g_full includes Nadia — not g from other_communications_df\ng_igraph &lt;- as.igraph(g)\n\n# Confirm Nadia exists\nif (!\"Nadia Conti\" %in% V(g_igraph)$name) stop(\"Nadia Conti not found in the graph.\")\n\n# Get ego subgraph\nnadia_ego_igraph &lt;- make_ego_graph(g_igraph, order = 1, nodes = which(V(g_igraph)$name == \"Nadia Conti\"), mode = \"all\")[[1]]\n\n# Convert to tidygraph\nnadia_ego_graph &lt;- as_tbl_graph(nadia_ego_igraph)\n\n# Convert to undirected for Louvain\nnadia_ego_graph &lt;- nadia_ego_graph %&gt;% \n  to_undirected() %&gt;% \n  activate(nodes) %&gt;%\n  mutate(\n    community = group_louvain(),\n    pagerank = centrality_pagerank()\n  )\n\n# Plot Nadia's ego network\nggraph(nadia_ego_graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.4) +\n  geom_node_point(aes(size = pagerank, color = as.factor(community)), alpha = 0.9) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  scale_color_brewer(palette = \"Set2\") +\n  theme_void() +\n  labs(\n    title = \"Nadia Conti’s Ego Network\",\n    subtitle = \"Nodes sized by PageRank, colored by Louvain community\",\n    color = \"Community\",\n    size = \"PageRank\"\n  )\n\n\n\n\nWe wanted to find out if there were sub communities within Nadia’s direct network that worked closely together.\nThe orange community were possibly involved in Sailor Shifts’s music video, while the green community were likely regarding ensuring compliance to authorities such as officials, the harbour and conservation team.\nNadia, Liam, and Marlin were the orange nodes that directly linked to the green nodes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nadias-sent-and-received-ego-networks--viznetwork",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nadias-sent-and-received-ego-networks--viznetwork",
    "title": "Take-home_Ex02",
    "section": "8.2 Nadia’s Sent and Received Ego Networks- VizNetwork",
    "text": "8.2 Nadia’s Sent and Received Ego Networks- VizNetwork\n\n8.2.1 Data Preparation\n\nPreparation- Nodes & EdgesThe Code\n\n\n\n\n[1] \"Nadia Conti's ID: Nadia Conti\"\n\n\n[1] \"Nadia Conti's Sub_type: Person\"\n\n\n[1] \"--- Nadia's Sent Communications ---\"\n\n\n\n\n|communication_type |sender_id   |recipient_id         |recipient_name       |recipient_sub_type |event_id                |content                                                                                                                                                                                                                                                                                    |timestamp           |sender_name |sender_sub_type |\n|:------------------|:-----------|:--------------------|:--------------------|:------------------|:-----------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:-----------|:---------------|\n|sent               |Nadia Conti |Haacklee Harbor      |Haacklee Harbor      |Location           |Event_Communication_331 |Haacklee Harbor, this is Nadia Conti. I need to cancel the special access corridor arrangements for Nemo Reef immediately. Plans have changed due to unforeseen circumstances. Destroy all related documentation. I'll contact you when we're ready to proceed with alternative locations. |2040-10-05 09:45:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Oceanus City Council |Oceanus City Council |Organization       |Event_Communication_334 |This is Nadia Conti. My cancellation was due to scheduling conflicts with our tourism development initiatives. I wasn't aware of any permit approvals. I'll submit revised documentation for alternative sustainable tourism proposals next week.                                          |2040-10-05 09:49:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Liam Thorne          |Liam Thorne          |Person             |Event_Communication_529 |Liam, Nadia here. Need your services urgently. Investigation brewing around Nemo Reef permits. Double your usual fee if you can ensure Harbor Master remains cooperative through next week. Meet at the usual place tomorrow, 10PM.                                                        |2040-10-08 08:18:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Neptune              |Neptune              |Vessel             |Event_Communication_536 |Neptune, this is Nadia. Need clarity on 'underwater foundation work' at Nemo Reef. This extends beyond our agreed scope. Meet me at the marina tomorrow at 6AM to discuss implications and additional resource requirements.                                                               |2040-10-08 08:25:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Neptune              |Neptune              |Vessel             |Event_Communication_538 |Neptune, Nadia here. Just confirming our 0600 meeting at the marina. I've reviewed the modified equipment specs with The Accountant. Please bring detailed timeline for foundation work and cost implications. We need to stay under radar.                                                |2040-10-08 08:30:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Marlin               |Marlin               |Vessel             |Event_Communication_584 |Marlin, Nadia here. I understand you're inquiring about eastern shoal routes. Those are temporary diversions due to equipment transport needs. I'll have Davis provide the necessary documentation tonight. Nothing to be concerned about.                                                 |2040-10-08 11:23:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |Liam Thorne          |Liam Thorne          |Person             |Event_Communication_795 |Liam, Nadia here. Redirect all remaining operations from southwest immediately. Move equipment to our secondary location. I'll handle EcoVigil through proper channels. Meet me at the usual place at 2100 hours with updated documentation.                                               |2040-10-12 08:44:00 |Nadia Conti |Person          |\n|sent               |Nadia Conti |V. Miesel Shipping   |V. Miesel Shipping   |Organization       |Event_Communication_847 |This is Nadia. Documentation for permit #CR-7844 is complete. Meeting The Middleman at 2100 to handle final details. Recommend accelerating timeline due to EcoVigil's ROV approval. Shifting operations from southwest immediately. Will update after meeting.                            |2040-10-12 11:19:00 |Nadia Conti |Person          |\n\n\n[1] \"--- Nadia's Received Communications ---\"\n\n\n\n\n|communication_type |sender_id            |sender_name          |sender_sub_type |recipient_id |event_id                |content                                                                                                                                                                                                                                                                                                  |timestamp           |recipient_name |recipient_sub_type |\n|:------------------|:--------------------|:--------------------|:---------------|:------------|:-----------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:--------------|:------------------|\n|received           |Haacklee Harbor      |Haacklee Harbor      |Location        |Nadia Conti  |Event_Communication_330 |Haacklee Harbor to Nadia Conti. Following your visit yesterday regarding the Nemo Reef event logistics, we've prepared the necessary documentation. Harbor staff is ready to facilitate the special access corridor arrangements as discussed. Please confirm timeline for implementation.               |2040-10-05 09:44:00 |Nadia Conti    |Person             |\n|received           |Oceanus City Council |Oceanus City Council |Organization    |Nadia Conti  |Event_Communication_333 |Ms. Conti, this is Oceanus City Council. We need clarification regarding your canceled Nemo Reef event arrangements at Haacklee Harbor. Please explain your documentation destruction request immediately. This relates to our newly expedited permit approvals.                                         |2040-10-05 09:48:00 |Nadia Conti    |Person             |\n|received           |Sailor Shifts Team   |Sailor Shifts Team   |Organization    |Nadia Conti  |Event_Communication_520 |Hi Nadia, this is the Sailor Shifts Team. Received your message about permit assistance - thank you! We urgently need to discuss tomorrow's staffing requirements. Can you confirm how many additional crew members we should bring for the setup?                                                       |2040-10-07 11:57:00 |Nadia Conti    |Person             |\n|received           |Davis                |Davis                |Person          |Nadia Conti  |Event_Communication_521 |Davis, Nadia here. Let's meet at 7PM at the marina office to review documentation. I've been working with alternative channels for permits. Bring all shipping manifests - we'll need to create a clean paper trail immediately.                                                                         |2040-10-07 12:00:00 |Nadia Conti    |Person             |\n|received           |Elise                |Elise                |Person          |Nadia Conti  |Event_Communication_528 |Nadia, Elise here. Meeting at Nemo Reef 0500 tomorrow to establish payment protocols. Sam uncovered V. Miesel shipping lanes overlapping with Mako by 40%. Neptune mentioned 'underwater foundation work' - outside our original scope. Need your assessment.                                            |2040-10-08 08:15:00 |Nadia Conti    |Person             |\n|received           |Liam Thorne          |Liam Thorne          |Person          |Nadia Conti  |Event_Communication_535 |Nadia, Liam here. Meeting confirmed for tomorrow at 10PM. I've redirected Harbor Master's attention and implemented new patrol schedules that work in our favor. Council suspects nothing about Nemo Reef. Bring payment as discussed.                                                                   |2040-10-08 08:24:00 |Nadia Conti    |Person             |\n|received           |Neptune              |Neptune              |Vessel          |Nadia Conti  |Event_Communication_537 |Neptune to Nadia. I'm aware of the foundation work concerns. We're delivering the additional heavy equipment today as requested. Will meet you at 0600 as planned to discuss resource adjustments and review modified equipment specifications that Elise has approved funding for.                      |2040-10-08 08:27:00 |Nadia Conti    |Person             |\n|received           |Davis                |Davis                |Person          |Nadia Conti  |Event_Communication_582 |Nadia, Davis here. I'll be at the marina office at 7PM with all shipping manifests. Could you bring copies of permit #CR-7844? Marlin's asking about unusual vessel routes near eastern shoals - might need to address this.                                                                             |2040-10-08 11:21:00 |Nadia Conti    |Person             |\n|received           |Davis                |Davis                |Person          |Nadia Conti  |Event_Communication_585 |Davis, Marlin here again. Nadia mentioned you'd provide documentation about those eastern shoal diversions tonight. Just checking if that's still coming through. Need to understand these new patterns while my vessel's being repaired.                                                                |2040-10-08 11:26:00 |Nadia Conti    |Person             |\n|received           |Elise                |Elise                |Person          |Nadia Conti  |Event_Communication_601 |Nadia, Elise here. Situation escalating. Permanent underwater construction confirmed at Nemo Reef. Sam reports concrete forms suggesting structures beyond equipment installation. Need urgent clarification on real scope and V. Miesel's involvement before tomorrow's meeting. Prepare contingencies. |2040-10-09 08:54:00 |Nadia Conti    |Person             |\n\n\n[1] \"--- Nadia's Full Communication Timeline (Combined) ---\"\n\n\n\n\n|communication_type |sender_id            |recipient_id         |recipient_name       |recipient_sub_type |event_id                |content                                                                                                                                                                                                                                                                                    |timestamp           |sender_name          |sender_sub_type |communicating_pair_sorted        |\n|:------------------|:--------------------|:--------------------|:--------------------|:------------------|:-----------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:--------------------|:---------------|:--------------------------------|\n|received           |Haacklee Harbor      |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_330 |Haacklee Harbor to Nadia Conti. Following your visit yesterday regarding the Nemo Reef event logistics, we've prepared the necessary documentation. Harbor staff is ready to facilitate the special access corridor arrangements as discussed. Please confirm timeline for implementation. |2040-10-05 09:44:00 |Haacklee Harbor      |Location        |Haacklee Harbor_Nadia Conti      |\n|sent               |Nadia Conti          |Haacklee Harbor      |Haacklee Harbor      |Location           |Event_Communication_331 |Haacklee Harbor, this is Nadia Conti. I need to cancel the special access corridor arrangements for Nemo Reef immediately. Plans have changed due to unforeseen circumstances. Destroy all related documentation. I'll contact you when we're ready to proceed with alternative locations. |2040-10-05 09:45:00 |Nadia Conti          |Person          |Haacklee Harbor_Nadia Conti      |\n|received           |Oceanus City Council |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_333 |Ms. Conti, this is Oceanus City Council. We need clarification regarding your canceled Nemo Reef event arrangements at Haacklee Harbor. Please explain your documentation destruction request immediately. This relates to our newly expedited permit approvals.                           |2040-10-05 09:48:00 |Oceanus City Council |Organization    |Nadia Conti_Oceanus City Council |\n|sent               |Nadia Conti          |Oceanus City Council |Oceanus City Council |Organization       |Event_Communication_334 |This is Nadia Conti. My cancellation was due to scheduling conflicts with our tourism development initiatives. I wasn't aware of any permit approvals. I'll submit revised documentation for alternative sustainable tourism proposals next week.                                          |2040-10-05 09:49:00 |Nadia Conti          |Person          |Nadia Conti_Oceanus City Council |\n|received           |Sailor Shifts Team   |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_520 |Hi Nadia, this is the Sailor Shifts Team. Received your message about permit assistance - thank you! We urgently need to discuss tomorrow's staffing requirements. Can you confirm how many additional crew members we should bring for the setup?                                         |2040-10-07 11:57:00 |Sailor Shifts Team   |Organization    |Nadia Conti_Sailor Shifts Team   |\n|received           |Davis                |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_521 |Davis, Nadia here. Let's meet at 7PM at the marina office to review documentation. I've been working with alternative channels for permits. Bring all shipping manifests - we'll need to create a clean paper trail immediately.                                                           |2040-10-07 12:00:00 |Davis                |Person          |Davis_Nadia Conti                |\n|received           |Elise                |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_528 |Nadia, Elise here. Meeting at Nemo Reef 0500 tomorrow to establish payment protocols. Sam uncovered V. Miesel shipping lanes overlapping with Mako by 40%. Neptune mentioned 'underwater foundation work' - outside our original scope. Need your assessment.                              |2040-10-08 08:15:00 |Elise                |Person          |Elise_Nadia Conti                |\n|sent               |Nadia Conti          |Liam Thorne          |Liam Thorne          |Person             |Event_Communication_529 |Liam, Nadia here. Need your services urgently. Investigation brewing around Nemo Reef permits. Double your usual fee if you can ensure Harbor Master remains cooperative through next week. Meet at the usual place tomorrow, 10PM.                                                        |2040-10-08 08:18:00 |Nadia Conti          |Person          |Liam Thorne_Nadia Conti          |\n|received           |Liam Thorne          |Nadia Conti          |Nadia Conti          |Person             |Event_Communication_535 |Nadia, Liam here. Meeting confirmed for tomorrow at 10PM. I've redirected Harbor Master's attention and implemented new patrol schedules that work in our favor. Council suspects nothing about Nemo Reef. Bring payment as discussed.                                                     |2040-10-08 08:24:00 |Liam Thorne          |Person          |Liam Thorne_Nadia Conti          |\n|sent               |Nadia Conti          |Neptune              |Neptune              |Vessel             |Event_Communication_536 |Neptune, this is Nadia. Need clarity on 'underwater foundation work' at Nemo Reef. This extends beyond our agreed scope. Meet me at the marina tomorrow at 6AM to discuss implications and additional resource requirements.                                                               |2040-10-08 08:25:00 |Nadia Conti          |Person          |Nadia Conti_Neptune              |\n\n\n[1] \"--- Checking: Number of nodes and edges in Nadia's Ego Network Graph ---\"\n\n\n[1] \"Nodes: 13 Edges: 17\"\n\n\n[1] \"---------------------------------------------------------------------\"\n\n\n\n\n# --- 2. Clean and Prepare Nodes ---\nmc3_nodes_cleaned &lt;- mc3_nodes_raw %&gt;%\n  mutate(id = as.character(id)) %&gt;%\n  filter(!is.na(id)) %&gt;%\n  distinct(id, .keep_all = TRUE) %&gt;%\n  # Rename 'type' to 'supertype' to reduce confusion with communication type\n  rename(supertype = type) %&gt;%\n  # Select only columns that are needed and are consistently present\n  select(id, name, sub_type, content, timestamp) # Keep timestamp as character for now\n\n# --- 3. Clean and Prepare Edges ---\n# Rename 'type' in edges to 'edge_type' to avoid conflict with node 'supertype'\nmc3_edges_cleaned &lt;- mc3_edges_raw %&gt;%\n  rename(from_id = source,\n         to_id = target,\n         edge_type = type) %&gt;% # Renamed 'type' to 'edge_type'\n  mutate(across(c(from_id, to_id), as.character)) %&gt;%\n  # Filter out any edges where from_id or to_id are not in cleaned nodes\n  filter(from_id %in% mc3_nodes_cleaned$id,\n         to_id %in% mc3_nodes_cleaned$id)\n\n# --- 4. Identify Nadia Conti's ID and Sub_type ---\nnadia_info &lt;- mc3_nodes_cleaned %&gt;%\n  filter(name == \"Nadia Conti\") %&gt;%\n  select(id, sub_type) # Corrected: Select sub_type here, not supertype\n\nnadia_id &lt;- nadia_info %&gt;% pull(id)\nnadia_sub_type &lt;- nadia_info %&gt;% pull(sub_type) # New variable for Nadia's sub_type\n\n\nif (length(nadia_id) == 0) {\n  stop(\"Nadia Conti not found in the nodes data. Please check the 'name' column or the ID.\")\n} else if (length(nadia_id) &gt; 1) {\n  warning(\"Multiple entries found for Nadia Conti. Using the first one.\")\n  nadia_id &lt;- nadia_id[1]\n  nadia_sub_type &lt;- nadia_sub_type[1] # Ensure sub_type is also taken for the first one\n}\n\nprint(paste(\"Nadia Conti's ID:\", nadia_id))\nprint(paste(\"Nadia Conti's Sub_type:\", nadia_sub_type))\n\n# --- 5. Extract Nadia's Sent Communications ---\n# Logic: Nadia (source) --sent--&gt; Event_Communication (target) --received--&gt; Recipient (target)\nnadia_sent_communications &lt;- mc3_edges_cleaned %&gt;%\n  filter(from_id == nadia_id, edge_type == \"sent\") %&gt;%\n  # Join with nodes to get content and timestamp of the Event_Communication node\n  left_join(mc3_nodes_cleaned %&gt;% select(id, content, timestamp),\n            by = c(\"to_id\" = \"id\")) %&gt;%\n  rename(event_id = to_id, event_content = content, event_timestamp = timestamp) %&gt;%\n  # Now, find the recipient of this communication event\n  left_join(mc3_edges_cleaned %&gt;%\n              filter(edge_type == \"received\") %&gt;%\n              select(event_id_match = from_id, recipient_id = to_id),\n            by = c(\"event_id\" = \"event_id_match\")) %&gt;%\n  # Join with nodes to get the recipient's name AND sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type), # Select sub_type here\n            by = c(\"recipient_id\" = \"id\")) %&gt;%\n  rename(recipient_name = name, recipient_sub_type = sub_type) %&gt;% # Rename sub_type\n  # Select and rename final columns for sent communications\n  select(\n    communication_type = edge_type, # This will be \"sent\"\n    sender_id = from_id,\n    recipient_id,\n    recipient_name,\n    recipient_sub_type, # Include in final select\n    event_id,\n    content = event_content,\n    timestamp = event_timestamp # Timestamp is still character here\n  ) %&gt;%\n  mutate(\n    sender_name = !!nadia_id, # Explicitly set sender_name to Nadia's ID/name using !!\n    sender_sub_type = !!nadia_sub_type # Assign Nadia's sub_type as a constant value using !!\n  )\n\nprint(\"--- Nadia's Sent Communications ---\")\nprint(kable(head(nadia_sent_communications, 10), format = \"markdown\", align = \"l\"))\n\n\n# --- 6. Extract Nadia's Received Communications ---\n# Logic: Sender (source) --sent--&gt; Event_Communication (target) --received--&gt; Nadia (target)\nnadia_received_communications &lt;- mc3_edges_cleaned %&gt;%\n  filter(to_id == nadia_id, edge_type == \"received\") %&gt;%\n  # The source of this edge is the Event_Communication node\n  rename(event_id = from_id) %&gt;%\n  # Join with nodes to get content and timestamp of the Event_Communication node\n  left_join(mc3_nodes_cleaned %&gt;% select(id, content, timestamp),\n            by = c(\"event_id\" = \"id\")) %&gt;%\n  rename(event_content = content, event_timestamp = timestamp) %&gt;%\n  # Now, find the original sender of this communication event\n  left_join(mc3_edges_cleaned %&gt;%\n              filter(edge_type == \"sent\") %&gt;%\n              select(event_id_match = to_id, sender_id = from_id),\n            by = c(\"event_id\" = \"event_id_match\")) %&gt;%\n  # Join with nodes to get the sender's name AND sub_type\n  left_join(mc3_nodes_cleaned %&gt;% select(id, name, sub_type), # Select sub_type here\n            by = c(\"sender_id\" = \"id\")) %&gt;%\n  rename(sender_name = name, sender_sub_type = sub_type) %&gt;% # Rename sub_type\n  # Select and rename final columns for received communications\n  select(\n    communication_type = edge_type, # This will be \"received\"\n    sender_id,\n    sender_name,\n    sender_sub_type, # Include in final select\n    recipient_id = to_id,\n    event_id,\n    content = event_content,\n    timestamp = event_timestamp\n  ) %&gt;%\n  mutate(\n    recipient_name = !!nadia_id, # Explicitly set recipient_name to Nadia's ID/name using !!\n    recipient_sub_type = !!nadia_sub_type # Assign Nadia's sub_type as a constant value using !!\n  )\n\nprint(\"--- Nadia's Received Communications ---\")\nprint(kable(head(nadia_received_communications, 10), format = \"markdown\", align = \"l\"))\n\n# --- 7. Combine Sent and Received Communications for Full Timeline ---\nnadia_full_communications_timeline &lt;- bind_rows(\n  nadia_sent_communications,\n  nadia_received_communications\n) %&gt;%\n  arrange(timestamp) %&gt;%\n  # CRITICAL FIX: Explicitly convert timestamp to POSIXct after bind_rows\n  # Use as.POSIXct with the observed format string\n  mutate(timestamp = as.POSIXct(timestamp, format = \"%Y-%m-%d %H:%M:%S\")) %&gt;%\n  # NEW: Create a sorted communicating pair for consistent coloring\n  rowwise() %&gt;% # Process row by row\n  mutate(communicating_pair_sorted = paste(sort(c(sender_name, recipient_name)), collapse = \"_\")) %&gt;%\n  ungroup() # Return to normal data frame operations\n\nprint(\"--- Nadia's Full Communication Timeline (Combined) ---\")\nprint(kable(head(nadia_full_communications_timeline, 10), format = \"markdown\", align = \"l\"))\n\n# --- 8. Prepare Data for Ego Network Visualization (Direct Person-to-Person/Entity) ---\n# Build nodes and edges directly from nadia_full_communications_timeline,\n# focusing on direct sender-recipient connections.\n# Nodes for the ego network graph: Collect all unique sender and recipient IDs\nall_ego_person_entity_ids &lt;- nadia_full_communications_timeline %&gt;%\n  select(id = sender_id) %&gt;%\n  bind_rows(nadia_full_communications_timeline %&gt;% select(id = recipient_id)) %&gt;%\n  distinct(id) %&gt;%\n  filter(!is.na(id)) # Ensure no NA IDs\n\n# Filter mc3_nodes_cleaned to get attributes for these person/entity nodes\nego_nodes_for_graph &lt;- mc3_nodes_cleaned %&gt;%\n  filter(id %in% all_ego_person_entity_ids$id) %&gt;%\n  filter(!is.na(id)) %&gt;% # Ensure no NA IDs in nodes for graph\n  # Add attributes for visualization\n  mutate(\n    is_nadia = ifelse(id == nadia_id, TRUE, FALSE),\n    # Create a new column for legend grouping that includes Nadia as a distinct category\n    node_legend_group = ifelse(is_nadia, \"Nadia Conti\", sub_type),\n    node_size = ifelse(is_nadia, 20, 18), # Further increased node sizes: Nadia 20, others 10\n    display_name = ifelse(is_nadia, \"Nadia Conti\", name) # Use actual name for others\n  ) %&gt;%\n  filter(!is.na(sub_type)) # Ensure nodes have a sub_type for consistent plotting\n\n# Calculate communication counts for each node for hover text\nnode_comm_summary &lt;- nadia_full_communications_timeline %&gt;%\n  group_by(id = sender_id) %&gt;%\n  summarise(sent_count = n(), .groups = 'drop') %&gt;%\n  full_join(nadia_full_communications_timeline %&gt;%\n              group_by(id = recipient_id) %&gt;%\n              summarise(received_count = n(), .groups = 'drop'),\n            by = \"id\") %&gt;%\n  mutate(\n    sent_count = replace_na(sent_count, 0),\n    received_count = replace_na(received_count, 0)\n  )\n\n# Join communication summary and create hover text for nodes\nego_nodes_for_graph &lt;- ego_nodes_for_graph %&gt;%\n  left_join(node_comm_summary, by = \"id\") %&gt;%\n  mutate(\n    hover_text = paste(\n      \"Name:\", display_name, \"&lt;br&gt;\",\n      \"Type:\", node_legend_group, \"&lt;br&gt;\",\n      \"Sent Communications:\", sent_count, \"&lt;br&gt;\",\n      \"Received Communications:\", received_count\n    )\n  )\n\n# Edges for the ego network graph: Direct Sender -&gt; Recipient edges\n# Aggregate to count occurrences for edge thickness\nego_edges_for_graph &lt;- nadia_full_communications_timeline %&gt;%\n  # Group by sender, recipient, their names, and communication type to count interactions\n  group_by(from = sender_id, to = recipient_id, sender_name, recipient_name, communication_type) %&gt;%\n  summarise(\n    count_of_comm = n(), # Number of times this specific communication happened\n    content_sample = paste(head(content, 1), collapse = \"; \"), # Sample content\n    timestamp_min = min(timestamp, na.rm = TRUE),\n    timestamp_max = max(timestamp, na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  # Add the 'nadia_role_in_comm' column for coloring based on Nadia's perspective\n  mutate(\n    nadia_role_in_comm = case_when(\n      from == nadia_id & communication_type == \"sent\" ~ \"Nadia Sent\",\n      to == nadia_id & communication_type == \"received\" ~ \"Nadia Received\",\n      TRUE ~ \"Other Communication\" # For communications not directly involving Nadia as sender/recipient\n    )\n  ) %&gt;%\n  # Ensure 'from' and 'to' are character and non-NA\n  mutate(\n    from = as.character(from),\n    to = as.character(to)\n  ) %&gt;%\n  filter(!is.na(from) & !is.na(to)) %&gt;%\n  # Filter out edges where 'from' or 'to' IDs are NOT in the final ego_nodes_for_graph\n  filter(from %in% ego_nodes_for_graph$id, to %in% ego_nodes_for_graph$id) %&gt;%\n  # Create hover text for edges\n  mutate(\n    hover_text = paste(\n      \"From:\", sender_name, \"&lt;br&gt;\",\n      \"To:\", recipient_name, \"&lt;br&gt;\",\n      \"Type:\", communication_type, \"&lt;br&gt;\",\n      \"Count:\", count_of_comm, \"&lt;br&gt;\",\n      \"First:\", format(timestamp_min, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n      \"Last:\", format(timestamp_max, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n      \"Content Sample:\", content_sample\n    )\n  )\n\n# Create the tbl_graph object for the ego network\nnadia_ego_network_graph &lt;- tbl_graph(nodes = ego_nodes_for_graph, edges = ego_edges_for_graph, directed = TRUE)\n\nprint(\"--- Checking: Number of nodes and edges in Nadia's Ego Network Graph ---\")\nprint(paste(\"Nodes:\", gorder(nadia_ego_network_graph), \"Edges:\", gsize(nadia_ego_network_graph)))\nprint(\"---------------------------------------------------------------------\")\n\n\n\n\n\n8.2.2 Nadia’s Sent and Received Ego Networks\n\n\n8.2.2.1 Sent Communications Network\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Define custom colors for node types (reusing from previous code)\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",      # Blue\n  \"Vessel\" = \"#D55E00\",      # Orange\n  \"Organization\" = \"#117733\", # Green\n  \"Location\" = \"#AA4499\",   # Purple\n  \"Nadia Conti\" = \"red\"      # Special color for Nadia\n)\n\n# Define custom shapes for node subtypes\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",        # Circle for visNetwork\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Nadia Conti\" = \"star\"   # Star shape for Nadia in visNetwork\n)\n\n# Separate the edges into two sets: Nadia Sent and Nadia Received\nedges_sent &lt;- ego_edges_for_graph %&gt;%\n  filter(nadia_role_in_comm == \"Nadia Sent\")\n\nedges_received &lt;- ego_edges_for_graph %&gt;%\n  filter(nadia_role_in_comm == \"Nadia Received\")\n\n# Function to build visNetwork plot for a given edge set\nbuild_visnetwork_plot &lt;- function(edge_df, title_label) {\n  # Prepare nodes from edge list\n  node_ids &lt;- unique(c(edge_df$from, edge_df$to))\n\n  nodes &lt;- ego_nodes_for_graph %&gt;%\n    filter(id %in% node_ids) %&gt;%\n    mutate(\n      label = ifelse(display_name == \"Nadia Conti\", \"\", display_name),\n      title = paste0(\n        \"&lt;b&gt;\", display_name, \"&lt;/b&gt;&lt;br&gt;\",\n        \"Type: \", node_legend_group, \"&lt;br&gt;\",\n        \"Sent: \", sent_count, \"&lt;br&gt;\",\n        \"Received: \", received_count\n      ),\n      group = ifelse(display_name == \"Nadia Conti\", \"Nadia Conti\", node_legend_group)\n    ) %&gt;%\n    select(id, label, title, group, value = node_size)\n\n  # Prepare edges with arrow and tooltip\n  edges &lt;- edge_df %&gt;%\n    filter(!is.na(from) & !is.na(to)) %&gt;%\n    mutate(\n      arrows = \"to\",\n      title = paste0(\n        \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n        \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;\",\n        \"&lt;b&gt;Type:&lt;/b&gt; \", communication_type, \"&lt;br&gt;\",\n        \"&lt;b&gt;Count:&lt;/b&gt; \", count_of_comm, \"&lt;br&gt;\",\n        \"&lt;b&gt;First:&lt;/b&gt; \", format(timestamp_min, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n        \"&lt;b&gt;Last:&lt;/b&gt; \", format(timestamp_max, \"%Y-%m-%d %H:%M:%S\"), \"&lt;br&gt;\",\n      \"&lt;b&gt;Content Sample:&lt;/b&gt;&lt;br&gt;&lt;div style='max-width:300px;white-space:normal;'&gt;\", content_sample, \"&lt;/div&gt;\"\n      )\n    ) %&gt;%\n    select(from, to, arrows, title, width = count_of_comm)\n\n  # Create visNetwork\n  visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n    visEdges(smooth = FALSE, arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n    visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n    visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n    visNodes(font = list(size = 14)) %&gt;%\n    visGroups(groupname = \"Person\", color = node_legend_colors_plot[[\"Person\"]], shape = node_legend_shapes_plot[[\"Person\"]]) %&gt;%\n    visGroups(groupname = \"Vessel\", color = node_legend_colors_plot[[\"Vessel\"]], shape = node_legend_shapes_plot[[\"Vessel\"]]) %&gt;%\n    visGroups(groupname = \"Organization\", color = node_legend_colors_plot[[\"Organization\"]], shape = node_legend_shapes_plot[[\"Organization\"]]) %&gt;%\n    visGroups(groupname = \"Location\", color = node_legend_colors_plot[[\"Location\"]], shape = node_legend_shapes_plot[[\"Location\"]]) %&gt;%\n    visGroups(groupname = \"Nadia Conti\", color = node_legend_colors_plot[[\"Nadia Conti\"]], shape = node_legend_shapes_plot[[\"Nadia Conti\"]]) %&gt;%\n      visLegend(\n    addNodes = legend_df,\n    ncol = 2,\n    position = \"left\",\n    main = \"Entity (Sub)Types\",\n    useGroups = FALSE) %&gt;%\n    visLayout(randomSeed = 123) %&gt;%\n    visNetwork::visExport() %&gt;%\n    visNetwork::visPhysics(enabled = TRUE) %&gt;%\n    visNetwork::visInteraction(navigationButtons = TRUE) %&gt;%\n    visNetwork::visEvents(stabilizationIterationsDone = \"function () {this.setOptions({physics:false});}\")\n}\n\n# Build and show visNetwork plots\nbuild_visnetwork_plot(edges_sent, \"Nadia Sent Ego Network\")\n\n\n\n\n8.2.2.2 Received Communications Network\n\n\n\n\n\n\n\n\n\n\nShow the code\nbuild_visnetwork_plot(edges_received, \"Nadia Received Ego Network\")\n\n\n\n\n8.2.3 Findings:\nWe then wanted to find more about the correspondences. The first graph illustrated Nadia’s sent communications and the second graph were her received communications. Hover over nodes to see the sent or received count from the perspective of the entity. Hover over arrowheads to see the number, direction, count, first and last correspondence time, type of sent or received, and content of one communication. Nadia sent only 8 but received 18 communications (possibly indicative of using a pseudonym):\n\nNodes involved: Nadia, Davis, Elise, Haacklee Habor, Liam, Marlin, Neptune, Oceanus City Council, Remora, Rodriguez, Sailor Shifts Team, Sentinel, V. Miesel Shipping.\nSent more direct communications to Liam (2) and Neptune (2), relative to others.\nReceived more from Davis (5), Elise (3), and Liam (2), relative to others.\nThe next step would be to find out the suspicious characters/ activities."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nadias-ego-network-2-hops-degree-centrality",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#nadias-ego-network-2-hops-degree-centrality",
    "title": "Take-home_Ex02",
    "section": "8.3 Nadia’s Ego Network: 2-hops degree centrality",
    "text": "8.3 Nadia’s Ego Network: 2-hops degree centrality\nTo uncover more details, we designed n-hops degree centrality here. We input 2 hops to hover over the nodes and look into the communications in a wider network. We understand that should there be requirements for details, we could look into 3-hops and more.\n\n\n\n\n\n\n\n\n\n\nShow the code\n# ---- 1. Define styles and legends ----\n\nlibrary(igraph)\n\nevent_subtypes &lt;- c(\n  \"Communication\", \"Monitoring\", \"VesselMovement\", \"Assessment\",\n  \"Collaborate\", \"Endorsement\", \"TourActivity\", \"TransponderPing\",\n  \"Harbor Report\", \"Fishing\", \"Criticize\"\n)\n\nrelationship_subtypes &lt;- c(\n  \"Coordinates\", \"AccessPermission\", \"Operates\", \"Colleagues\",\n  \"Suspicious\", \"Reports\", \"Jurisdiction\", \"Unfriendly\", \"Friends\"\n)\n\nnode_legend_colors_plot &lt;- c(\n  \"Person\" = \"#88CCEE\",\n  \"Vessel\" = \"#D55E00\",\n  \"Organization\" = \"#117733\",\n  \"Location\" = \"#AA4499\",\n  \"Group\"= \"#CC79A7\",\n  \"Event\" = \"#DDCC77\",\n  \"Relationship\" = \"#AF8DC3\"\n)\n\nnode_legend_shapes_plot &lt;- c(\n  \"Person\" = \"dot\",\n  \"Vessel\" = \"triangle\",\n  \"Organization\" = \"square\",\n  \"Location\" = \"diamond\",\n  \"Group\" = \"circle plus\",\n  \"Event\" = \"star\",\n  \"Relationship\" = \"square x\"\n)\n\nSTYLES &lt;- list(\n  node_label_dark = \"black\",\n  font_family = \"Roboto Condensed\"\n)\n\n# ---- Define ego extraction function ----\nextract_ego_subgraph &lt;- function(center_node = \"Nadia Conti\", hops = 2) {\n  g &lt;- graph_from_data_frame(\n    d = mc3_edges_final %&gt;% select(from = from_id, to = to_id),\n    vertices = mc3_nodes_final %&gt;% select(id) %&gt;% distinct() %&gt;% rename(name = id),\n    directed = TRUE\n  )\n  ego_graph &lt;- make_ego_graph(g, order = hops, nodes = center_node, mode = \"all\")[[1]]\n  node_ids &lt;- V(ego_graph)$name\n  edge_df &lt;- as_data_frame(ego_graph, what = \"edges\")\n\n  ego_nodes &lt;- mc3_nodes_final %&gt;%\n    filter(id %in% node_ids) %&gt;%\n    mutate(\n      label = ifelse(is.na(name), id, name),\n      tooltip_extra = case_when(\n        type == \"Event\" & sub_type == \"Communication\" ~ content,\n        type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n        type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n        type == \"Event\" & sub_type == \"Assessment\" ~ results,\n        type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n        type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n        type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n        TRUE ~ NA_character_\n      ),\n      title = paste0(\n        \"&lt;b&gt;\", label, \"&lt;/b&gt;&lt;br&gt;\",\n        \"Type: \", type, \"&lt;br&gt;\",\n        \"Sub-type: \", sub_type, \"&lt;br&gt;\",\n        ifelse(!is.na(tooltip_extra), paste0(\"&lt;br&gt;&lt;b&gt;Details:&lt;/b&gt; \", tooltip_extra), \"\")\n      ),\n      group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)\n    ) %&gt;%\n    select(id, label, group, title) %&gt;%\n    distinct()\n\n  list(nodes = ego_nodes, edges = edge_df)\n}\n\n# ---- Extract and build Nadia 2-hop ego network ----\nego_data &lt;- extract_ego_subgraph(\"Nadia Conti\", hops = 2)\n\nnodes &lt;- ego_data$nodes\nedges &lt;- ego_data$edges\n\n# Save for inspection or export\nnadia_ego_nodes_2hop &lt;- nodes\nnadia_ego_edges_2hop &lt;- edges\n\n# ---- Build visNetwork ----\nnet &lt;- visNetwork(nodes, edges, width = \"100%\", height = \"600px\") %&gt;%\n  visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visNodes(font = list(\n    size = 14,\n    color = STYLES$node_label_dark,\n    face = STYLES$font_family,\n    vadjust = -15\n  ))\n\n# ---- Apply shape and color per group ----\nfor (group_name in names(node_legend_colors_plot)) {\n  net &lt;- net %&gt;% visGroups(\n    groupname = group_name,\n    color = node_legend_colors_plot[[group_name]],\n    shape = node_legend_shapes_plot[[group_name]]\n  )\n}\n\n# ---- Add legend ----\nused_groups &lt;- unique(nodes$group)\n\nlegend_df &lt;- tibble::tibble(\n  label = used_groups,\n  shape = node_legend_shapes_plot[used_groups],\n  color = node_legend_colors_plot[used_groups]\n) %&gt;%\n  distinct(label, .keep_all = TRUE)\n\nnet &lt;- net %&gt;% visLegend(\n  addNodes = legend_df,\n  ncol = 2,\n  position = \"left\",\n  main = \"Entity (Sub)Types\",\n  useGroups = FALSE\n)\n\n# ---- Render ----\nnet\n\n\n\n8.3.1 Findings:\n\nNodes from 1-hop: Nadia, Davis, Elise, Haacklee Habor, Liam, Marlin, Neptune, Oceanus City Council, Remora, Rodriguez, Sailor Shifts Team, Sentinel, V. Miesel Shipping.\nAdditional nodes from 2-hop: EcoVigil, Sam, The Accountant, Nemo Reef.\nWe would then use these 2-hop nodes to drill in deeper to find suspicious relationships between nodes."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#summary-of-nadias-actions",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#summary-of-nadias-actions",
    "title": "Take-home_Ex02",
    "section": "8.4 Summary of Nadia’s Actions",
    "text": "8.4 Summary of Nadia’s Actions\n\n8.4.1 Sequential Timeline in Table (2-hop)\n\nThe Suspicious EntitiesThe Code\n\n\n\n\n                     sender_id   sender_type                recipient_id\n1                        Elise        Person Relationship_Suspicious_360\n2                  Liam Thorne        Person Relationship_Suspicious_317\n3                     EcoVigil        Vessel Relationship_Suspicious_457\n4                     Sentinel        Vessel Relationship_Suspicious_410\n5      Event_Communication_535 Communication Relationship_Suspicious_317\n6      Event_Communication_601 Communication Relationship_Suspicious_360\n7      Event_Communication_677 Communication Relationship_Suspicious_410\n8      Event_Communication_753 Communication Relationship_Suspicious_457\n9  Relationship_Suspicious_317    Suspicious        Oceanus City Council\n10 Relationship_Suspicious_360    Suspicious          V. Miesel Shipping\n11 Relationship_Suspicious_410    Suspicious        Oceanus City Council\n12 Relationship_Suspicious_457    Suspicious                 Liam Thorne\n   recipient_type\n1      Suspicious\n2      Suspicious\n3      Suspicious\n4      Suspicious\n5      Suspicious\n6      Suspicious\n7      Suspicious\n8      Suspicious\n9    Organization\n10   Organization\n11   Organization\n12         Person\n\n\n\n\n# Extract Nadia Conti's 2-hop ego network\ng &lt;- graph_from_data_frame(\n  d = mc3_edges_final %&gt;% select(from = from_id, to = to_id),\n  vertices = mc3_nodes_final %&gt;% select(id) %&gt;% distinct() %&gt;% rename(name = id),\n  directed = TRUE\n)\n\nego_graph &lt;- make_ego_graph(g, order = 2, nodes = \"Nadia Conti\", mode = \"all\")[[1]]\nnode_ids &lt;- V(ego_graph)$name\nedge_df &lt;- as_data_frame(ego_graph, what = \"edges\")\n\nnadia_ego_nodes_2hop &lt;- mc3_nodes_final %&gt;%\n  filter(id %in% node_ids) %&gt;%\n  mutate(\n    label = ifelse(is.na(name), id, name),\n    tooltip_extra = case_when(\n      type == \"Event\" & sub_type == \"Communication\" ~ content,\n      type == \"Event\" & sub_type == \"Monitoring\" ~ findings,\n      type == \"Event\" & sub_type == \"VesselMovement\" ~ destination,\n      type == \"Event\" & sub_type == \"Assessment\" ~ results,\n      type == \"Relationship\" & sub_type == \"Coordinates\" ~ coordination_type,\n      type == \"Relationship\" & sub_type == \"Operates\" ~ operational_role,\n      type == \"Relationship\" & sub_type == \"Jurisdiction\" ~ jurisdiction_type,\n      TRUE ~ NA_character_\n    )\n  )\n\nnadia_ego_edges_2hop &lt;- edge_df %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, sender_name = label, sender_sub_type = sub_type), by = c(\"from\" = \"id\")) %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, recipient_name = label, recipient_sub_type = sub_type), by = c(\"to\" = \"id\"))\n\nnadia_ego_comm_df &lt;- edge_df %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, name, sub_type), by = c(\"from\" = \"id\")) %&gt;%\n  rename(\n    sender_id = from,\n    sender_name = name,\n    sender_type = sub_type\n  ) %&gt;%\n  left_join(nadia_ego_nodes_2hop %&gt;% select(id, name, sub_type, content, findings, destination, results, coordination_type, operational_role, jurisdiction_type, timestamp), \n            by = c(\"to\" = \"id\")) %&gt;%\n  rename(\n    recipient_id = to,\n    recipient_name = name,\n    recipient_type = sub_type\n  ) %&gt;%\n  mutate(\n    details = coalesce(content, findings, destination, results, coordination_type, operational_role, jurisdiction_type),\n    timestamp = ymd_hms(timestamp)\n  ) %&gt;%\n  select(\n    sender_id, sender_name, sender_type,\n    recipient_id, recipient_name, recipient_type,\n    timestamp, details\n  )\n\n# Print table of suspicious activities/ characters\nsuspicious_links &lt;- nadia_ego_comm_df %&gt;%\n  filter(\n    grepl(\"Suspicious\", sender_type, ignore.case = TRUE) |\n    grepl(\"Suspicious\", recipient_type, ignore.case = TRUE)\n  ) %&gt;%\n  select(\n    sender_id, sender_type,\n    recipient_id, recipient_type\n  )\n\nprint(suspicious_links)\n\n\n\n\nElise, Liam, EcoVigil, Sentinel, Oceanus City Council, V. Miesel Shipping possibly found something suspicious or were involved in something suspicious.\n\n\n\n8.4.2 Plotted Timeline (2-hop)\n\n\nShow the code\n#Filtering communications that matches Nadia's 2 hop data\nevent_ids_to_extract &lt;- nadia_ego_comm_df %&gt;%\n  filter(str_starts(sender_id, \"Event_Communication_\")) %&gt;%\n  pull(sender_id) %&gt;%\n  unique()\n\nmatched_comms_df&lt;- other_communications_df %&gt;%\n  filter(event_id %in% event_ids_to_extract)\n\n# --- FACTORING and DATETIME CLEANING ---\nmatched_comms_df_for_plot &lt;- matched_comms_df %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    sender_sub_type = factor(sender_sub_type, levels = c(\"Person\", \"Vessel\", \"Organization\", \"Location\")),\n    communicating_pair_sorted = paste(pmin(sender_name, recipient_name), pmax(sender_name, recipient_name), sep = \" & \")\n  )\n\n# 7. Add wrapped tooltip content for timeline plotting\nplot_data &lt;- matched_comms_df_for_plot %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    date = as.Date(timestamp),\n    time = format(timestamp, \"%H:%M:%S\"),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", date, \"&lt;br&gt;\",\n      \"&lt;b&gt;Time:&lt;/b&gt; \", time, \"&lt;br&gt;\",\n      \"&lt;b&gt;Event_id:&lt;/b&gt; \", event_id, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;From:&lt;/b&gt; \", sender_name, \"&lt;br&gt;\",\n      \"&lt;b&gt;To:&lt;/b&gt; \", recipient_name, \"&lt;br&gt;&lt;br&gt;\",\n      \"&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# 8. Create plot with consistent 6-hour y-axis time scale\np &lt;-ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = sender_id,\n    shape = sender_sub_type,\n    text = tooltip_text\n  ),show.legend = c(color = TRUE, shape = FALSE), \n  size = 2, alpha = 0.7) +\n  scale_shape_manual(values = c(\"Person\" = 16, \n                                \"Vessel\" = 17,\n                                \"Organization\" = 15,\n                                \"Location\" = 18\n                                  )) +\n  facet_wrap(~ sender_sub_type, ncol = 1, scales = \"fixed\") +\n    scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"14:00:00\")),  # reversed to show time top-to-bottom\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\", \"14:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\")\n)+\n  scale_x_date(\n  date_breaks = \"1 day\",\n  date_labels = \"%d %b\"\n)+\n\n  facet_wrap(~ sender_sub_type, ncol = 1) +\n  labs(\n    title = \"Nadia's 2-hop Communications (Sender's perspective)\",\n    x = \"Date\", y = \"Time of Day\", color = \"Sender (subtype, name)\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# 9. Make interactive with Plotly\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#discussioninterpretation-1-2-hop-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#discussioninterpretation-1-2-hop-data",
    "title": "Take-home_Ex02",
    "section": "8.5 Discussion/Interpretation (1 & 2 hop data):",
    "text": "8.5 Discussion/Interpretation (1 & 2 hop data):\nThere were certain questions we posted to ourselves and came out with the answers.\n\n8.5.1 The Community and Ego Network:\n\nQuestion and Answer Analysis\n\n\n\n\n\n\n\nQuestion\nAnswer\n\n\n\n\nWho were Nadia’s direct communication contacts (1-hop degree centrality)? Are any of them known to be suspicious or involved in illicit activities?\nFrom the thicker width in the Ego network, it appeared that Nadia often communicated with Liam, Elise, and Davis.\nLiam appeared to be The Middleman within Nadia’s direct community from the Louvain Community Network.\nFrom the filtered table on suspicious relationships, Elise, Liam, EcoVigil, Sentinel, Oceanus City Council, and V. Miesel Shipping were noted to have suspicious relationships.\nTheir conversations were the area of focus to uncover their roles, relationships and identities.\n\n\nWere there any other ‘Event’ or ‘Relationship’ nodes directly connected to Nadia in this communication network that hinted at suspicious people/ activities?\nBased on information from question 2, Rodriguez was previously involved in mining activities that affected the environment. ‘Mining’ as a topic and his conversations would be tracked.\n\n\n\n\n\n\n8.5.2 The Communication Timeline and Content:\nIn the nadia_full_communications_timeline table, the actual content of her direct two-way communications were investigated over the course of 9 days. There were certain suspicious entities, keywords, coded language, or unusual topics detected that were suspicious. We have tabled out the segmented suspicious and non-suspicious entities for investigation and elimination.\n\nNot in the Network but Mentioned in the ContentSuspicious EntityNon Suspicious Entity\n\n\n\n\n\n\n\n\n\n\n\nEntity\nForm of Subject Matter\nRationale\nEvent ID\n\n\n\n\nNemo Reef\nLocation\nLikely conservation area which was picked by the characters for illicit activities.\n331, 943\n\n\nPermit #CR-7844\nItem\nLikely a permit to show tourism activity as a cover for suspicious activities. Rodriguez is likely linked to vessels Mako, Neptune, and Remora operating under this permit with a tourism facade.\n582, 847, 805\n\n\nEcoVigil\nVessel\nEcoVigil will likely affect Nadia’s operations when they use their ROV. Nadia recommended to V. Miesel to accelerate the planned operation. They were likely working for different sides.\n753, 847\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuspicious Entity\nSub Type\nCommunity\nRationale\nEvent ID\n\n\n\n\nHaacklee Harbor\nLocation\n2\nNadia’s communication to Haacklee Harbor is suspicious when she wanted the documents destroyed and the special corridor to Nemo Reef cancelled.\n331\n\n\nLiam aka The Middleman\nPerson\n2\nNadia wanted him to double his usual fee to ensure Harbor Master remains cooperative. Identity revealed through:\n529, 795, 847\n\n\nDavis\nPerson\n1\nNadia told him to create a clean paper trail. She will provide permits.\n521\n\n\nElise aka Mrs. Money\nPerson\n1\nNadia warned Elise that conservation vessels might complicate their operation. Identity revealed through:\n708, 528, 538, 677\n\n\nRodriguez aka Small Fry\nPerson\n1\nLinked to Mako, which is operating under a permit with a tourism facade.\n805\n\n\nRemora\nVessel\n1\nRemora reported a tourism facade to Nadia and planned underwater lighting placements in Nemo Reef while monitoring conservation vessels.\n943\n\n\nNeptune\nVessel\n1\nNadia told Neptune to stay under the radar.\n538\n\n\nV. Miesel HQ\nOrganisation\n1\nOrganisation was aware of the suspicious permit and The Middleman.\n846, 847\n\n\nSailor Shifts Team aka Glitters Team\nOrganisation\n1\nNadia provided crew members for the setup related to the permit.\n520\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNon Suspicious Entity\nSub Type\nCommunity\nRationale\nEvent ID\n\n\n\n\nOceanus City Council\nOrganisation\n2\nOceanus City Council as a whole is not suspicious as an organisation as Liam stated this organisation suspected nothing.\n535\n\n\nSentinel\nVessel\n2\nSentinel Vessel suspected ulterior motives as the water quality was fine.\n677\n\n\nMarlin\nVessel\n2\nMarlin inquired about unusual vessel routes near eastern shoals, Nadia and Davis might need to address this.\n584"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#querying-keywords",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#querying-keywords",
    "title": "Take-home_Ex02",
    "section": "8.6 Querying Keywords",
    "text": "8.6 Querying Keywords\nBased on our knowledge, we decided to connect to external information. We used knowledge from Nadia’s current network and communication with keyword search of our queries.\n\n8.6.1 Plotted Timeline (Word Query: Permit related)\n\n\nShow the code\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(hms)\nlibrary(tidyr)\n\n# -- Step 1: Define keywords\nkeywords &lt;- c(\"permit\", \"1045\", \"7844\")\npattern &lt;- paste0(\"\\\\b(\", paste(keywords, collapse = \"|\"), \")\\\\b\")\n\n# -- Step 2: Filter messages\nsearch_target_content &lt;- tolower(other_communications_df$content)\n\nkeyword_matches_df &lt;- other_communications_df %&gt;%\n  filter(str_detect(search_target_content, pattern))\n\n# -- Step 3: Extract keywords\nplot_data &lt;- keyword_matches_df %&gt;%\n  mutate(matched_keywords = str_extract_all(tolower(content), pattern)) %&gt;%\n  unnest(matched_keywords) %&gt;%\n  mutate(matched_keywords = str_to_title(matched_keywords)) %&gt;%\n  arrange(matched_keywords, timestamp) %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", comm_date,\n      \"&lt;br&gt;&lt;b&gt;Time:&lt;/b&gt; \", comm_time_of_day,\n      \"&lt;br&gt;&lt;b&gt;Event ID:&lt;/b&gt; \", event_id,\n      \"&lt;br&gt;&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# -- Step 4: Plot\np &lt;- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = matched_keywords,\n    shape = sender_sub_type,\n    text = tooltip_text,\n    group = matched_keywords  # ensures matched_keywords is in layer\n  ), size = 2.5, alpha = 0.7, show.legend = TRUE) +\n  scale_shape_manual(values = c(\n    \"Person\" = 16,\n    \"Vessel\" = 17,\n    \"Organization\" = 15,\n    \"Location\" = 18\n  )) +\n  facet_wrap(~ matched_keywords, ncol = 1, scales = \"fixed\") +\n  scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"13:00:00\")),\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\")\n  ) +\n  scale_x_date(date_breaks = \"1 day\", date_labels = \"%d %b\") +\n  labs(\n    title = \"Interactive Timeline: Keyword Mentions by Day and Time\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    shape = \"Sender Type\",\n    color = \" \"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# -- Step 5: Convert to plotly\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\n8.6.1.1 Findings in sequential order:\n\nThere were overlaps as the blue permit also included the red NR-1045 permit and green CR-7844 permit.\n\n\n\nShow the code\nlibrary(reactable)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(readr) # Used for read_lines\n\n# 1. Prepare data from the text provided\ndata_text &lt;- \"\nDate & Time | Event Description\n------------|---------------------------------------------------------------------------------------------------------------\n2 Oct (12:16pm) | Rodriguez was from the Sailor Shifts Team.\n5 Oct (10:54am) | Jensen from City Council approved Nemo Reef permit.\n6 Oct (9:57am) | Remora told Sailor Shifts Team that Nadia got Commissioner Torres to sign off the permit.\n6 Oct (10:45am) | Mako acknowledged NR-1045 permit to Nemo Reef.\n6 Oct (12:33pm) | Mako was lead vessel to Neptune and Remora as authorised by V. Miesel Shipping.\n7 Oct (9:40am) | Mako was operating under permit NR-1045 for conservation research.\n8 Oct (10:24am) | Mako was operating under V. Miesel's special marine research permit CR-7844 approved by Oceanus City Council.\n8 Oct (10:30am) | Mako informed Remora that both of them were operating under permit CR-7844 and have a 5 day deadline.\n8 Oct (10:40am) | Remora was approved by Paackland Harbor to operate with extended hours under permit NR-1045.\n9 Oct (11:53am) | Mako requesed for additional crew from v Miesel Shipping for the 24hr operations over next 5 days.\n11 Oct (6:00am) | Nemo Reef closure mandated by Oceanus City Council.\n11 Oct (8:57am) | All research permits must be submitted within 72 hours.\n11 Oct (10:05am) | V. Miesel Shipping informed Remora that 30% of her crew to be reassigned to Neptune.\n12 Oct (10:01am) | Davis as Captain oversaw crew reallocation.\n12 Oct (11:19am) | Nadia secured documentation for CR-7844.\n12 Oct (12:52pm) | Harbor closure for 3 days from 13 Oct 06:00.\n\"\n\n# Parse the data into a data frame\n# Use read_lines to handle the multi-line string\ndata_lines &lt;- read_lines(data_text)\n\n# Remove the header separator line and any empty lines\ndata_lines &lt;- data_lines[!grepl(\"^---|===\", data_lines) & data_lines != \"\"]\n\n# The first non-separator line is the header\ncol_names_raw &lt;- str_split(data_lines[1], \"\\\\|\")[[1]]\ncol_names &lt;- str_trim(col_names_raw)\n\n# The rest are data rows\ndata_content &lt;- data_lines[-1]\n\n# Create data frame by splitting lines and putting into a tibble\ndf &lt;- tibble(line = data_content) %&gt;%\n  mutate(\n    `Date & Time` = str_trim(str_extract(line, \"^[^|]+\")),\n    `Event Description` = str_trim(str_extract(line, \"(?&lt;=\\\\|).+$\"))\n  ) %&gt;%\n  select(`Date & Time`, `Event Description`) # Ensure correct column order and names\n\n# 2. Create the reactable table with desired features\n\nreactable(\n  df,\n  filterable = TRUE, # Enable column-specific filters (from the tutorial)\n  searchable = TRUE, # Enable global search box (from the tutorial)\n  paginationType = \"numbers\", # Display page numbers (corrected from \"pages\")\n  defaultPageSize = 5, # Show 5 rows per page\n  showPageSizeOptions = TRUE, # Allow users to change page size\n  pageSizeOptions = c(5, 10, 15, 20, 50), # Options for page sizes\n  striped = TRUE, # Add alternating row colors (from the tutorial)\n  highlight = TRUE, # Highlight row on hover (from the tutorial)\n  columns = list(\n    `Date & Time` = colDef(\n      name = \"Date & Time\",\n      minWidth = 120, # Adjust width to fit content\n      align = \"left\"\n    ),\n    `Event Description` = colDef(\n      name = \"Event Description\",\n      minWidth = 500, # Ensure enough width for event descriptions\n      align = \"left\"\n    )\n  ),\n  # Apply a custom theme for better aesthetics (inspired by the tutorial)\n  theme = reactableTheme(\n    borderColor = \"#dfe2e5\",\n    stripedColor = \"#f6f8fa\",\n    highlightColor = \"#f0f5f9\",\n    cellPadding = \"8px 12px\",\n    style = list(fontFamily = \"Verdana, Geneva, sans-serif\", fontSize = \"14px\"),\n    headerStyle = list(\n      \"&.rt-th:hover\" = list(backgroundColor = \"#e0e6eb\"),\n      fontSize = \"15px\",\n      fontWeight = 600,\n      color = \"#333\", # Darker header text for contrast\n      background = \"#f7f7f7\" # Slightly grey background for header\n    ),\n    rowSelectedStyle = list(backgroundColor = \"#e6f2ff\", \"&:hover\" = list(backgroundColor = \"#e6f2ff\")),\n    # Styles for search/filter inputs (from tutorial's theme example)\n    searchInputStyle = list(width = \"100%\", margin = \"5px 0\", padding = \"5px\"),\n    filterInputStyle = list(width = \"100%\", margin = \"2px 0\", padding = \"4px\")\n  )\n)\n\n\n\n\n\n\n\nSince there were little communications on 13 Oct, we looked into other word queries.\nUsing information obtained from question 2 and 4, we had in mind certain keywords to query for.\n\n\n\n8.6.2 Plotted Timeline (Word Query: Music Video Related)\n\n\nShow the code\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(hms)\nlibrary(tidyr)\n\n# -- Step 1: Define keywords\nkeywords &lt;- c(\"mine\", \"mining\", \"music video\", \"lighting\", \"reef operation\")\npattern &lt;- paste0(\"\\\\b(\", paste(keywords, collapse = \"|\"), \")\\\\b\")\n\n# -- Step 2: Filter messages\nsearch_target_content &lt;- tolower(other_communications_df$content)\n\nkeyword_matches_df &lt;- other_communications_df %&gt;%\n  filter(str_detect(search_target_content, pattern))\n\n# -- Step 3: Extract keywords\nplot_data &lt;- keyword_matches_df %&gt;%\n  mutate(matched_keywords = str_extract_all(tolower(content), pattern)) %&gt;%\n  unnest(matched_keywords) %&gt;%\n  mutate(matched_keywords = str_to_title(matched_keywords)) %&gt;%\n  arrange(matched_keywords, timestamp) %&gt;%\n  mutate(\n    timestamp = as.POSIXct(timestamp),\n    comm_date = as.Date(timestamp),\n    comm_time_of_day = hms::as_hms(format(timestamp, \"%H:%M:%S\")),\n    wrapped_content = str_wrap(content, width = 50),\n    tooltip_text = paste0(\n      \"&lt;b&gt;Date:&lt;/b&gt; \", comm_date,\n      \"&lt;br&gt;&lt;b&gt;Time:&lt;/b&gt; \", comm_time_of_day,\n      \"&lt;br&gt;&lt;b&gt;Event ID:&lt;/b&gt; \", event_id,\n      \"&lt;br&gt;&lt;b&gt;From:&lt;/b&gt; \", sender_name,\n      \"&lt;br&gt;&lt;b&gt;To:&lt;/b&gt; \", recipient_name,\n      \"&lt;br&gt;&lt;b&gt;Content:&lt;/b&gt;&lt;br&gt;\", wrapped_content\n    )\n  )\n\n# -- Step 4: Plot\np &lt;- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +\n  geom_point(aes(\n    color = matched_keywords,\n    shape = sender_sub_type,\n    text = tooltip_text,\n    group = matched_keywords  # ensures matched_keywords is in layer\n  ), size = 2.5, alpha = 0.7, show.legend = TRUE) +\n  scale_shape_manual(values = c(\n    \"Person\" = 16,\n    \"Vessel\" = 17,\n    \"Organization\" = 15,\n    \"Location\" = 18\n  )) +\n  facet_wrap(~ matched_keywords, ncol = 1, scales = \"fixed\") +\n  scale_y_time(\n    limits = hms::as_hms(c(\"08:00:00\", \"13:00:00\")),\n    breaks = hms::as_hms(c(\"08:00:00\", \"09:00:00\", \"10:00:00\", \"11:00:00\", \"12:00:00\", \"13:00:00\")),\n    labels = c(\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\")\n  ) +\n  scale_x_date(date_breaks = \"1 day\", date_labels = \"%d %b\") +\n  labs(\n    title = \"Interactive Timeline: Keyword Mentions by Day and Time\",\n    x = \"Date\",\n    y = \"Time of Day\",\n    shape = \"Sender Type\",\n    color = \"Keyword\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.y = element_text(size = 6),\n    axis.title.y = element_text(size = 7),\n    axis.ticks.y = element_line(),\n    axis.text.x = element_text(size = 6, angle = 45, hjust = 1),\n    axis.title.x = element_text(margin = margin(t = 10), size = 7),\n    panel.spacing = unit(0.5, \"lines\"),  # Applies to both x and y spacing\n    strip.text = element_text(size = 8, face = \"bold\"),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 6),\n    legend.title = element_blank()\n  )\n\n# -- Step 5: Convert to plotly\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\n8.6.2.1 Findings through Questions & Answers:\n\nQuestion and Answer Analysis\n\n\n\n\n\n\n\nQuestion\nAnswer\n\n\n\n\nWhich vessel was the suspicious permit #CR-7844 prepared for?\n(See 8.6.1)\nFrom question 2 and 4, we know this is V. Miesel’s Marine Research Permit, and prepared for Mako (lead vessel), Neptune, and Remora.\n\n\nWhat suspicious activity was performed at Nemo Reef? Which day was it?\n(See 8.6.2)\n14 Oct 2040 for a music video production.\n\n\nWhy is underwater lighting placement needed at Nemo Reef?\n(See 8.6.2)\nFor a music video production.\n\n\nWhat were the expedited approvals and secretive logistics?\n(See 8.6.1)\nPermits for Nemo Reef through NR-1045 and CR-788 were expedited. The secretive logistics were the crates and equipment on the vessels for the music video production.\n\n\nWho were the high-level Oceanus officials, Sailor Shift’s team, local influential families, and local conservationist group?\n(Various Ids)\nOceanus Officials: Commissioner Blake, Commissioner Torres, Council Knowles, The Middleman, Jensen, Liam Thorne\nSailor Shift’s Team: Boss, Council Knowles, Davis, Glitters Team, Liam Thorne, Mako, Mrs. Money, Nadia, Neptune, Remora, Rodriguez, Sam, Samantha Blake, Small Fry, The Accountant, The Intern, The Middleman\nLocal Influential Families: Council Knowles, V. Miesel Shipping\nLocal Conservationist Group: Defender, EcoVigil, Green Guardians, Horizon, Kelly, Reef Guardians, Seawatch, Sentinel, The Lookout\n\n\nWas the music video production activity legal?\n(Id 979)\nThere was no environmental damage or mining involved in the music production. However, an environmental assessment was not conducted prior. Clepper may assess that his suspicions about Nadia Conti’s illicit activity may not be straightforward and could depend on whether an assessment was mandatory before commercial activities."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#entities-breakdown",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#entities-breakdown",
    "title": "Take-home_Ex02",
    "section": "9.1 Entities Breakdown",
    "text": "9.1 Entities Breakdown\nCore Logic:\n\nIf two names appear as sender and recipient in the same message, they cannot belong to the same person — i.e., they’re not aliases of each other.\nIf two names sent a message at the exact time, they cannot belong to the same person.\n\nWe created Alluvia Diagrams to chart: real_identity → observed_name → community\n\nExtraction of the list of Entity namesManual Mapping\n\n\n\nunique_names &lt;- sort(unique(c(other_communications_df$sender_name, \n                              other_communications_df$recipient_name)))\nunique_names\n\n [1] \"Boss\"                 \"City Officials\"       \"Clepper Jensen\"      \n [4] \"Davis\"                \"Defender\"             \"EcoVigil\"            \n [7] \"Elise\"                \"Glitters Team\"        \"Green Guardians\"     \n[10] \"Haacklee Harbor\"      \"Himark Harbor\"        \"Horizon\"             \n[13] \"Kelly\"                \"Knowles\"              \"Liam Thorne\"         \n[16] \"Mako\"                 \"Marlin\"               \"Miranda Jordan\"      \n[19] \"Mrs. Money\"           \"Nadia Conti\"          \"Neptune\"             \n[22] \"Northern Light\"       \"Oceanus City Council\" \"Osprey\"              \n[25] \"Paackland Harbor\"     \"Port Security\"        \"Reef Guardian\"       \n[28] \"Remora\"               \"Rodriguez\"            \"Sailor Shifts Team\"  \n[31] \"Sam\"                  \"Samantha Blake\"       \"Seawatch\"            \n[34] \"Sentinel\"             \"Serenity\"             \"Small Fry\"           \n[37] \"The Accountant\"       \"The Intern\"           \"The Lookout\"         \n[40] \"The Middleman\"        \"V. Miesel Shipping\"  \n\n\n\n\n\nname_mapping &lt;- tibble::tibble(\n  observed_name = c(\n    \"Boss\", \"City Officials\", \"Clepper Jensen\", \"Davis\", \"Defender\", \"EcoVigil\",\n    \"Elise\", \"Glitters Team\", \"Green Guardians\", \"Haacklee Harbor\", \"Himark Harbor\", \"Horizon\",\n    \"Kelly\", \"Knowles\", \"Liam Thorne\", \"Mako\", \"Marlin\", \"Miranda Jordan\",\n    \"Mrs. Money\", \"Nadia Conti\", \"Neptune\", \"Northern Light\", \"Oceanus City Council\", \"Osprey\",\n    \"Paackland Harbor\", \"Port Security\", \"Reef Guardian\", \"Remora\", \"Rodriguez\", \"Sailor Shift Team\",\n    \"Sam\", \"Samantha Blake\", \"Seawatch\", \"Sentinel\", \"Serenity\", \"Small Fry\",\n    \"The Accountant\", \"The Intern\", \"The Lookout\", \"The Middleman\", \"V. Miesel Shipping\"\n  ),\n  real_identity = c(\n    \"Nadia Conti\", \"Oceanus City Council\", \"Clepper Jensen\", \"Captain Davis\", \"Sentinel\", \"EcoVigil\",\n    \"Elise\", \"Sailor Shift Team\", \"Green Guardians\", \"Harbor Authority\",\"Harbor Authority\", \"Horizon\",\n    \"Kelly\", \"Knowles\", \"Liam Thorne\", \"Mako\", \"Small Fishing Vessel\", \"Miranda Jordan\",\n    \"Elise\", \"Nadia Conti\", \"Neptune\", \"Commercial Vessel\", \"Oceanus City Council\", \"Tourism Vessel\",\n    \"Harbor Authority\", \"Oceanus City Council\", \"Reef Guardian\", \"Remora\", \"Rodriguez\", \"Sailor Shift Team\",\n    \"Sam\", \"Samantha Blake\", \"Kelly\", \"Sentinel\", \"Private Luxury Yacht\", \"Rodriguez\",\n    \"Elise\", \"Sam\", \"Kelly\", \"Liam Thorne\", \"V. Miesel Shipping\"\n  ),\n  community = c(\n    \"V. Miesel Shipping\", \"City Council\", \"Haacklee Herald\", \"V. Miesel Shipping\", \"Local Conservationist Group\", \"Local Conservationist Group\",\n    \"V. Miesel Shipping\", \"Sailor Shift Team\", \"Local Conservationist Group\", \"Harbor Authority\", \"Harbor Authority\", \"Local Conservationist Group\",\n    \"Local Conservationist Group\", \"V. Miesel Shipping\", \"City Council\", \"V. Miesel Shipping\", \"Maritime\", \"Haacklee Herald\",\n    \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Maritime\", \"City Council\", \"Maritime\",\n    \"Harbor Authority\", \"City Council\", \"Local Conservationist Group\", \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Sailor Shift Team\",\n    \"V. Miesel Shipping\", \"Sailor Shift Team\", \"Local Conservationist Group\", \"Local Conservationist Group\", \"Maritime\", \"V. Miesel Shipping\",\n    \"V. Miesel Shipping\", \"V. Miesel Shipping\", \"Local Conservationist Group\", \"City Council\", \"V. Miesel Shipping\"\n  )\n)\n\nmulti_members &lt;- tibble::tibble(\n  observed_name = c(\n    #  City Council members (additional to existing)\n    \"Commissioner Blake\", \"Commissioner Torres\", \"Council Knowles\", \"The Middleman\", \"Jensen from City Council\", \"Liam Thorne\",\n\n    # Sailor Shift Team (may already exist, but we ensure all)\n    \"Boss\", \"Council Knowles\", \"Davis\", \"Glitters Team\", \"Liam Thorne\", \"Mako\", \"Mrs. Money\", \"Nadia Conti\", \"Neptune\",\n    \"Remora\", \"Rodriguez\", \"Sam\", \"Samantha Blake\", \"Small Fry\", \"The Accountant\", \"The Intern\", \"The Middleman\", \"Elise\",\n\n    #  Influential Families\n    \"Council Knowles\", \"V. Miesel Shipping\",\n\n    #  Conservationist Group\n    \"Defender\", \"EcoVigil\", \"Green Guardians\", \"Horizon\", \"Kelly\", \"Reef Guardian\", \"Seawatch\", \"Sentinel\", \"The Lookout\"\n  ),\n  real_identity = c(\n    \"Commissioner Blake\", \"Commissioner Torres\", \"Council Knowles\", \"Liam Thorne\", \"Clepper Jensen\", \"Liam Thorne\",\n\n    \"Nadia Conti\", \"Council Knowles\", \"Captain Davis\", \"Sailor Shift Team\", \"Liam Thorne\", \"Mako\", \"Elise\", \"Nadia Conti\", \"Neptune\",\n    \"Remora\", \"Rodriguez\", \"Sam\", \"Samantha Blake\", \"Rodriguez\", \"Elise\", \"Sam\", \"Liam Thorne\", \"Elise\",\n\n    \"Council Knowles\", \"V. Miesel Shipping\",\n\n    \"Sentinel\", \"EcoVigil\", \"Green Guardians\", \"Horizon\", \"Kelly\", \"Reef Guardian\", \"The Lookout\", \"Sentinel\", \"Kelly\"\n  ),\n  community = c(\n    rep(\"City Council\", 6),\n    rep(\"Sailor Shift Team\", 18),\n    rep(\"Influential Families\", 2),\n    rep(\"Local Conservationist Group\", 9)\n  )\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#entities--interactive-alluvia-diagrams",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#entities--interactive-alluvia-diagrams",
    "title": "Take-home_Ex02",
    "section": "9.1.1 Entities- Interactive Alluvia Diagrams",
    "text": "9.1.1 Entities- Interactive Alluvia Diagrams\nCreated Alluvial Diagram. Hover over to see details for individual identities.\nReal Identity from analysis -&gt; Observed Name from data -&gt; Community\n\n\nShow the code\n# --- Libraries ---\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggalluvial)\nlibrary(stringr)\nlibrary(plotly)\n\n# --- 1. Build Alluvial Dataset ---\nalluvial_data &lt;- name_mapping %&gt;%\n  bind_rows(multi_members) %&gt;% # Combine the two data sources\n  distinct() %&gt;% # Remove any duplicate rows after combining\n  filter(!is.na(real_identity) & !is.na(community)) %&gt;%\n  count(real_identity, observed_name, community, name = \"value\") %&gt;%\n  mutate(tooltip = paste0( # Create the tooltip string\n    \"Real Identity: \", real_identity, \"&lt;br&gt;\",\n    \"Observed Name: \", observed_name, \"&lt;br&gt;\",\n    \"Community: \", community, \"&lt;br&gt;\",\n    \"Count: \", value\n  ))\n\n# --- 3. Create static ggplot object (original version) ---\np &lt;- ggplot(alluvial_data,\n            aes(axis1 = real_identity, axis2 = observed_name, axis3 = community,\n                y = value,\n                text = tooltip # Map the custom tooltip string to the 'text' aesthetic\n            )) +\n  geom_alluvium(aes(fill = real_identity), width = 1/12, alpha = 0.8) +\n  geom_stratum(width = 1/12, fill = \"grey90\", color = \"black\", aes(text = NULL)) + # No dual-role fill here\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), size = 3.5, hjust = 0) +\n  scale_x_discrete(\n    limits = c(\"Real Identity\", \"Observed Name\", \"Community\"),\n    expand = c(.05, .25)\n  ) +\n  labs(\n    title = \"All Identity Flows\",\n    x = NULL, y = \"Link Count\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\", # No legend for fill here\n    panel.grid = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    plot.margin = margin(10, 80, 10, 10),\n    axis.text.x = element_text(face = \"bold\")\n  )\n\n# --- 4. Convert to interactive Plotly object ---\n# 'tooltip = \"text\"' tells Plotly to use the content of the 'text' aesthetic\ninteractive_plot &lt;- ggplotly(p, tooltip = \"text\", height = 800, width = 1000)\ninteractive_plot # This line will print the Plotly object in  Quarto output\n\n\n\n\n\n\nWe created a graph with the character’s original name, pseudonyms, and supplemented with any background information we learnt of. For instance, we learnt that Davis was a captain, or that Serenity was a private luxury yacht."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#recreation-of-story-line",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#recreation-of-story-line",
    "title": "Take-home_Ex02",
    "section": "9.2 Recreation of Story-Line",
    "text": "9.2 Recreation of Story-Line\n\n\nShow the code\n# --- Step 0: Define Event Data for Annotations ---\nevent_dates &lt;- as.Date(c(\"2040-10-01\", \"2040-10-03\", \"2040-10-04\", \"2040-10-05\",\n                         \"2040-10-06\", \"2040-10-08\", \"2040-10-09\", \"2040-10-11\",\n                         \"2040-10-12\", \"2040-10-14\"))\n\nevent_labels_full &lt;- c(\n  \"The Middleman told The Boss (Nadia) about a potential loophole in Nemo Reef protection zone\",\n  \"Tourism vessels were offering authorised access. Their violations were addressed at City Council meeting\",\n  \"Nadia told Mako to abort Nemo Reef mission as conservation vessels were close\",\n  \"News of Nadia assisting to get permit for Nemo Reef signed by Jensen from City Council on 4/10 spreaded\",\n  \"V. Miesel Shipping HQ told Neptune that Mako is lead vessel\",\n  \"Neptune told Mako they were under special marine research permit CR-7844\",\n  \"Neptune's underwater concrete forms in fragile crates discovered\",\n  \"37 'authorised maintenance vessels' documented despite Nemo Reef closure\",\n  \"Crew reallocated from Remona to Neptune overseen by Captain Davis\",\n  \"Music video production after Nemo Reef equipment transfer\"\n)\n\nevent_labels_short &lt;- c(\n  \"Loophole\", \"Tourism\", \"Mako\", \"Permit\\nResults\", \"#NR-1045\",\n  \"#CR-7844\", \"Underwater\\nStructure\", \"37 Vessels\", \"Shifted Crew\", \"MV\\nProduction\"\n)\n\n# --- Step 1: Calculate Daily Message Frequencies ---\nfreq_df &lt;- other_communications_df %&gt;%\n  mutate(comm_date = as.Date(timestamp)) %&gt;%\n  count(comm_date, name = \"message_count\") %&gt;%\n  # Complete the date range to include all days, filling missing counts with 0\n  complete(comm_date = seq(min(comm_date), max(comm_date), by = \"day\"),\n           fill = list(message_count = 0))\n\n# --- Step 2: Build Event Annotation Table ---\nevent_df &lt;- tibble(\n  date = event_dates,\n  label = gsub(\"\\n\", \"&lt;br&gt;\", event_labels_short), # Replace \\n with &lt;br&gt; for HTML tooltips\n  tooltip_raw = str_wrap(event_labels_full, width = 40) # Wrap long text for tooltips\n)\n\ncore_events &lt;- event_df %&gt;%\n  left_join(freq_df, by = c(\"date\" = \"comm_date\")) %&gt;%\n  group_by(date) %&gt;%\n  mutate(\n    offset = row_number(), # For stacking multiple events on the same day\n    # Adjust value for arrow positioning relative to message count\n    value = as.numeric(message_count) + 0.5 * offset,\n    date_jitter = date + (offset - 1) * 0.1 # Slight horizontal jitter if multiple events\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    # Create rich HTML tooltip content for Plotly\n    tooltip = paste0(\n      \"📅 &lt;b&gt;Date:&lt;/b&gt; \", date,\n      \"&lt;br&gt;✉️ &lt;b&gt;Messages:&lt;/b&gt; \", message_count,\n      \"&lt;br&gt;📝 &lt;b&gt;Core Event:&lt;/b&gt; \", tooltip_raw\n    )\n  )\n\n# --- Step 3: Create the ggplot2 Plot ---\np &lt;- ggplot(freq_df, aes(x = comm_date, y = message_count)) +\n  # Line plot for message frequency\n  geom_line(color = \"navyblue\") +\n  # Segments (arrows) pointing from the line to the event annotations\n  geom_segment(\n    data = core_events,\n    aes(x = date, xend = date, y = value - 1, yend = value + 0.5), # Adjust yend for arrow tip\n    arrow = arrow(length = unit(0.15, \"inches\")), color = \"grey40\"\n  ) +\n  # Points for the events (these will have the interactive tooltips)\n  geom_point(\n    data = core_events,\n    aes(x = date, y = value + 0.5, text = tooltip), # 'text' aesthetic is key for Plotly tooltips\n    color = \"firebrick\", size = 3\n  ) +\n  # Text labels for the short event names\n  geom_text(\n    data = core_events,\n    aes(x = date, y = value + 2, label = label), # Position text above the point/arrow\n    color = \"black\", fontface = \"bold\", size = 2.5, vjust = 0\n  ) +\n  # X-axis scale for dates\n  scale_x_date(date_breaks = \"1 day\", date_labels = \"%b %d\") +\n  # Labels and titles\n  labs(\n    title = \"Message Frequency Over Time\",\n    x = \"Date\", y = \"Message Count\"\n  ) +\n  # Ensure annotations are not clipped by plot limits\n  coord_cartesian(clip = \"off\") +\n  # Minimal theme for a clean look\n  theme_grey(base_size = 10) +\n  # Further theme adjustments\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(face=\"bold\"),\n    plot.margin = margin(30, 30, 10, 10), # Adjust plot margins if needed\n  )\n\n# --- Step 4: Convert to Interactive Plotly Object ---\n# The 'tooltip = \"text\"' argument tells Plotly to use the 'text' aesthetic\n# for the hover information, which we created as 'tooltip' in core_events.\np_interactive &lt;- ggplotly(p, tooltip = \"text\")\n\n# --- Step 5: Display the Interactive Plot ---\np_interactive\n\n\n\n\n\n\nHover over the red points to see the details. Here, we provided a high level summary on the core event on the preparation and production of the music video Nadia was involved in for a period of 2 weeks, and also provided a snippet to the sub-event of the tourism vessels breaching protocols earlier in the week."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class_Ex06",
    "section": "",
    "text": "View my Tableau profile :"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "View my Tableau profile :"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise we will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise we will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "6.2 Getting Started",
    "text": "6.2 Getting Started\n\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse,\n               magick)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "6.3 Plotting Calendar Heatmap",
    "text": "6.3 Plotting Calendar Heatmap\nIn this section, we plot a calender heatmap programmatically by using ggplot2 package.\n\n\n\n\n\n\n\n\n\nSection Outcome:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\n6.3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n6.3.2 Importing the data\nFirst, the code chunk below is used to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\n6.3.3 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address.\n\n\n\n6.3.4 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n6.3.5 Building the Calendar Heatmaps\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\n\n\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\n6.3.6 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\n\n\n\n\n\n\n\n\n6.3.7 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, we perform the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(   \n  attacks, source_country) %&gt;%   \n  mutate(percent = percent(n/sum(n))) %&gt;%   \n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, we extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n6.3.8 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "6.4 Plotting Cycle Plot",
    "text": "6.4 Plotting Cycle Plot\nIn this section, we plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\n\n\n\n\n\n\n\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\nStep 3: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\nStep 4: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nStep 5: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")+\n  theme_gray()+\n  theme(axis.text.x = element_text(angle = 90, size=6))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "6.5 Plotting Slopegraph",
    "text": "6.5 Plotting Slopegraph\nIn this section we will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment.\n\nStep 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\nStep 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n#| fig-height: 6 \nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",                \n                Caption = \"Prepared by: AT\")\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#self-sourced-dataset-sandhill-cranes",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#self-sourced-dataset-sandhill-cranes",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "6.6 Self-sourced dataset: Sandhill Cranes",
    "text": "6.6 Self-sourced dataset: Sandhill Cranes\nSandhill cranes are a long-lived bird species found in North America. This dataset includes locations of 5 cranes during a single autumn migration from their breeding areas in northeastern Asia and south through Alaska, central Canada, and the Great Plains. The migration ends in northern Texas and northern Mexico.\n\n6.6.1 Import Data and View\n\nImport DataView Data\n\n\n\ncrane &lt;- read_csv(\"data/sacr_locations.csv\")\n\n\n\n\nkable(head(crane))\n\n\n\n\nCrane\nTime\nX\nY\n\n\n\n\n100840\n9/1/2013 0:59\n-2663.988\n3273.347\n\n\n100840\n9/1/2013 12:56\n-2665.651\n3273.454\n\n\n100840\n9/1/2013 18:54\n-2666.122\n3271.090\n\n\n100840\n9/2/2013 6:50\n-2663.497\n3270.656\n\n\n100840\n9/2/2013 12:50\n-2665.664\n3271.351\n\n\n100840\n9/3/2013 0:48\n-2663.884\n3272.595\n\n\n\n\n\n\n\n\n\nCoordinate data are not as Geographic coordinates. They are in a projected coordinate system (World Azimuthal Equidistance), with units in kilometers. The X and Y values represent distances from the central point of that projection at Longitude -110 and Latitude 51.\nProjected data from latitude and longitude (WGS84) to current projection.\n\n\n\n6.6.2 Data Preparation\n\nTime classificationFiltering\n\n\n\n# --- Data Preparation ---\ncrane_data &lt;- crane %&gt;%\n    mutate(\n        Time = strptime(Time, format = \"%d/%m/%Y %H:%M\", tz = \"UTC\"),\n        Time = as.POSIXct(Time, origin = \"1970-01-01\", tz = \"UTC\")  # Explicit origin\n    )\n\n# --- Time Class Verification ---\ncat(\"Time column class: \", class(crane_data$Time), \"\\n\") # More readable output\n\nTime column class:  POSIXct POSIXt \n\nhead(crane_data$Time)\n\n[1] \"2013-01-09 00:59:00 UTC\" \"2013-01-09 12:56:00 UTC\"\n[3] \"2013-01-09 18:54:00 UTC\" \"2013-02-09 06:50:00 UTC\"\n[5] \"2013-02-09 12:50:00 UTC\" \"2013-03-09 00:48:00 UTC\"\n\nsummary(crane_data$Time)\n\n                 Min.               1st Qu.                Median \n\"2013-01-09 00:59:00\" \"2013-03-10 19:00:00\" \"2013-06-10 14:13:00\" \n                 Mean               3rd Qu.                  Max. \n\"2013-06-17 11:40:34\" \"2013-09-10 02:50:45\" \"2013-12-10 22:49:00\" \n                 NA's \n                \"276\" \n\n# --- Check for NA values after conversion ---\ncat(\"Number of NA values in Time: \", sum(is.na(crane_data$Time)), \"\\n\")\n\nNumber of NA values in Time:  276 \n\nif (any(is.na(crane_data$Time))) {\n    crane_data &lt;- crane_data %&gt;% filter(!is.na(Time)) # Remove rows\n    warning(\"Removed rows with NA Time values.\")\n}\n\n\n\n\n# Get x and y range\nx_range &lt;- range(crane_data$X, na.rm = TRUE)  # na.rm = TRUE handles potential missing values\ny_range &lt;- range(crane_data$Y, na.rm = TRUE)\n\n# Extract the day (9th or 10th) and month_year\ncrane_data &lt;- crane_data %&gt;%\n    mutate(\n        Day = day(Time),\n        Month_Year = floor_date(Time, \"month\"), # For grouping\n        Month_Label = format(floor_date(Time, \"month\"), \"%b\")  # Abbreviated month name\n    )\n\n# --- Inspect Month_Label ---\nprint(\"First 10 rows of crane_data:\")\n\n[1] \"First 10 rows of crane_data:\"\n\nprint(head(crane_data, 10))  # Show the first 10 rows\n\n# A tibble: 10 × 7\n    Crane Time                     X     Y   Day Month_Year          Month_Label\n    &lt;dbl&gt; &lt;dttm&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dttm&gt;              &lt;chr&gt;      \n 1 100840 2013-01-09 00:59:00 -2664. 3273.     9 2013-01-01 00:00:00 Jan        \n 2 100840 2013-01-09 12:56:00 -2666. 3273.     9 2013-01-01 00:00:00 Jan        \n 3 100840 2013-01-09 18:54:00 -2666. 3271.     9 2013-01-01 00:00:00 Jan        \n 4 100840 2013-02-09 06:50:00 -2663. 3271.     9 2013-02-01 00:00:00 Feb        \n 5 100840 2013-02-09 12:50:00 -2666. 3271.     9 2013-02-01 00:00:00 Feb        \n 6 100840 2013-03-09 00:48:00 -2664. 3273.     9 2013-03-01 00:00:00 Mar        \n 7 100840 2013-03-09 06:44:00 -2663. 3271.     9 2013-03-01 00:00:00 Mar        \n 8 100840 2013-03-09 12:45:00 -2661. 3272.     9 2013-03-01 00:00:00 Mar        \n 9 100840 2013-04-09 00:40:00 -2663. 3268.     9 2013-04-01 00:00:00 Apr        \n10 100840 2013-04-09 06:38:00 -2663. 3270.     9 2013-04-01 00:00:00 Apr        \n\nprint(\"\\nUnique values in Month_Label:\")\n\n[1] \"\\nUnique values in Month_Label:\"\n\nprint(unique(crane_data$Month_Label)) # Show all unique month labels\n\n [1] \"Jan\"  \"Feb\"  \"Mar\"  \"Apr\"  \"May\"  \"Jun\"  \"Jul\"  \"Aug\"  \"Sept\" \"Oct\" \n[11] \"Nov\"  \"Dec\" \n\nprint(\"\\nClass of Month_Label:\")\n\n[1] \"\\nClass of Month_Label:\"\n\nprint(class(crane_data$Month_Label)) # Show the class (should be character)\n\n[1] \"character\"\n\n\n\n\n\n\n\n6.6.3 Crane Sightings at Area, Overtime interactively\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(gganimate)\nlibrary(RColorBrewer)\n# Ensure Crane is a factor\ncrane_data &lt;- crane_data %&gt;%\n  mutate(Crane = as.factor(Crane))\n\n# Create a sequence for manual transition\ncrane_data &lt;- crane_data %&gt;%\n  mutate(\n    Month_Year = floor_date(Time, \"month\"),\n    Month_Label = format(floor_date(Time, \"month\"), \"%b\"),\n    frame_order = as.integer(Time) # Use the numeric representation of Time\n  ) %&gt;%\n  arrange(Time) # Ensure the data is sorted chronologically\n\n# Get unique cranes and number of cranes for color mapping\nunique_cranes &lt;- unique(crane_data$Crane)\nnum_cranes &lt;- length(unique_cranes)\nmy_colors &lt;- brewer.pal(n = max(3, num_cranes), name = \"Set1\")\n\n# Basic Time-Series Animation\nanimation &lt;- ggplot(crane_data, aes(x = X, y = Y, color = Crane, group = Crane)) +\n  geom_point(size = 5) +\n  geom_path(alpha = 0.3) +\n  transition_manual(frame_order, cumulative = FALSE) +\nlabs(title = \"Crane Movement in 2013\\n Month: {format(lubridate::as_datetime(as.numeric(current_frame), origin='1970-01-01', tz='UTC'), '%b')} Day: {format(lubridate::as_datetime(as.numeric(current_frame), origin='1970-01-01', tz='UTC'), '%d')}\",\n     x = \"X Coordinate\",\n     y = \"Y Coordinate\") +\ntheme(\n    legend.position = \"bottom\",\n    plot.margin = unit(c(1, 1, 1, 1), \"cm\") # top, right, bottom, left margins\n  ) +\n  scale_color_manual(values = setNames(my_colors[1:num_cranes], unique_cranes))\n\n# View\nanimate(animation, duration = 100, fps = 5, renderer = gifski_renderer())\n\n\n\n\nSightings on the 9th are at around the Y coordinates of 2000 to 3000 and X coordinates of -2000 to -2500. Sightings on 10th are at the coordinates close to 0 for both X and Y.\n\n\n\n6.6.4 Heatmap of sightings by Month and Day\n\nBy Month\n\nThe Plot-By MonthThe Code-By Month\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Prepare data\ncrane_heatmap_data_monthly &lt;- crane_data %&gt;%\n  mutate(\n    Month_Label = format(Time, \"%b\") # Extract month label\n  ) %&gt;%\n  group_by(Crane, Month_Label) %&gt;%\n  summarise(Sighting_Count = n(), .groups = 'drop')\n\n# order of months on the y-axis\nmonth_order &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# Ensure Month_Label is a factor with the desired order\ncrane_heatmap_data_monthly &lt;- crane_heatmap_data_monthly %&gt;%\n  mutate(Month_Label = factor(Month_Label, levels = month_order))\n\n# plot\nggplot(crane_heatmap_data_monthly,\n       aes(x = Crane,\n           y = Month_Label,\n           fill = Sighting_Count)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  scale_fill_gradient(name = \"Sighting Count\", low = \"lightgrey\", high = \"navyblue\") +\n  coord_equal() +\n  labs(title = \"Monthly Crane Sightings\",\n       x = \"Crane\",\n       y = \"Month\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks = element_blank() # Remove axis ticks for cleaner look\n  )\n\n\n\n\n\nDrilling Down by Day\n\nThe Plot- By DayThe Code- By Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Prepare data\ncrane_heatmap_data_monthly &lt;- crane_data %&gt;%\n  mutate(\n    Month_Label = format(Time, \"%b\") # Extract month label\n  ) %&gt;%\n  group_by(Crane, Month_Label, Day) %&gt;%\n  summarise(Sighting_Count = n(), .groups = 'drop')\n\n# order of months on the y-axis\nmonth_order &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# Ensure Month_Label is a factor with the desired order\ncrane_heatmap_data_monthly &lt;- crane_heatmap_data_monthly %&gt;%\n  mutate(Month_Label = factor(Month_Label, levels = month_order))\n\n# plot\nggplot(crane_heatmap_data_monthly,\n       aes(x = Crane,\n           y = Month_Label,\n           fill = Sighting_Count)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  scale_fill_gradient(name = \"Sighting Count\", low = \"lightgrey\", high = \"navyblue\") +\n  coord_equal() +\n  labs(title = \"Monthly Crane Sightings for 9th and 10th of the Month\",\n       x = \"Crane\",\n       y = \"Month\") +\n    facet_wrap(~Day, ncol = 2) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.ticks = element_blank() # Remove axis ticks for cleaner look\n  )\n\n\n\n\nHeatmaps allows side-by-side comparison of multiple datasets for 9th and 10th of each month, facilitating the identification of similarities, differences, and relationships between variables.\nWe are able to identify that almost all cranes were sighted on the 10th of each month. Exception for Crane 100845 that was not sighted on 10th Jan and 10th Feb.\nLess cranes were sighted on 9th of the month at that specific X and Y coordinate area, especially from Nov to Dec 2013.\n\n\n\n\n6.6.5 Slope Graphs\n\nTwo Time Points: We will be comparing crane counts on two specific days (the 9th and 10th) of each month. The slope graph will assist to illustrate the changes in crane sightings.\n\n\n6.6.5.1 Data Prepration\n\nThe Code\n\n\n\n# Aggregate the data to count unique cranes per month per day\ncrane_counts_9_10 &lt;- crane_data %&gt;%\n  filter(day(Time) %in% c(9, 10)) %&gt;%\n  mutate(Day = as.factor(day(Time))) %&gt;%\n  group_by(Crane, Month_Label, Day) %&gt;%\n  summarise(Count = n(), .groups = 'drop')\ncrane_counts_9_10\n\n# A tibble: 106 × 4\n   Crane  Month_Label Day   Count\n   &lt;fct&gt;  &lt;chr&gt;       &lt;fct&gt; &lt;int&gt;\n 1 100840 Apr         9         4\n 2 100840 Apr         10        4\n 3 100840 Aug         9         4\n 4 100840 Aug         10        4\n 5 100840 Dec         10        3\n 6 100840 Feb         9         2\n 7 100840 Feb         10        4\n 8 100840 Jan         9         3\n 9 100840 Jan         10        4\n10 100840 Jul         9         3\n# ℹ 96 more rows\n\n# order of months on the y-axis\nmonth_order &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# Ensure Month_Label is a factor with the desired order\ncrane_counts_9_10 &lt;- crane_counts_9_10 %&gt;%\n  mutate(Month_Label = factor(Month_Label, levels = month_order))\n\n\n\n\n\n\n6.6.5.2 Slopegraph for sightings- GGPLOT\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# plot\nggplot(crane_counts_9_10, aes(x = Day, y = Count, color = Crane)) +\n  geom_point(size = 1) +\n  geom_line(aes(group = Crane), linewidth = 0.5) + # Group for the line within each facet\n  facet_wrap(~ Month_Label, nrow = NULL) +\n  labs(\n    title =\"Slopegraph of Crane Sightings in 2013\",\n    subtitle= \"9th and 10th of Each Month\",\n    x = \"Day of Month\",\n    y = \"Count\"\n  ) +\n  theme_tufte(base_family = \"Helvetica\") +\n  theme(legend.position = \"bottom\")\n\n\n\nActivity throughout the year:\n\nCrane 100853 (Blue) was rather active around the two areas throughout the year during those two days.\n\nActivity for certain periods:\n\nLess crane sightings for both two days by November and December 2013.\nOnly Crane 100853 (Blue) was sighted on 9th December.\n\n\n\n6.6.5.3 Slopegraph for sightings- newggslopegraph\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Prepare\ncrane_counts_slope &lt;- crane_data %&gt;%\n  filter(day(Time) %in% c(9, 10)) %&gt;%\n  mutate(Day = as.factor(day(Time))) %&gt;% # Convert Day to factor for newggslopegraph\n  group_by(Crane, Day) %&gt;%           # Group by Crane and Day\n  summarise(Count = n(), .groups = 'drop') # Sum the counts for each Crane on each Day\n\n# Create the slopegraph using newggslopegraph\n#| fig-height: 6 \ncrane_counts_slope %&gt;% \n  mutate(Day = factor(Day)) %&gt;%\n  filter(Day %in% c(9, 10)) %&gt;%\n  newggslopegraph(Day, Count, Crane,\n                Title = \"Crane Sightings for Different Days\",\n                SubTitle = \"9th and 10th of Month\",             \n                Caption = \"Prepared by: AT\")\n\n\n\n\nOverall, crane 100853 (Blue) was the most active while 100854 (Green) was the least active in those two areas on those two days of the month.\nOverall more sightings for cranes at X and Y coordinates of close to 0 as the location for sightings on the 10th is around that area. Exception for crane 100853 which has a slight drop of 1 sighting between two areas.\n\n\n\n\n6.6.6 Cycle Plot\nHere, we study the sightings:\n\n6 hour periods for each crane\nMonthly sightings for each crane\nTotal crane sightings by month and 6 hour periods\nSightings by month and 6 hour periods for each crane\n\n\n6 hour period sightings per craneMonthly sightings per craneCyclePlot for all cranesCyclePlot per crane\n\n\n\n# 1. Create a 6-hour period variable\ncrane_sightings_6hr &lt;- crane_data %&gt;%\n  mutate(\n    Six_Hour_Period = case_when(\n      hour(Time) &gt;= 0 & hour(Time) &lt; 6   ~ \"00:00-05:59\",\n      hour(Time) &gt;= 6 & hour(Time) &lt; 12  ~ \"06:00-11:59\",\n      hour(Time) &gt;= 12 & hour(Time) &lt; 18 ~ \"12:00-17:59\",\n      hour(Time) &gt;= 18 & hour(Time) &lt; 24 ~ \"18:00-23:59\",\n      TRUE ~ NA_character_ #Should not happen, unless there are times outside 0-23\n    ),\n    Six_Hour_Period = factor(Six_Hour_Period, levels = c(\"00:00-05:59\", \"06:00-11:59\", \"12:00-17:59\", \"18:00-23:59\")) #order\n  ) %&gt;%\n  group_by(Crane, Six_Hour_Period) %&gt;%\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Create the cycle plot\nggplot(crane_sightings_6hr, aes(x = Six_Hour_Period, y = Sightings, group=Crane, color=Crane)) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~ Crane, ncol = 2) +\n  labs(\n    title = \"Annual Crane Sightings by 6-Hour Period\",\n    x = \"6-Hour Period\",\n    y = \"Total Sightings\"\n  ) +\n  theme_grey() +\n  theme(\n    strip.text = element_text(size = 10),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position=\"none\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n# Order of months on the y-axis\nmonth_order &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\n\n# 1. Aggregate data by Crane and Month\ncrane_activity_by_month &lt;- crane_data %&gt;%\n  group_by(Crane, Month_Label) %&gt;%  # Group by Crane and Month\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Define the order of the months\nmonth_order &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n# 3. Create the cycle plots, one for each crane\nggplot(crane_activity_by_month, aes(x = Month_Label, y = Sightings, group = Crane, color = Crane)) +\n  geom_line() +\n  geom_point() +\n  facet_wrap(~ Crane, ncol = 2) + # Facet by Crane, adjust ncol as needed\n  scale_x_discrete(limits = month_order) +  # Ensure months are ordered correctly on x-axis\n  labs(\n    title = \"Monthly Crane Activity\",\n    x = \"Month\",\n    y = \"Total Sightings\"\n  ) +\n  theme_grey()+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  # Adjust text angle and size\n    strip.text = element_text(size = 10),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position = \"none\" # Remove the legend\n  )\n\n\n\n\n\n\n\n\n\n\n\n# 1. Create the grouping\ncrane_sightings_new &lt;- crane_data %&gt;%\n  mutate(\n    # Handle potential errors in Time column\n    Month_Label = case_when(\n      is.na(Time) ~ NA_character_,  # Assign NA for missing Time values\n      TRUE ~ format(Time, \"%b\") # Extract month label,\n    ),\n    Month_Label = factor(Month_Label, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")),\n    Six_Hour_Period = case_when(\n      hour(Time) &gt;= 0 & hour(Time) &lt; 6   ~ \"00:00-05:59\",\n      hour(Time) &gt;= 6 & hour(Time) &lt; 12  ~ \"06:00-11:59\",\n      hour(Time) &gt;= 12 & hour(Time) &lt; 18 ~ \"12:00-17:59\",\n      hour(Time) &gt;= 18 & hour(Time) &lt; 24 ~ \"18:00-23:59\",\n      TRUE ~ NA_character_\n    ),\n    Six_Hour_Period = factor(Six_Hour_Period, levels = c(\"00:00-05:59\", \"06:00-11:59\", \"12:00-17:59\", \"18:00-23:59\")) #order\n  ) %&gt;%\n  group_by(Month_Label, Six_Hour_Period) %&gt;%\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Calculate average sightings per month\nhline.data &lt;- crane_sightings_new %&gt;% \n  group_by(Month_Label) %&gt;%\n  summarise(avgvalue = mean(`Sightings`))\n\n# 3. Create the cycle plots, one for each crane\nggplot() + \n  geom_line(data=crane_sightings_new, \n            aes(x=Six_Hour_Period, y = Sightings, group = Month_Label)) +\n  facet_grid(~Month_Label) + # Facet by Month\n  labs(\n    title = \"Crane Sightings by Month and 6-Hour Period\",\n    x = \"Month\",\n    y = \"Total Sightings\") +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 5),\n    strip.text = element_text(size = 8),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position = \"bottom\",\n    strip.text.y = element_text(size = 8)\n  )+\n    geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) \n\n\n\n\n\n\n\n\n\n\n\n# 1. Create the grouping\ncrane_sightings_new &lt;- crane_data %&gt;%\n  mutate(\n    # Handle potential errors in Time column\n    Month_Label = case_when(\n      is.na(Time) ~ NA_character_,  # Assign NA for missing Time values\n      TRUE ~ format(Time, \"%b\") # Extract month label,\n    ),\n    Month_Label = factor(Month_Label, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")),\n    Six_Hour_Period = case_when(\n      hour(Time) &gt;= 0 & hour(Time) &lt; 6   ~ \"00:00-05:59\",\n      hour(Time) &gt;= 6 & hour(Time) &lt; 12  ~ \"06:00-11:59\",\n      hour(Time) &gt;= 12 & hour(Time) &lt; 18 ~ \"12:00-17:59\",\n      hour(Time) &gt;= 18 & hour(Time) &lt; 24 ~ \"18:00-23:59\",\n      TRUE ~ NA_character_\n    ),\n    Six_Hour_Period = factor(Six_Hour_Period, levels = c(\"00:00-05:59\", \"06:00-11:59\", \"12:00-17:59\", \"18:00-23:59\")) #order\n  ) %&gt;%\n  group_by(Crane, Month_Label, Six_Hour_Period) %&gt;%\n  summarise(Sightings = n(), .groups = 'drop')\n\n# 2. Calculate average sightings per month\navg_sightings_month &lt;- crane_sightings_new %&gt;%\n  group_by(Month_Label) %&gt;%\n  summarise(avg_sightings = mean(Sightings), .groups = 'drop')\n\n# 3. Create the cycle plots, one for each crane\nggplot()+\n  geom_line(data=crane_sightings_new, \n            aes(x=Six_Hour_Period, y = Sightings, group = Month_Label)) +\n  facet_grid(Crane ~ Month_Label) +  #  Crane on rows, Month_Label on columns\n  labs(\n    title = \"Sightings by Month and 6-Hour Period, per crane\",\n    x = \"6-Hour Period\",\n    y = \"Total Sightings\",\n    color = \"Month\"\n  ) +\n  theme_grey() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 5),\n    strip.text = element_text(size = 10),\n    panel.spacing = unit(1, \"lines\"),\n    legend.position = \"bottom\",\n    strip.text.y = element_text(size = 8)\n  ) \n\n\n\n\n\n\n\n\n\n\n\nFrom the annual crane sightings by 6-hour period:\n\nCrane 100854 had a pronounced drop in sightings around 1800hrs to 2359hrs, relative to other cranes.\n\nFrom the cycleplot of all cranes:\n\nWith respect to the annual sightings within the 6 hour period, the highest sighting was 9 within a month at 1200-1759hrs in Feb , 0600-1159hrs in Aug, 0000-0559hrs in Oct. The lowest annual sighting was of 3 in Dec at 1200-1759hrs.\nAcross the months, the highest average sightings were in Jan and Feb 2013, and least in Nov and Dec 2013.\nAcross the 24 hours period, a drop in activity or sightings from 1800hrs-2359hrs from Jan to Aug, and Oct-Nov 2013 (Possibly resting). However, an intersting rise in sightings observed in Sept (crane count: 5 to 8) and Dec (crane count: 3 to 4) around 1800hrs-2359hrs.\n\nFrom the cycleplot per crane:\n\nCrane 100854 was not sighted at 1800hrs to 2359hrs during the year, except in Aug and Sep.\nCrane 100845 and 100853 were sighted more often in Sept around 1800hrs to 2359hrs, leading to the rise in sightings for Sept."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#references",
    "title": "6. Visualising and Analysing Time-oriented Data",
    "section": "6.7 References",
    "text": "6.7 References\n\nUsing newggslopegraph\nnewggslopegraph()\nSandhill Crane Locations from USGS"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, the learning objectives are:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, \n               plotly, knitr)\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\",show_col_types = FALSE) %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n{r funnel_plot(   .data = covid19,   numerator = Positive,   denominator = Death,   group = `Sub-district` )\n\n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = \"auto\",  \n  y_range = \"auto\", \n  label = NA, # outliers label removed\n  theme = funnel_clean(), \n  title = \"Cumulative COVID-19 Fatality Rate by \\n Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nplot(p)\n\n\n\nThings to learn from the code chunk above:\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\ndata_type argument identifies the data type used, the adjustment, and the reference point.\n\n“SR” for indirectly standardised ratios. This is the default.\n“PR” for proportions\n“RC” for ratios of counts\n\n\n\n\n\n\nIn this section, we will be building funnel plots step-by-step by using ggplot2. It aims to enhance our working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\nThe Code\n\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\nThe Code\n\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nThe Code\n\n\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4, color=\"#1F78B4FF\", size=2)+\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"purple\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"purple\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"darkgreen\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"darkgreen\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"red2\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12, face='bold',hjust=0.5),\n        legend.position = c(0.91,0.85), \n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#overview",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, the learning objectives are:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, \n               plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#importing-data",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\",show_col_types = FALSE) %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnelplotr-methods",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n{r funnel_plot(   .data = covid19,   numerator = Positive,   denominator = Death,   group = `Sub-district` )\n\n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  x_range = c(0, 6500),  #&lt;&lt;\n  y_range = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- funnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  x_range = \"auto\",  \n  y_range = \"auto\", \n  label = NA, # outliers label removed\n  theme = funnel_clean(), \n  title = \"Cumulative COVID-19 Fatality Rate by \\n Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nplot(p)\n\n\n\nThings to learn from the code chunk above:\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\ndata_type argument identifies the data type used, the adjustment, and the reference point.\n\n“SR” for indirectly standardised ratios. This is the default.\n“PR” for proportions\n“RC” for ratios of counts"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this section, we will be building funnel plots step-by-step by using ggplot2. It aims to enhance our working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\nThe Code\n\n\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\nThe Code\n\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nThe Code\n\n\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4, color=\"#1F78B4FF\", size=2)+\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"purple\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"purple\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"darkgreen\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"darkgreen\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"red2\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12, face='bold',hjust=0.5),\n        legend.position = c(0.91,0.85), \n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#references",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, the learning outcomes are:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\n\n\n\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this exercise, ggstatsplot and tidyverse will be used.\nThe code chunk below will be used to load these R packages into RStudio environment.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\nHypothesis\nH0: Mean of English score = 60\nH1: Mean of English score != 60\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)+\n  labs(title  = \"One-sample Test on English Scores\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nSince BF = e^-31.52, which is close to 0. We have significant evidence to reject the null hypothesis and conclude that the mean English score is not equal to 60.\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number.\nOne of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nHypothesis\nH0: Mean Math score for Male = Mean Math score for Female\nH1: Mean Math score for Male != Mean Math score for Female\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)+\n  labs(title  = \"Two-sample mean test of Maths scores by Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\nConclusion\nSince the p-value is &gt; 0.05, we don’t have enough evidence to reject the null hypothesis and conclude that there is no statistically significant difference in the mean Math scores between Males and Females.\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\nHypothesis\nH0: There is no difference in English scores among races.\nH1: There are differences in English scores among races.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)+\n  labs(title  = \"One-way ANOVA test on English score by race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\nConclusion\nSince p-value &lt; 0.05, we have enough evidence to reject the null hypothesis and conclude that there are differences in English scores among races.\n\n\nThe pairwise test ggbetweenstats() below further shows that the means of English scores of Chinese, Indian and Malay are significantly different.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n  )+\n  labs(title  = \"Significant Test of Correlation between Maths scores and English scores\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nThe result indicates a statistically significant positive relationship (r̂ = 0.83, p-value &lt;0.05) between English.\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nThe Code\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association.\nHypothesis\nH0: There is no association between Math_bin and Gender.\nH1: There is an association between Math_bin and Gender.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)+\n  labs(title  = \"Significant Test of Association between Math and Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\n\n\nConclusion\nSince the p-value is &gt; 0.05, we do not have enough evidence to reject the null hypothesis that there is no association between the Math_bin and Gender variables.\n\n\n\nHypothesis\nH0: There is no association between English_bin and Gender.\nH1: There is an association between English_bin and Gender.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(ENGLISH_bins = \n           cut(ENGLISH, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = ENGLISH_bins, \n           y = GENDER)+\n  labs(title  = \"Significant Test of Association between English and Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nSince the p-value is &lt; 0.05, we reject the null hypothesis. There is an association between the English_bin and Gender variables.\n\n\n\nHypothesis\nH0: There is no association between Science_bin and Gender.\nH1: There is an association between Science_bin and Gender.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(SCIENCE_bins = \n           cut(SCIENCE, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = SCIENCE_bins, \n           y = GENDER)+\n  labs(title  = \"Significant Test of Association between Science and Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nSince the p-value is &gt; 0.05, we do not have enough evidence to reject the null hypothesis that there is no association between the Science_bin and Gender variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#learning-outcome",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, the learning outcomes are:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "ggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#getting-started",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "In this exercise, ggstatsplot and tidyverse will be used.\nThe code chunk below will be used to load these R packages into RStudio environment.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\nHypothesis\nH0: Mean of English score = 60\nH1: Mean of English score != 60\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)+\n  labs(title  = \"One-sample Test on English Scores\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nSince BF = e^-31.52, which is close to 0. We have significant evidence to reject the null hypothesis and conclude that the mean English score is not equal to 60.\n\n\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n\nA Bayes Factor can be any positive number.\nOne of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\nHypothesis\nH0: Mean Math score for Male = Mean Math score for Female\nH1: Mean Math score for Male != Mean Math score for Female\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)+\n  labs(title  = \"Two-sample mean test of Maths scores by Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\nConclusion\nSince the p-value is &gt; 0.05, we don’t have enough evidence to reject the null hypothesis and conclude that there is no statistically significant difference in the mean Math scores between Males and Females.\n\n\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\nHypothesis\nH0: There is no difference in English scores among races.\nH1: There are differences in English scores among races.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)+\n  labs(title  = \"One-way ANOVA test on English score by race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\nConclusion\nSince p-value &lt; 0.05, we have enough evidence to reject the null hypothesis and conclude that there are differences in English scores among races.\n\n\nThe pairwise test ggbetweenstats() below further shows that the means of English scores of Chinese, Indian and Malay are significantly different.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n  )+\n  labs(title  = \"Significant Test of Correlation between Maths scores and English scores\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nThe result indicates a statistically significant positive relationship (r̂ = 0.83, p-value &lt;0.05) between English.\n\n\n\n\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nThe Code\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association.\nHypothesis\nH0: There is no association between Math_bin and Gender.\nH1: There is an association between Math_bin and Gender.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)+\n  labs(title  = \"Significant Test of Association between Math and Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\n\n\nConclusion\nSince the p-value is &gt; 0.05, we do not have enough evidence to reject the null hypothesis that there is no association between the Math_bin and Gender variables.\n\n\n\nHypothesis\nH0: There is no association between English_bin and Gender.\nH1: There is an association between English_bin and Gender.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(ENGLISH_bins = \n           cut(ENGLISH, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = ENGLISH_bins, \n           y = GENDER)+\n  labs(title  = \"Significant Test of Association between English and Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nSince the p-value is &lt; 0.05, we reject the null hypothesis. There is an association between the English_bin and Gender variables.\n\n\n\nHypothesis\nH0: There is no association between Science_bin and Gender.\nH1: There is an association between Science_bin and Gender.\nAlpha = 0.05\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam1 &lt;- exam %&gt;% \n  mutate(SCIENCE_bins = \n           cut(SCIENCE, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam1, \n           x = SCIENCE_bins, \n           y = GENDER)+\n  labs(title  = \"Significant Test of Association between Science and Gender\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\nConclusion\nSince the p-value is &gt; 0.05, we do not have enough evidence to reject the null hypothesis that there is no association between the Science_bin and Gender variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.1.1 Basic concepts of animation",
    "text": "3.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#terminology",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.1.2 Terminology",
    "text": "3.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, ask the question: Does it makes sense to go through the effort?\n\nIf conducting an exploratory data analysis, a animated graphic may not be worth the time investment.\nHowever, when giving a presentation, a few well-placed animated graphics can help an audience connect with the topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.2.1 Loading the R packages",
    "text": "3.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#importing-the-data",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.2.2 Importing the data",
    "text": "3.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.undefined\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.3.1 Building a static population bubble plot",
    "text": "3.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.3.2 Building the animated bubble plot",
    "text": "3.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\nString literal interpolation in title is also used to dynamically update the plot information based on the frame.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-multiple-animated-subplots",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-multiple-animated-subplots",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.3.3 Building multiple animated subplots",
    "text": "3.3.3 Building multiple animated subplots\nWe can also create multiple animated bubble subplots by Continent.\nIn the code chunk below,\n\nfacet_warp() is used on Continent.\n\n\nggplot(globalPop, aes(Old, Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~Continent) +\n  # gganimate\n  labs(title = 'Year: {frame_time}', , \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')\n\nThe animated bubble charts"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "3.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "3.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, other R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nploty: an R package for creating interactive web-based graphs.\ndplyr: an R package for data manipulation using a consistent grammar of data transformation. Part of tidyverse and used for filtering, selecting, mutating, summarizing, and joining data.\nggplot2: an R package for creating data visualizations using the Grammar of Graphics.\nRColorBrewer: an R package for creating color palettes\nmagick: an R package for image processing to read, edit, compose, and convert images easily.\nggdist: an R package for visualizing distributions and uncertainty. It provides tools like stat_halfeye(), stat_pointinterval(), etc., for making raincloud plots.\ncowplot: an R package for enhancing ggplot2 output, especially when combining multiple plots.\nggExtra: an R package for arranging multiple grid-based plots into a single view.\n\nCode chunk below checks if these packages have been installed and also will load them onto the working R environment.\n\npacman::p_load(\n  ggrepel, ggthemes,\n  hrbrthemes, patchwork,\n  tidyverse, plotly,\n  gridExtra, dplyr,\n  ggplot2, RColorBrewer,\n  magick, ggdist,\n  cowplot, ggExtra\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package and stores it in exam_data in R Studio.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\nThe code chunk below allows a glimpse into exam_data by their 7 column headers.\n\n# Display the structure of your exam_data\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nExample for geom_label_repel\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(color= \"darkblue\") +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID, \n                   colour = GENDER),\n                   fontface = \"bold\")+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe Economist Theme\nIn the example below, The Economist theme is used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\",\n                 fill=\"cyan3\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nWall Street Journal Theme\nIn the example below, The Wall Street Journal theme is used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np&lt;-ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"cyan3\") +\n  theme_wsj()\n\n# Add title\np &lt;- p + labs(title = \"Distribution of English Scores\")\np + theme(\n  plot.title = element_text(color = \"black\", size = 15, face = \"bold\")\n)\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n             aes(x = MATHS,\n                 fill=GENDER)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\") +\n  ggtitle(\"Distribution of Maths scores by Gender\") +\n  theme_ipsum(base_family = \"sans\") \n\n# Add color palette\np + scale_fill_brewer(palette = \"Pastel1\")\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nIncrease font size/ axis label/ remove grid lines/ add subtitle\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n             aes(x = MATHS,\n                 fill=GENDER)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\", base_family = \"sans\")\n\n# Add color palette and titles\np + scale_fill_brewer(palette = \"Pastel1\") + \n  labs(title = \"Distribution of Math Scores\",\n              subtitle = \"(by gender)\") + \n  theme(\n  plot.title = element_text(color = \"black\", size = 15, face = \"bold\"),\n  plot.subtitle = element_text(color = \"grey34\"),\n)\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nRoman Numerals- Uppercase\n‘I’ for uppercase and ‘i’ for lower case roman numerals\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\nLatin Letters- Uppercase\n‘A’ for uppercase and ‘a’ for lower case Latin letters\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\nArabic Numerals\n‘1’ for Arabic numerals\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nInsert P2 to Top Left\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\nInsert P1 to Bottom Right\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p1, \n                   left = 0.6, \n                   bottom = 0, \n                   right = 1, \n                   top = 0.4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()&\n  theme(\n    plot.title = element_text(size = 8),       # Adjust main patchwork title size\n    plot.subtitle = element_text(size = 8),    # Adjust main patchwork subtitle size \n    plot.caption = element_text(size = 7),     # Adjust main patchwork caption size \n    strip.text = element_text(size = 8),        # Adjust facet label sizes \n    axis.title.x = element_text(size = 8),       # Adjust x-axis label sizes\n    axis.title.y = element_text(size = 8)        # Adjust y-axis label sizes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visualising-patterns-andor-distributions",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visualising-patterns-andor-distributions",
    "title": "Hands-on Exercise 2",
    "section": "2.5.7 Visualising Patterns and/or Distributions",
    "text": "2.5.7 Visualising Patterns and/or Distributions\n\n2.5.7.1 Creating a Highlight Table\n\nThe highlight table/ heatmap, uses colour coding to allow quick identification of numbers within a table. It presents patterns, trends, and relationships within the data.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculate percentage scores\nexam_data_percentage &lt;- exam_data %&gt;%\n  mutate(\n    ENGLISH_PERCENT = (ENGLISH / 100) * 100,\n    MATHS_PERCENT = (MATHS / 100) * 100,\n    SCIENCE_PERCENT = (SCIENCE / 100) * 100\n  )\n\n# Create the highlight table data\nhighlight_table_data &lt;- exam_data_percentage %&gt;%\n  group_by(CLASS) %&gt;%\n  summarise(\n    MATHS = round(mean(MATHS_PERCENT), 1),\n    ENGLISH = round(mean(ENGLISH_PERCENT), 1),\n    SCIENCE = round(mean(SCIENCE_PERCENT), 1)\n  ) %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE), \n               names_to = \"Subject\", \n               values_to = \"Average_Percentage\") %&gt;%\n  pivot_wider(names_from = \"Subject\", \n              values_from = \"Average_Percentage\")\n\n# Create the highlight table using ggplot2\nhighlight_table_plot &lt;- ggplot(highlight_table_data %&gt;%\n                                pivot_longer(\n                                  cols = c(ENGLISH, \n                                           MATHS,\n                                           SCIENCE),\n                                  names_to = \"Subject\",\n                                  values_to= \"Average_Percentage\"),\n                               aes(x = Subject, \n                                    y = factor(CLASS, levels = rev(c(\"3A\", \"3B\", \"3C\", \"3D\", \"3E\", \"3F\", \"3G\", \"3H\", \"3I\"))), \n                                   fill= Average_Percentage)) +\n  geom_tile(color = \"white\") +\n  geom_text(aes(label = Average_Percentage), color = \"black\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"royalblue3\") +\n  labs(\n    title = \"Average Percentage Scores of Subjects by Class\", \n    fill = \"Avg. Percentage\") +\n  theme_minimal() +\n  theme(axis.title = element_blank(),\n        panel.grid = element_blank(),\n        panel.background = element_blank(),\n        axis.ticks = element_blank())\nprint(highlight_table_plot)\n\n\n\nThe highlight table here shows the average scores for each class by their subject. The colour gradient shows the scores from low (lighter colour) to high (darker colour).\nWe may infer that the average percentage scores for each subject from the students in Class 3A (darker blue) are higher than in 3I (lighter blue). We may continue to compare between subjects and classes in this manner.\n\n\n2.5.7.2 Combining Scatterplot with Marginal Histograms\nA highlight table or scatterplot can be combined with marginal histograms.\n\nHere, the scatterplot visualizes the relationship between two subjects.\nThe marginal histogram provides a side-by-side view of the distribution of each subject in the scatterplot.\n\n\nMaths vs Science: Code & PlotMaths vs English: Code & PlotEnglish vs Science: Code & Plot\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x = MATHS, \n                           y = SCIENCE))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"Maths vs Science Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x = MATHS, \n                           y = ENGLISH))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"Maths vs English Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x =ENGLISH, \n                           y =SCIENCE))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"English vs Science Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n\nTrend: There appears to be a positive trend for each subject. Students that do well in one appear to do well in the other.\nSkewness: Slightly negatively skewed distribution (longer left tail) for Math, Science and English.\nData concentration: Math [75-90 range], Science [50-75], English [60-80]. Fewer students at both ends of higher and lower scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-raincloud-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-raincloud-plots",
    "title": "Hands-on Exercise 2",
    "section": "2.5.8 Creating Raincloud plots",
    "text": "2.5.8 Creating Raincloud plots\nShortcomings of barplots:\nThe barplot with whisker error bars to visualise the mean or median and the standard error may be prone to distortion, fail to represent underlying data parameter inferences, lead to misleading inferences of magnitude of difference between conditions, and may obscure difference in distributions (Allen et al., 2021).\nRemedies:\n\nAdd jittered raw data points to the standard boxplot and +/- standard error scheme.\nAdd dotplots tosupplement visualizations of central tendency and error, but at the risk of added complexity due to the dependence of such plots on choices such as bin-width and dot size, and the risk of reading issues when there are many observations.\nViolin plot overlaid with boxplots or similar. However, there is little to be gained statistically, by mirroring the violin plot, and therefore violating the philosophy of minimising the “data-ink ratio” (Allen et al., 2021; Tufte, 1983).\n\nClick to see detailed information on shortcomings and remedies of barplot.\nSolution to limitations:\nThe raincloud plot combines various plots, to address the aforementioned limitations in an intuitive, modular, and statistically robust format. Raincloud plots combine a ‘split-half violin’, raw jittered data points, and a standard visualization of central tendency (i.e., mean or median) and error, such as a boxplot (Allen et al., 2021).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n# plot\np4 &lt;- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +\n  geom_flat_violin(\n    position = position_nudge(x = 0.25),\n    adjust = 2,\n    trim = TRUE\n  ) +\n  geom_point(\n    position = position_jitter(width = 0.15),\n    size = 0.25\n  ) +\n  geom_boxplot(\n    aes(x = as.numeric(group) + 0.25, y = score),\n    outlier.shape = NA,\n    alpha = 0.3,\n    width = 0.1,\n    colour = \"BLACK\",\n    position = position_nudge(x = 0)\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +  # palette for the fill\n  scale_color_brewer(palette = \"Set2\") +  # palette for the color\n  guides(fill = \"none\", colour = \"none\") +\n  ylab(\"Score\") +\n  xlab(\"Subject\") +\n  theme_cowplot() +\n  coord_flip() +\n  ggtitle(\"Raincloud Plot\")\n\nsuppressWarnings(plot(p4))  # Suppress warnings\n\n\n\nThe raincloud plot above visualised the following elements:\n\nSplit-half violin (density plot): Distribution of the data for each subject, filled with color, and is a smoothed density estimate of the data.\nBoxplot: Overlaid on top of the violin, showing the quartiles, median, and outliers for the data.\nRaw jittered data points (“rain”): Individual data points (“raindrop”) shown as small, scattered dots. Shows the data points distribution within each subject.\n\n\n2.5.8.1 Drilling Deeper into Interactive Rain Points\nWe may dissect the plot without the violin density plot. Then using tooltip we can hover over each individual “raindrop” to show the student’s ID and Class per subject, in an interactive manner.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# tooltip\nsimdat$tooltip &lt;- paste0(\"ID = \", simdat$ID, \"\\nClass = \", simdat$CLASS)\n\n# Create the plot\np4_interactive &lt;- suppressWarnings({\n  p4 &lt;- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +  geom_point(\n      aes(text = tooltip),  # Add tooltip in the 'text' aesthetic\n      position = position_jitter(width = 0.15),\n      size = 0.25\n    ) +\n    geom_boxplot(\n      aes(x = as.numeric(group) + 0.25, y = score),\n      outlier.shape = NA,\n      alpha = 0.3,\n      width = 0.1,\n      colour = \"BLACK\",\n      position = position_nudge(x = 0)\n    ) +\n    scale_fill_brewer(palette = \"Set2\") +  # palette for the fill\n    scale_color_brewer(palette = \"Set2\") +  # palette for the color\n    guides(fill = \"none\", colour = \"none\") +\n    ylab(\"Score\") +\n    xlab(\"Subject\") +\n    theme_cowplot() +\n    coord_flip() +\n    ggtitle(\"Dissected Raincloud Plot\")\n\n  # Convert to interactive plotly plot with the tooltip\n  ggplotly(p4, tooltip = \"text\")  # Use 'text' for hover tooltip\n})\n\n# Display the interactive plot\np4_interactive\n\n\n\nIt is interesting to note that Student 36 from class 3A scored top for Science, Math, and English."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Audrey!\nEducation\nSingapore Management University\nMasters of IT in Business (Data Science & Analytics)\nExperience\nAnalytics | Finance | Risk & Compliance\nCPA certified\nEnjoys\nCoffee"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course.   These are my posts for Hands-On Exercises:\n\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Published - Oldest\n      \n      \n        Published - Newest\n      \n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nPublished\n\n\n\n\n\n\n\n\n1. A Layered Grammar of Graphics: ggplot2 methods\n\n\nApr 18, 2025\n\n\n\n\n\n\n2. Beyond ggplot2 Fundamentals\n\n\nApr 24, 2025\n\n\n\n\n\n\n3a. Programming Interactive Data Visualisation with R\n\n\nMay 1, 2025\n\n\n\n\n\n\n3b. Programming Animated Statistical Graphics with R\n\n\nMay 1, 2025\n\n\n\n\n\n\n4a. Visualisation Distribution\n\n\nMay 4, 2025\n\n\n\n\n\n\n4b. Visual Statistical Analysis\n\n\nMay 4, 2025\n\n\n\n\n\n\n4c. Visualising Uncertainty\n\n\nMay 4, 2025\n\n\n\n\n\n\n4d. Funnel Plots for Fair Comparisons\n\n\nMay 5, 2025\n\n\n\n\n\n\n5. Modelling, Visualising and Analysing Network Data with R\n\n\nMay 11, 2025\n\n\n\n\n\n\n6. Visualising and Analysing Time-oriented Data\n\n\nMay 19, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2.1 Install and launching R packages",
    "text": "1.2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\nLoad the required libraries\n\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(magick)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2.2 Importing the data",
    "text": "1.2.2 Importing the data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package and stores it in exam_data in R Studio.\n\nexam_data &lt;-read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nThe data consists of year end examination grades of a cohort of primary 3 students from a local school.\nThe dataframe has 7 columns and 322 rows. Four of the columns contains categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nR Graphics is the built-in R plotting method. By comparing the plots between R Graphics and ggplot via a histogram, we see some differences.\n\nR GraphicsGGPLOT2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nThe code is simpler for R Graphics as compared to ggplot.\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill=\"mediumorchid\")+\n  ggtitle(\"Distribution of Maths Scores\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nHowever, here are a few advantages of ggplot2:\n\nNo need to make own legends.\nAble to perform faceting (1.9 Essential Grammatical Elements in ggplot2: Facets) to display data in multiple subplots.\nAble to use tidydata to do exploratory data analysis through data.table or dplyr.\nggplot2 looks better\n\nAs pointed out by Hadley Wickham :\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5)+\nggtitle(\"Barplot of Races by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, fill = \"darkseagreen1\")+  \nggtitle(\"Dotplot of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n1) scale_y_continuous() is used to turn off the y-axis, and\n2) binwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5, fill = \"darkseagreen1\", alpha = 0.5) +\nggtitle(\"Dotplot of Maths Scores\")+\nscale_y_continuous(NULL, breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"darkorchid2\") +  \nggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic(). R Color Brewer is used to set a palette colour called Set2.\n\n\nhst&lt;-ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") +  \n  ggtitle(\"Distribution of Maths Scores by Gender\")\nhst + scale_fill_brewer(palette = \"Set2\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_density",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6 Geometric Objects: geom_density",
    "text": "1.7.6 Geometric Objects: geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()  +  \nggtitle(\"Density plot of Maths Scores\")\n\n\n\n\n\n\n\n\n\nTwo density lines\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Density plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot(aes(fill = GENDER), alpha = 0.5)  +  \nggtitle(\"Boxplot of Maths Scores by Gender\")\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5, notch=TRUE)+  \nggtitle(\"Notched plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Violin plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH,\n           color=GENDER)) +\n  geom_point(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Scatter plot of Maths by English Scores with Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data = exam_data, \n       aes(x = GENDER, y = MATHS)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +   # color-filled \n  geom_jitter(aes(color = GENDER),              \n              width = 0.2, size = 0.8, alpha = 0.7) +\n  ggtitle(\"Maths Scores by Gender\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5)+\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)    +\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) +\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(size=0.5) +\n  ggtitle(\"Scatter plot of Maths by English Scores by Gender\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\n\nOverriding best fit smoothing method\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, \n              linewidth=0.5)+\n  ggtitle(\"Scatter plot of Maths by English Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,aes(fill = GENDER), alpha = 0.5) +\n    facet_wrap(~ CLASS)       +\n  ggtitle(\"Trellis plot of Maths Scores for different Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,aes(fill = GENDER), alpha = 0.5) +\n    facet_grid(~ CLASS)      +\n  ggtitle(\"Trellis plot of Maths Scores for different Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5)    +\n  ggtitle(\"Bar plot for Races\") \n\n\n\n\n\n\n\n\n\nFlipping into horizontal bar chart\nThe code chunk below flips the vertical bar chart into horizontal bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5) +\n  coord_flip() +\n  ggtitle(\"Bar plot for Races\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, linewidth=0.5)  +\n  ggtitle(\"Scatter plot of Math by English Scores with Gender\") \n\n\n\n\n\n\n\n\n\nStarting the axis ranges from 0-100\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"Scatter plot of Math by English Scores with Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\n\nGray\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\nClassic\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nMinimal\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nBlack and White\nThe code chunk below plot a horizontal bar chart using theme_bw()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts.\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\n# First part: ggplot object\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID), #Student's ID\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\n# Next part: ggiraph\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved.\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n# Customising the tooltip\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # Student's ID\n  \"\\n Class = \", exam_data$CLASS)) # Student's Class\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#customising-tooltip-style",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\n\nTooltip: Black Background and White Bolded Font\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n# Customising Tooltip style\ntooltip_css &lt;- \"background-color:black; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\nTooltip: White Background and Black Bolded Font\nNotice that the earlier background colour of the tooltip is black and the font colour is white and bold.\nWe can change it to a White Background and Black fonts here:\n\n\n\n\n\n\n\n\nTooltip: Pink Background with Rounded Borders and White Fonts\nNotice that the background colour of the tooltip is pink with round borders and the font colour is white.\nThe student’s ID and Class will be displayed.\n\n# Customising Tooltip style\ntooltip_css &lt;- \"background-color:#d8118c;color:white;padding:5px;border-radius:3px;\"\n\n# Combined Student ID and Class \nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # Student's ID\n  \"\\n Class = \", exam_data$CLASS)) # Student's Class\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = exam_data$tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip. The bar charts are also sorted by ascending math scores.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\n# Reorder RACE by mean MATHS score\nexam_data &lt;- exam_data %&gt;%\n  group_by(RACE) %&gt;%\n  mutate(mean_math = mean(MATHS, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(RACE = reorder(RACE, mean_math))\n\n# Plot\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,\n    fill=\"aquamarine2\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )+  \n  ggtitle(\"Maths scores by Races\")\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),        # data_id added here to Class     \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n    options = list(\n    opts_hover(css = \"fill:black;\")\n  )\n)    \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;” but black has been used here for better contrast."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#styling-hover-effect",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #333333;\"),  #CSS codes here for Color Hex Gray20\n    opts_hover_inv(css = \"opacity:0.2;\") #CSS codes here for opaque\n  )                                        \n)       \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\nThere are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,           # tooltip added here to Class   \n        data_id = CLASS),          # data_id added here to Class      \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #000080;\"),  #CSS Codes here for color hex NavyBlue\n    opts_hover_inv(css = \"opacity:0.2;\") #CSS Codes here for opaque\n  )                                        \n)     \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#click-effect-with-onclick",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nClick actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+ \n  theme_dark()+\n  ggtitle(\"Dotplot of Math scores\") \n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+ \n  theme_dark()+\n  ggtitle(\"Dotplot of English scores\") \n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\n\nColour and Colour Palette\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). Colour palette is customised as well with Set2.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,         \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\")\n\n\n\n\n\nData Labels on Hover\nGender and Science scores may be added on Hover.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\",\n        #Hover text\n        text=~paste(\"Gender: \", GENDER, \"&lt;br&gt;Science: \", SCIENCE))\n\n\n\n\n\nChart Title\nChart title may be added\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\",\n        #Hover text\n        text=~paste(\"Gender: \", GENDER, \"&lt;br&gt;Science: \", SCIENCE))%&gt;%\n  layout(title = \"Scatterplot of English by Math Scores\")  # Title"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH, fill=GENDER)) +\n  geom_point(size=2) +\n  ggtitle(\"Scatterplot of Math by English Scores\") + \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH, fill=GENDER)) +\n  geom_point(size=2) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE, fill=GENDER)) +\n  geom_point(size=2) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))%&gt;%\nlayout(\n    showlegend = FALSE)\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk.\n\n\nCustomisation of Main Title and Axis\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\n# First plot (MATHS vs ENGLISH)\np1 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point(size = 2) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + \n  labs(\n    title = \"MATHS by ENGLISH\",\n    x = \"MATH\",  # Shared X-axis label\n    y = \"ENGLISH\"\n  ) \n\n# Second plot (MATHS by SCIENCE)\np2 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = SCIENCE, fill = GENDER)) +\n  geom_point(size = 2) +  \n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + \n  labs(\n    title = \"MATHS by SCIENCE\",\n    x = \"MATH\",  # Shared X-axis label\n    y = \"SCIENCE\"\n  ) \n\n# Convert ggplot to plotly objects\np1_plotly &lt;- ggplotly(p1)\np2_plotly &lt;- ggplotly(p2)\n\n# Combine the plots using subplot\nsubplot(p1_plotly, p2_plotly, nrows = 1, shareX = TRUE, shareY = FALSE) %&gt;%\n  layout(\n    title = \"Scatterplot Comparison\",\n    showlegend = FALSE,\n    xaxis = list(title = \"MATH\"),  # Shared X-axis label\n    yaxis = list(title = \"ENGLISH\"),  \n    yaxis2 = list(title = \"SCIENCE\"), \n    margin = list(t = 80),  # Adjust space\n    autosize = TRUE,  # Allow auto resizing\n    xaxis2 = list(domain = c(0.6, 1)),  # The second plot (SCIENCE) starts here\n    yaxis2 = list(domain = c(0, 1))  # The second plot takes full height\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-sunburst",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-sunburst",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.5 Interactive Sunburst",
    "text": "3.7.5 Interactive Sunburst\nIn the code chunk, levels are created for each Subject (Maths, English, Science):\n\nLevel 1: Pass/Fail\nLevel 2: Passing Grades (A*, A, B, C)\nLevel 3: Race Breakdown (Chinese, Malay, Indian, Others)\nLevel 4: Class (3A to 3I)\n\nInstead of a typical sunburst, this interactive sunburst allows user interaction on clicks. Hover effects have been added as well.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# Function to prepare data for plotly sunburst with RACE and CLASS\nprepare_plotly_interactive_data_actual &lt;- function(df, subject_col) {\n  df_processed &lt;- df %&gt;%\n    mutate(\n      Subject = subject_col,\n      PassFail = ifelse(.data[[subject_col]] &gt;= 50, \"Pass\", \"Fail\"),\n      Grade = case_when(\n        .data[[subject_col]] &lt; 50 ~ \"Fail\",\n        .data[[subject_col]] &gt;= 50 & .data[[subject_col]] &lt; 60 ~ \"C\",\n        .data[[subject_col]] &gt;= 60 & .data[[subject_col]] &lt; 70 ~ \"B\",\n        .data[[subject_col]] &gt;= 70 & .data[[subject_col]] &lt; 90 ~ \"A\",\n        .data[[subject_col]] &gt;= 90 ~ \"A*\"\n      )\n    )\n\n  # Prepare data for the first level (Subject -&gt; Pass/Fail)\n  level1 &lt;- df_processed %&gt;%\n    group_by(Subject, PassFail) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, sep = \"-\"),\n      parents = Subject,\n      labels = PassFail\n    )\n\n  # Prepare data for the second level (Pass -&gt; Grade)\n  level2_pass &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, sep = \"-\"),\n      parents = paste(Subject, PassFail, sep = \"-\"),\n      labels = Grade\n    )\n\n  # Prepare data for the third level (Grade -&gt; RACE)\n  level3_race &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, sep = \"-\"),\n      labels = RACE\n    )\n\n  # Prepare data for the fourth level (RACE -&gt; CLASS)\n  level4_class &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE, CLASS) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      labels = CLASS\n    )\n\n  # Root level\n  root &lt;- data.frame(\n    ids = unique(df_processed$Subject),\n    labels = unique(df_processed$Subject),\n    parents = NA,\n    Count = n_distinct(df_processed$ID)\n  )\n\n  plotly_df &lt;- bind_rows(root, level1, level2_pass, level3_race, level4_class)\n  return(plotly_df)\n}\n\n# Define the subjects to visualize\nsubjects_to_visualize &lt;- c(\"MATHS\", \"ENGLISH\", \"SCIENCE\")\nplot_titles &lt;- c(\"Maths\", \"English\", \"Science\")\n\n# Create the plotly figure\nfig_interactive_actual &lt;- plot_ly()\n\n# Add sunburst for the first subject (MATHS)\ninteractive_data_subject1 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject1,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 0),\n    maxdepth = 2,\n    name = plot_titles[1] # Subtitle\n  )\n\n# Add sunburst for the second subject (ENGLISH)\ninteractive_data_subject2 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject2,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 1),\n    maxdepth = 2,\n    name = plot_titles[2] # Subtitle\n  )\n\n# Add sunburst for the third subject (SCIENCEC)\ninteractive_data_subject3 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject3,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 2),\n    maxdepth = 2,\n    name = plot_titles[3] # Subtitle\n  )\n\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  layout(\n    title = \"Performance Breakdown by Subject\", # Main title\n    grid = list(columns = 3, rows = 1),\n    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title\n    sunburstcolorway = c(\n      \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n      \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\",\n      \"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\n      \"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"\n    ),\n    extendsunburstcolors = TRUE\n  )\n\nfig_interactive_actual\n\n\n\nHow to use the interactive chart to drill deeper?:\n\nChoose a Subject, click “Pass”.\nClick a grade (from A*, A, B, C).\nClick a race (from Chinese, Malay, Indian, Others).\nClick a class (from 3A to 3I).\n\nClicking on the middle circle at any level after the root level will allow you to exit one level.\n\n3.7.5.1 Adding Percentage Figures\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# Function to prepare data for plotly sunburst with RACE and CLASS\nprepare_plotly_interactive_data_actual &lt;- function(df, subject_col) {\n  df_processed &lt;- df %&gt;%\n    mutate(\n      Subject = subject_col,\n      PassFail = ifelse(.data[[subject_col]] &gt;= 50, \"Pass\", \"Fail\"),\n      Grade = case_when(\n        .data[[subject_col]] &lt; 50 ~ \"Fail\",\n        .data[[subject_col]] &gt;= 50 & .data[[subject_col]] &lt; 60 ~ \"C\",\n        .data[[subject_col]] &gt;= 60 & .data[[subject_col]] &lt; 70 ~ \"B\",\n        .data[[subject_col]] &gt;= 70 & .data[[subject_col]] &lt; 90 ~ \"A\",\n        .data[[subject_col]] &gt;= 90 ~ \"A*\"\n      )\n    )\n\n  # Prepare data for the first level (Subject -&gt; Pass/Fail)\n  level1 &lt;- df_processed %&gt;%\n    group_by(Subject, PassFail) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, sep = \"-\"),\n      parents = Subject,\n      labels = PassFail\n    )\n\n  # Prepare data for the second level (Pass -&gt; Grade)\n  level2_pass &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, sep = \"-\"),\n      parents = paste(Subject, PassFail, sep = \"-\"),\n      labels = Grade\n    )\n\n  # Prepare data for the third level (Grade -&gt; RACE)\n  level3_race &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, sep = \"-\"),\n      labels = RACE\n    )\n\n  # Prepare data for the fourth level (RACE -&gt; CLASS)\n  level4_class &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE, CLASS) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      labels = CLASS\n    )\n\n  # Root level\n  root &lt;- data.frame(\n    ids = unique(df_processed$Subject),\n    labels = paste0(unique(df_processed$Subject), \"\\n \"), \n    parents = NA,\n    Count = n_distinct(df_processed$ID)\n  )\n\n  plotly_df &lt;- bind_rows(root, level1, level2_pass, level3_race, level4_class) %&gt;%\n    group_by(parents) %&gt;%\n    mutate(percentage = Count / sum(Count, na.rm = TRUE)) %&gt;%\n    ungroup()\n\n  return(plotly_df)\n}\n\n# Define the subjects to visualize\nsubjects_to_visualize &lt;- c(\"MATHS\", \"ENGLISH\", \"SCIENCE\")\nplot_titles &lt;- c(\"Maths\", \"ENG\", \"SCI\")\n\n# Create the plotly figure\nfig_interactive_actual &lt;- plot_ly()\n\n# Add sunburst for the first subject (MATHS)\ninteractive_data_subject1 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject1,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 0),\n    maxdepth = 2,\n    name = plot_titles[1]\n  )\n\n# Add sunburst for the second subject (ENGLISH)\ninteractive_data_subject2 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject2,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 1),\n    maxdepth = 2,\n    name = plot_titles[2]\n  )\n\n# Add sunburst for the second subject (SCIENCE)\ninteractive_data_subject3 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject3,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 2),\n    maxdepth = 2,\n    name = plot_titles[3]\n  )\n\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  layout(\n    title = \"Performance Breakdown by Subject\",\n    grid = list(columns = 3, rows = 1),\n    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title\n    sunburstcolorway = c(\n      \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n      \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\",\n      \"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\n      \"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"\n    ),\n    extendsunburstcolors = TRUE\n  )\n\nfig_interactive_actual"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS, fill=GENDER)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)     \n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#ggiraph",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.9.1 ggiraph",
    "text": "3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#plotly-for-r",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.9.2 plotly for R",
    "text": "3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\nMarginal Histograms — They’re Not Just for Scatterplots"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. Sharing in chapter 1 included some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions will be covered.\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\",show_col_types = FALSE)\n\n\n\n\n\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 5,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"aquamarine2\", 0.5),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges(grid = FALSE)+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5),\n        plot.margin = unit(c(1, 1, 1, 2), \"cm\"))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()+\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5),\n        plot.margin = unit(c(1, 1, 1, 2), \"cm\"))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()+\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5),\n        plot.margin = unit(c(1, 1, 1, 2), \"cm\"))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(aes(fill=RACE),\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(aes(fill=RACE),\n               width = .20,\n               outlier.shape = NA) +\n  stat_dots(aes(fill=RACE),\n            side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(legend.position = 'none',\n        plot.title = element_text(face = \"bold\"))\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = CLASS, \n           y = ENGLISH)) +\n  stat_halfeye(aes(fill=CLASS),\n               adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(aes(fill=CLASS),\n               width = .20,\n               outlier.shape = NA) +\n  stat_dots(aes(fill=CLASS),\n            side = \"left\", \n            justification =1.2, \n            binwidth = .5,\n            dotsize = 0.5) +\n  coord_flip() +\n  theme_economist()+\n  labs(title  = \"Distribution of English Scores Across Classes\")+\n theme(\n    panel.spacing.x = unit(10, \"cm\"),\n    strip.background = element_blank(),    \n    legend.position = \"none\" # Remove the legend\n  )\n\n\n\n\n\n\n\n\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#learning-outcome",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. Sharing in chapter 1 included some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions will be covered."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#getting-started",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\",show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 5,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"aquamarine2\", 0.5),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges(grid = FALSE)+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5),\n        plot.margin = unit(c(1, 1, 1, 2), \"cm\"))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()+\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5),\n        plot.margin = unit(c(1, 1, 1, 2), \"cm\"))+\n  labs(title  = \"Distribution of English Scores Across Classes\")\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()+\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()+\n  theme(axis.title.y = element_text(hjust = 0.5, vjust = 0.5),\n        axis.title.x = element_text(hjust = 0.5, vjust = 0.5),\n        plot.margin = unit(c(1, 1, 1, 2), \"cm\"))+\n  labs(title  = \"Distribution of English Scores Across Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "Raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(aes(fill=RACE),\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(aes(fill=RACE),\n               width = .20,\n               outlier.shape = NA) +\n  stat_dots(aes(fill=RACE),\n            side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()+\n  labs(title  = \"Distribution of English Scores Across Races\")+\n  theme(legend.position = 'none',\n        plot.title = element_text(face = \"bold\"))\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = CLASS, \n           y = ENGLISH)) +\n  stat_halfeye(aes(fill=CLASS),\n               adjust = 0.5,\n               justification = -0.1,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(aes(fill=CLASS),\n               width = .20,\n               outlier.shape = NA) +\n  stat_dots(aes(fill=CLASS),\n            side = \"left\", \n            justification =1.2, \n            binwidth = .5,\n            dotsize = 0.5) +\n  coord_flip() +\n  theme_economist()+\n  labs(title  = \"Distribution of English Scores Across Classes\")+\n theme(\n    panel.spacing.x = unit(10, \"cm\"),\n    strip.background = element_blank(),    \n    legend.position = \"none\" # Remove the legend\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#reference",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "Introducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will create statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.\n\n\n\n\n\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, magick,\n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse, ggborderline)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\n\n\n\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDo not confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nThe Code\n\n\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe Code ChunkThe Table\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(title  = \"Standard error of mean maths score by race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean Maths score by Race.\n\n\n\nA 95% confidence interval depicts a range of values such that if repeated samples were taken and the confidence interval computed for each sample, 95% of these ranges would contain the true value, or population mean.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean Maths score by Race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.64*se, \n        ymax=mean+1.64*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"90% confidence interval of mean maths score by race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.64*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\nIn this section, we plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(5,7),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1, size=7),\n                     plot.title=element_text(size=7,face='bold', hjust=0.5),\n                    panel.background = element_rect(fill = \"#f0f0fb\"),\n                    plot.background = element_rect(fill=\"#f0f0fb\",color=\"black\",linewidth=0.5))+\n                   ggtitle(\"99% Confidence interval of &lt;br&gt; average maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"90%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race with multiple intervals of 66% and 95%.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot of 66% and 95%\")+\n  aes(interval_color=stat(level)) +\n  theme(plot.title = element_text(face='bold'))\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments were used:\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\n.width\na vector of probabilities that determines the widths of the resulting intervals. The default setting is .width = c(0.66, 0.95), or plotting 66% CI and 95% CI. Here the setting is at 95%.\n\n\n.point\npoint summary (typically mean, median, or mode)\n\n\n.interval\ninterval type (quantile interval, qi; highest-density interval, hdi; or highest-density continuous interval, hdci).\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  aes(interval_color=stat(level)) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot of 95%\")+\n  theme(plot.title = element_text(face='bold'))\n\n\n\n\n\n\nAnother example of a different width of 95% and 99%.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = c(0.95,0.99),\n  .point = median,\n  .interval = qi) +\n  aes(interval_color=stat(level)) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot of 95% and 99%\")+\n  theme(\n        plot.title = element_text(face = \"bold\"),\n        axis.line.x = element_line(linewidth = 0.3),\n        axis.line.y = element_line(linewidth = 0.3))\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"cyan\",      \n    show.legend = TRUE     \n  ) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + Interval plot\")+\n  theme(plot.title = element_text(face='bold'))\n\n\n\n\n\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\nNote: We only need to perform this step once.\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs. The animated HOP shows each frame of distribution for RACE.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"navyblue\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)+\n  labs(\n    title = \"Hypothetical Outcome Plots\",\n    subtitle = \"Math Scores by Race\")+\n  theme(plot.title = element_text(face='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#learning-outcome",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, we will create statistical graphics for visualising uncertainty. By the end of this chapter we will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#getting-started",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, magick,\n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse, ggborderline)\n\n\n\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDo not confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, we plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nThe Code\n\n\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe Code ChunkThe Table\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(title  = \"Standard error of mean maths score by race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean Maths score by Race.\n\n\n\nA 95% confidence interval depicts a range of values such that if repeated samples were taken and the confidence interval computed for each sample, 95% of these ranges would contain the true value, or population mean.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean Maths score by Race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.64*se, \n        ymax=mean+1.64*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"90% confidence interval of mean maths score by race\")+\n  theme(plot.title = element_text(hjust=0.5, face='bold'))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.64*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label\n\n\n\n\n\n\nIn this section, we plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(5,7),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1, size=7),\n                     plot.title=element_text(size=7,face='bold', hjust=0.5),\n                    panel.background = element_rect(fill = \"#f0f0fb\"),\n                    plot.background = element_rect(fill=\"#f0f0fb\",color=\"black\",linewidth=0.5))+\n                   ggtitle(\"99% Confidence interval of &lt;br&gt; average maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"90%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "ggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race with multiple intervals of 66% and 95%.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot of 66% and 95%\")+\n  aes(interval_color=stat(level)) +\n  theme(plot.title = element_text(face='bold'))\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments were used:\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\n.width\na vector of probabilities that determines the widths of the resulting intervals. The default setting is .width = c(0.66, 0.95), or plotting 66% CI and 95% CI. Here the setting is at 95%.\n\n\n.point\npoint summary (typically mean, median, or mode)\n\n\n.interval\ninterval type (quantile interval, qi; highest-density interval, hdi; or highest-density continuous interval, hdci).\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  aes(interval_color=stat(level)) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot of 95%\")+\n  theme(plot.title = element_text(face='bold'))\n\n\n\n\n\n\nAnother example of a different width of 95% and 99%.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = c(0.95,0.99),\n  .point = median,\n  .interval = qi) +\n  aes(interval_color=stat(level)) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot of 95% and 99%\")+\n  theme(\n        plot.title = element_text(face = \"bold\"),\n        axis.line.x = element_line(linewidth = 0.3),\n        axis.line.y = element_line(linewidth = 0.3))\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"cyan\",      \n    show.legend = TRUE     \n  ) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + Interval plot\")+\n  theme(plot.title = element_text(face='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "4c. Visualising Uncertainty",
    "section": "",
    "text": "devtools::install_github(\"wilkelab/ungeviz\")\nNote: We only need to perform this step once.\n\n\n\n\nlibrary(ungeviz)\n\n\n\n\nNext, the code chunk below will be used to build the HOPs. The animated HOP shows each frame of distribution for RACE.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"navyblue\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)+\n  labs(\n    title = \"Hypothetical Outcome Plots\",\n    subtitle = \"Math Scores by Race\")+\n  theme(plot.title = element_text(face='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, we will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.2.1 Installing and launching R packages",
    "text": "5.2.1 Installing and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\n\nThe Code\n\n\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, magick)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-edges-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-edges-data",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.1 The edges data",
    "text": "5.3.1 The edges data\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-nodes-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-nodes-data",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.2 The nodes data",
    "text": "5.3.2 The nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.3 Importing network data from files",
    "text": "5.3.3 Importing network data from files\nIn this step, we import GAStech_email_node.csv and GAStech_email_edges.csv into RStudio environment by using read_csv() of readr package.\n\nThe Code\n\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\",show_col_types = FALSE)\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\",show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.4 Reviewing the imported data",
    "text": "5.3.4 Reviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nThe structureThe Code\n\n\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\nglimpse(GAStech_edges)\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character”” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.5 Wrangling time",
    "text": "5.3.5 Wrangling time\nThe code chunk below will be used to perform the changes.\n\nThe Code\n\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.6 Reviewing the revised date fields",
    "text": "5.3.6 Reviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\nThe structureThe Code\n\n\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\nglimpse(GAStech_edges)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.7 Wrangling attributes",
    "text": "5.3.7 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nThe Code\n\n\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.3.8 Reviewing the revised edges file",
    "text": "5.3.8 Reviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4.1 The tbl_graph object",
    "text": "5.4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network.\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dplyr-verbs-in-tidygraph",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4.2 The dplyr verbs in tidygraph",
    "text": "5.4.2 The dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\n\n\n\n\n\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give us the edge data and .G() will give us the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4.3 Using tbl_graph() to build tidygraph data model.",
    "text": "5.4.3 Using tbl_graph() to build tidygraph data model.\nIn this section, we will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, we are recommended to review to reference guide of tbl_graph()\n\nThe Code\n\n\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4.4 Reviewing the output tidygraph’s graph object",
    "text": "5.4.4 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object-1",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4.5 Reviewing the output tidygraph’s graph object",
    "text": "5.4.5 Reviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.4.6 Changing the active object",
    "text": "5.4.6 Changing the active object\nThe nodes tibble data frame is activated by default, but we can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\nThe Code\n\n\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.1 Plotting a basic network graph",
    "text": "5.5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before we get started, it is advisable to read their respective reference guide at least once.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.2 Changing the default network graph theme",
    "text": "5.5.2 Changing the default network graph theme\nIn this section, we will use theme_graph() to remove the x and y axes. Before we get started, it is advisable to read it’s reference guide at least once.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-coloring-of-the-plot",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.3 Changing the coloring of the plot",
    "text": "5.5.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-ggraphs-layouts",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.4 Working with ggraph’s layouts",
    "text": "5.5.4 Working with ggraph’s layouts\nggraph() support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.5 Fruchterman and Reingold layout",
    "text": "5.5.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.6 Modifying network nodes",
    "text": "5.5.6 Modifying network nodes\nIn this section, we will colour each node by referring to their respective departments.\n\nThe PlotThe Code\n\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph, layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, size = 3))\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.7 Modifying edges",
    "text": "5.5.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#exploring-other-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#exploring-other-layouts",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.5.8 Exploring Other Layouts",
    "text": "5.5.8 Exploring Other Layouts\n\nThe PlotThe Code\n\n\n\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n\n\n\n\n\n\ngraph &lt;- as_tbl_graph(GAStech_graph) |&gt; \n  mutate(degree = centrality_degree())\nlapply(c('stress', 'sugiyama', 'lgl', 'graphopt','kk','nicely'), function(layout) {\n  ggraph(graph, layout = layout) + \n    geom_edge_link(aes(width=Weight), show.legend = FALSE, alpha=0.2) +\n    scale_edge_width(range = c(0.1, 5)) +\n    geom_node_point(aes(colour = Department)) + \n    labs(caption = paste0('Layout: ', layout))\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLayout\nDescription\n\n\n\n\nStress\nDefault. Uses stress majorization for node arrangements to make geometric distances between nodes show their graph distances.\n\n\nSugiyama\nUsed for directed acyclic graphs (DAGs) that aims to minimize edge crossings and bends.\n\n\nLGL (Large Graph Layout)\nDesigned for large graphs. Fast layout to handle networks with many nodes.\n\n\nGraphopt\nForce-directed algorithm that often produces compact layouts.\n\n\nKK (Kamada-Kawai)\nA spring-based layout that treats edges as springs and tries to find an equilibrium state that minimizes the total energy of the system. Often produces aesthetically pleasing layouts for smaller graphs.\n\n\nNicely\nLayout that tries to pick a reasonable default layout based on the graph’s characteristics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6.1 Working with facet_edges()",
    "text": "5.6.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_edges-1",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6.2 Working with facet_edges()",
    "text": "5.6.2 Working with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'left',\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7))\n  \ng + facet_edges(~Weekday)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#a-framed-facet-graph",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6.3 A framed facet graph",
    "text": "5.6.3 A framed facet graph\nThe code chunk below adds frame to each graph.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'left',\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-facet_nodes",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.6.4 Working with facet_nodes()",
    "text": "5.6.4 Working with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'left',\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7.1 Computing centrality indices",
    "text": "5.7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()+\n  theme(legend.position = 'bottom',\n        legend.title = element_text(size = 5),\n        legend.text = element_text(size = 5))\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n\nNetwork graph with network measures"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-network-metrics",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7.2 Visualising network metrics",
    "text": "5.7.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()+\n  theme(legend.position = 'bottom',\n        legend.title = element_text(size = 5),\n        legend.text = element_text(size = 5))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-community",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.7.3 Visualising Community",
    "text": "5.7.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()\n\n\n\nIn order to support effective visual investigation, the community network above has been revised by using geom_mark_hull() of ggforce package.\n\n\n\n\n\n\nImportant\n\n\n\nPlease be reminded that we must to install and include ggforce and concaveman packages before running the code chunk below.\n\n\nThe output network graph with community coloured\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()+\n  theme(legend.position = 'bottom',\n        legend.title = element_text(size = 5),\n        legend.text = element_text(size = 4))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8.1 Data preparation",
    "text": "5.8.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8.2 Plotting the first interactive network graph",
    "text": "5.8.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8.3 Working with layout",
    "text": "5.8.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8.4 Working with visual attributes - Nodes",
    "text": "5.8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nThe PlotThe Code\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8.5 Working with visual attributes - Edges",
    "text": "5.8.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n\nThe argument arrows is used to define where to place the arrow.\nThe smooth argument is used to plot the edges using a smooth curve.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\nVisit Option to find out more about visEdges’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#interactivity",
    "title": "5. Modelling, Visualising and Analysing Network Data with R",
    "section": "5.8.6 Interactivity",
    "text": "5.8.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "View my Tableau profile :"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class_Ex05",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load the R packages into R environment."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#importing-data",
    "title": "In-class_Ex05",
    "section": "Importing Data",
    "text": "Importing Data\nFor the purpose of this exercise, MC1_graph.json file will be used. Before getting started, you should have the data set in the data sub-folder.\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object\n\nvc1 &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#inspect-structure",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#inspect-structure",
    "title": "In-class_Ex05",
    "section": "Inspect Structure",
    "text": "Inspect Structure\nBefore preparing the data, it is always a good practice to examine the structure of kg object.\nIn the code chunk below str() is used to reveal the structure of kg object.\n\nstr(vc1, max.level =1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nThis is a directed graph that is multigraph form."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#extract-and-inspect",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#extract-and-inspect",
    "title": "In-class_Ex05",
    "section": "Extract and Inspect",
    "text": "Extract and Inspect\nNext, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from kg object into two separate tibble data frames called nodes_tbl and edges_tbl respectively.\n\nnodes_tbl&lt;- as_tibble(vc1$nodes)\nedges_tbl&lt;- as_tibble(vc1$links)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#initial-eda-for-nodes-and-edges",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#initial-eda-for-nodes-and-edges",
    "title": "In-class_Ex05",
    "section": "Initial EDA for Nodes and Edges",
    "text": "Initial EDA for Nodes and Edges\nIt is time for us to apply appropriate EDA methods to examine the data.\nCode chunk below uses ggplot2 functions to reveal the frequency distribution of Node Type field of nodes_tbl.\n\nggplot(data = nodes_tbl, \n       aes(y= `Node Type`))+\n  geom_bar()\n\n\n\n\n\n\n\n\nggplot2 functions are used the reveal the frequency distribution of Edge Type field of edges_tbl.\n\nggplot(data = edges_tbl,\n       aes(y=`Edge Type`))+\n  geom_bar()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#knowledge-graph-creation",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#knowledge-graph-creation",
    "title": "In-class_Ex05",
    "section": "Knowledge Graph Creation",
    "text": "Knowledge Graph Creation\n\nStep 1: Mapping from node id to row index\nBefore we can go ahead to build the tidygraph object, it is important for us to ensure each id from the node list is mapped to the correct row number. This requirement can be achieved by using the code chunk below.\n\nid_map &lt;-tibble(id= nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\nStep 2: Map source and target IDs to row indices\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\nedges_tbl &lt;- edges_tbl%&gt;%\n  left_join(id_map, by = c(\"source\"=\"id\"))%&gt;%\n  rename(from = index)%&gt;%\n  left_join(id_map, by = c(\"target\"=\"id\"))%&gt;%\n  rename(to=index)\n\n\n\nStep 3: Filter out any unmatched (invalid) edges\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\nStep 4: Creating the graph\nCreated graph object by using code chunk below.\n\ngraph &lt;- tbl_graph(nodes =nodes_tbl,\n                    edges =edges_tbl,\n                    directed =vc1$directed)\n\nConfirm the output object is indeed in tidygraph format by using the code chunk below.\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-knowledge-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-knowledge-graph",
    "title": "In-class_Ex05",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\n\nset.seed(1234)\n\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-entire-graph",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#visualising-the-entire-graph",
    "title": "In-class_Ex05",
    "section": "Visualising the entire graph",
    "text": "Visualising the entire graph\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\nPlotting the line is done before the node. Force directed layout applied.\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 2) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. This is always the case in graph visualisation and analysis. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\n\nStep 1: Filter edges to only “Memberof”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type`==\"MemberOf\")\n\nFilter away the edges due to clutter from above.\n\n\nStep 2: Extract only connected nodes\n\nused_node_indices &lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\nStep 3: Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)  # optional cleanup\n\n\n\nStep 4: Plot the subgraph\n\nggraph(graph_memberof, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 1) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\n\n\n\n\n\n\nNotice that the sub-graph above is very clear and the relationship between musical group and person can be visualise easily."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Exercise 1",
    "section": "",
    "text": "Aero Media is a local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024. As a graphical editor of the media company (Aero Media), there is a need to prepare at most three non-interactive data visualisation for the daily article. This article aims to explore the distribution and structure of the population age, gender, and regions. Please refer to Section 2 to 7 for the rationalisation and preparation, and Section 8 for this Article. Please refer to Section 10 for the comments and edits for Phase 2 of the task.\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shares by Department of Statistics, Singapore (DOS) is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task",
    "title": "Take-home_Exercise 1",
    "section": "",
    "text": "Aero Media is a local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024. As a graphical editor of the media company (Aero Media), there is a need to prepare at most three non-interactive data visualisation for the daily article. This article aims to explore the distribution and structure of the population age, gender, and regions. Please refer to Section 2 to 7 for the rationalisation and preparation, and Section 8 for this Article. Please refer to Section 10 for the comments and edits for Phase 2 of the task."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home_Exercise 1",
    "section": "",
    "text": "To accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shares by Department of Statistics, Singapore (DOS) is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#viewing-data-rows-and-columns-using-glimpse",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#viewing-data-rows-and-columns-using-glimpse",
    "title": "Take-home_Exercise 1",
    "section": "4.1 Viewing Data Rows and Columns using glimpse",
    "text": "4.1 Viewing Data Rows and Columns using glimpse\n\nglimpse(sg_demo_2024)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\nThe data contains data on Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024.\nThe dataframe has 6 columns and 60,424 rows. Four of the columns contains categorical data type and the other two are in double/real number data type.\n\nThe categorical attributes are: PA, SZ, Age and Sex\nThe numerical attributes are: Pop, and Time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-dictionary-for-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-dictionary-for-variables",
    "title": "Take-home_Exercise 1",
    "section": "4.2 Data Dictionary for Variables",
    "text": "4.2 Data Dictionary for Variables\n\n\n\n\n\n\n\n\n\nCategory\nColumn Headers\nType\nDescription\n\n\n\n\nPlanning Area\nPA\nCHAR\n55 area names\n\n\nSubzone\nSZ\nCHAR\n332 area names\n\n\nSingle Year of Age\nAge\nCHAR\n0 to 90_and_over (in increments of 1)\n\n\nSex\nSex\nCHAR\nMales; Females\n\n\nResident Count\nPop\nNUM\n0 to 1180 (in multiples of 10, with occasional breaks)\n\n\nTime/Period\nTime\nNUM\n2024\n\n\n\n\n\n\n\n\n\nNote.\n\n\n\n\nFor June 2024, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onward exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10.\nThe data may not add up due to rounding.\nData was generated on 24/9/2024.\n\n\n\n\n4.2.1 Categorical values\nThese are the categorical values within PA and SZ.\n\nThe DataThe Code\n\n\n\n\n\nUnique Categories in Dataset\n\n\n\n\n\n\n\nValues\n\n\n\n\nPA\nAng Mo Kio, Bedok, Bishan, Boon Lay, Bukit Batok, Bukit Merah, Bukit Panjang, Bukit Timah, Central Water Catchment, Changi, Changi Bay, Choa Chu Kang, Clementi, Downtown Core, Geylang, Hougang, Jurong East, Jurong West, Kallang, Lim Chu Kang, Mandai, Marina East, Marina South, Marine Parade, Museum, Newton, North-Eastern Islands, Novena, Orchard, Outram, Pasir Ris, Paya Lebar, Pioneer, Punggol, Queenstown, River Valley, Rochor, Seletar, Sembawang, Sengkang, Serangoon, Simpang, Singapore River, Southern Islands, Straits View, Sungei Kadut, Tampines, Tanglin, Tengah, Toa Payoh, Tuas, Western Islands, Western Water Catchment, Woodlands, Yishun\n\n\nSZ\nAng Mo Kio Town Centre, Cheng San, Chong Boon, Kebun Bahru, Sembawang Hills, Shangri-La, Tagore, Townsville, Yio Chu Kang, Yio Chu Kang East, Yio Chu Kang North, Yio Chu Kang West, Bayshore, Bedok North, Bedok Reservoir, Bedok South, Frankel, Kaki Bukit, Kembangan, Siglap, Bishan East, Marymount, Upper Thomson, Liu Fang, Samulun, Shipyard, Tukang, Brickworks, Bukit Batok Central, Bukit Batok East, Bukit Batok South, Bukit Batok West, Gombak, Guilin, Hillview, Hong Kah North, Alexandra Hill, Alexandra North, Bukit Ho Swee, Bukit Merah, City Terminals, Depot Road, Everton Park, Henderson Hill, Kampong Tiong Bahru, Maritime Square, Redhill, Singapore General Hospital, Telok Blangah Drive, Telok Blangah Rise, Telok Blangah Way, Tiong Bahru, Tiong Bahru Station, Bangkit, Dairy Farm, Fajar, Jelebu, Nature Reserve, Saujana, Senja, Anak Bukit, Coronation Road, Farrer Court, Hillcrest, Holland Road, Leedon Park, Swiss Club, Ulu Pandan, Central Water Catchment, Changi Airport, Changi Point, Changi West, Changi Bay, Choa Chu Kang Central, Choa Chu Kang North, Keat Hong, Peng Siang, Teck Whye, Yew Tee, Clementi Central, Clementi North, Clementi West, Clementi Woods, Faber, Pandan, Sunset Way, Toh Tuck, West Coast, Anson, Bayfront Subzone, Bugis, Cecil, Central Subzone, City Hall, Clifford Pier, Marina Centre, Maxwell, Nicoll, Phillip, Raffles Place, Tanjong Pagar, Aljunied, Geylang East, Kallang Way, Kampong Ubi, Macpherson, Defu Industrial Park, Hougang Central, Hougang East, Hougang West, Kangkar, Kovan, Lorong Ah Soo, Lorong Halus, Tai Seng, Trafalgar, International Business Park, Jurong Gateway, Jurong Port, Jurong River, Lakeside (Business), Lakeside (Leisure), Penjuru Crescent, Teban Gardens, Toh Guan, Yuhua East, Yuhua West, Boon Lay Place, Chin Bee, Hong Kah, Jurong West Central, Kian Teck, Safti, Taman Jurong, Wenya, Yunnan, Bendemeer, Boon Keng, Crawford, Geylang Bahru, Kallang Bahru, Kampong Bugis, Kampong Java, Lavender, Tanjong Rhu, Lim Chu Kang, Mandai East, Mandai Estate, Mandai West, Marina East, Marina South, East Coast, Katong, Marina East (Mp), Marine Parade, Mountbatten, Bras Basah, Dhoby Ghaut, Fort Canning, Cairnhill, Goodwood Park, Istana Negara, Monk’s Hill, Newton Circus, Orange Grove, North-Eastern Islands, Balestier, Dunearn, Malcolm, Moulmein, Mount Pleasant, Boulevard, Somerset, Tanglin, China Square, Chinatown, Pearl’s Hill, People’s Park, Flora Drive, Loyang East, Loyang West, Pasir Ris Central, Pasir Ris Drive, Pasir Ris Park, Pasir Ris Wafer Fab Park, Pasir Ris West, Airport Road, Paya Lebar East, Paya Lebar North, Paya Lebar West, Plab, Benoi Sector, Gul Basin, Gul Circle, Joo Koon, Pioneer Sector, Coney Island, Matilda, Northshore, Punggol Canal, Punggol Field, Punggol Town Centre, Waterway East, Commonwealth, Dover, Ghim Moh, Holland Drive, Kent Ridge, Margaret Drive, Mei Chin, National University Of S’pore, One North, Pasir Panjang 1, Pasir Panjang 2, Port, Queensway, Singapore Polytechnic, Tanglin Halt, Institution Hill, Leonie Hill, One Tree Hill, Oxley, Paterson, Bencoolen, Farrer Park, Kampong Glam, Little India, Mackenzie, Mount Emily, Rochor Canal, Selegie, Sungei Road, Victoria, Pulau Punggol Barat, Pulau Punggol Timor, Seletar, Seletar Aerospace Park, Admiralty, Sembawang Central, Sembawang East, Sembawang North, Sembawang Springs, Sembawang Straits, Senoko North, Senoko South, The Wharves, Anchorvale, Compassvale, Fernvale, Lorong Halus North, Rivervale, Sengkang Town Centre, Sengkang West, Lorong Chuan, Seletar Hills, Serangoon Central, Serangoon Garden, Serangoon North, Serangoon North Ind Estate, Upper Paya Lebar, Pulau Seletar, Simpang North, Simpang South, Tanjong Irau, Boat Quay, Clarke Quay, Robertson Quay, Sentosa, Southern Group, Straits View, Gali Batu, Kranji, Pang Sua, Reservoir View, Turf Club, Simei, Tampines East, Tampines North, Tampines West, Xilin, Chatsworth, Nassim, Ridout, Tyersall, Brickland, Forest Hill, Garden, Park, Plantation, Tengah Industrial Estate, Bidadari, Boon Teck, Braddell, Joo Seng, Kim Keat, Lorong 8 Toa Payoh, Pei Chun, Potong Pasir, Sennett, Toa Payoh Central, Toa Payoh West, Woodleigh, Tengeh, Tuas Bay, Tuas North, Tuas Promenade, Tuas View, Tuas View Extension, Jurong Island And Bukom, Semakau, Sudong, Bahar, Cleantech, Murai, Greenwood Park, Midview, North Coast, Senoko West, Woodgrove, Woodlands East, Woodlands Regional Centre, Woodlands South, Woodlands West, Khatib, Lower Seletar, Nee Soon, Northland, Springleaf, Yishun Central, Yishun East, Yishun South, Yishun West\n\n\nAge\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90_and_Over\n\n\nSex\nMales, Females\n\n\n\n\n\n\n\n# Understanding the unique data values in each column that is categorical.\n\nget_unique_val &lt;- function(df){lapply(df, unique)}\nsg_demo_2024_cat &lt;- sg_demo_2024[,c(\"PA\", \"SZ\", \"Age\", \"Sex\")]\nunique_val &lt;- get_unique_val(sg_demo_2024_cat)\nuni_val_df &lt;- data.frame(\n  Values = sapply(unique_val, paste, collapse = \", \")\n)\n\nkable(uni_val_df, caption = \"Unique Categories in Dataset\", row.names = NA, label = NULL)\n\n\n\n\n\n4.2.2 Statistics of Numerical Variables\nNotice that:\n\nAge variable is not a numerical value but a categorical value.\nThe statistics for Pop variable are not very useful as the values are a summation for each combination of variables in a particular record.\nIn Time variable, there is only one year of data at 2024.\n\n\nThe DataThe Code\n\n\n\n\n\n\n\n\nPop\nTime\n\n\n\n\n\nMin. : 0.0\nMin. :2024\n\n\n\n1st Qu.: 0.0\n1st Qu.:2024\n\n\n\nMedian : 20.0\nMedian :2024\n\n\n\nMean : 69.4\nMean :2024\n\n\n\n3rd Qu.: 90.0\n3rd Qu.:2024\n\n\n\nMax. :1180.0\nMax. :2024\n\n\n\n\n\n\n\n# Understanding the distribution of numerical values \nrealis_num &lt;- sg_demo_2024[,c(\"Pop\", \"Time\")]\n  \nkable(summary(realis_num))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#flowchart-of-data-and-graphs",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#flowchart-of-data-and-graphs",
    "title": "Take-home_Exercise 1",
    "section": "4.3 Flowchart of data and graphs",
    "text": "4.3 Flowchart of data and graphs\nThe flowchart displays the course of action to be undertaken to pre-process the data to produce the eventual graphs.\n\nStarts from the data in cylindrical shape.\nCategorical variables are in rounded edge rectangles.\nNumerical variables are circles.\nDiscretized data are in hexagons.\nGraphs are in a subroutine shape.\n\n\nThe FlowchartThe Code\n\n\n\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n    }\n  }\n}%%\n\nflowchart TD\n    id1[(sg_demo_2024)]--&gt;C((Pop))\n    C((Pop))--&gt;G(Sub_Zone)\n    G(Sub_Zone)--&gt; F(Planning_Area) \n\n    F --&gt;|Discretize| id2{{Region Type - CR, ER, NR, NER, WR}}\n    id2 --&gt;|Filter| D(Sex)\n    D(Sex)--&gt; |Filter| B(Age)\n    D(Sex)--&gt;|Graph Type|K[[❤ EDA 2: Pyramid Bar]] \n\n    D(Sex)--&gt; |Graph Type|N[[Stacked Bar Chart]]\n\n    B(Age) --&gt;|Change Type| H((Age_Numerical))\n    B(Age) --&gt;|Discretize| id3{{summarised_ages - young, working-age, elderly}}\n    B(Age) --&gt;|Discretize| id4{{Age_type - 0-4,5-9,...,90 & Over}}\n\n    id3--&gt; |Graph Type|M[[Bar Chart]]\n    id4--&gt; |Graph Type|A[[❤ EDA 1: Population Pyramid]]\n    id4--&gt; |Graph Type|L[[❤ EDA 3: Population Pyramids]]\n\n    H((Age_Numerical))--&gt;|Graph Type|O[[Histogram]] \n\n \n\n\n\n\n\n\n\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n    }\n  }\n}%%\n\nflowchart TD\n    id1[(sg_demo_2024)]--&gt;C((Pop))\n    C((Pop))--&gt;G(Sub_Zone)\n    G(Sub_Zone)--&gt; F(Planning_Area) \n\n    F --&gt;|Discretize| id2{{Region Type - CR, ER, NR, NER, WR}}\n    id2 --&gt;|Filter| D(Sex)\n    D(Sex)--&gt; |Filter| B(Age)\n    D(Sex)--&gt;|Graph Type|K[[❤ EDA 2: Pyramid Bar]] \n\n    D(Sex)--&gt; |Graph Type|N[[Stacked Bar Chart]]\n\n    B(Age) --&gt;|Change Type| H((Age_Numerical))\n    B(Age) --&gt;|Discretize| id3{{summarised_ages - young, working-age, elderly}}\n    B(Age) --&gt;|Discretize| id4{{Age_type - 0-4,5-9,...,90 & Over}}\n\n    id3--&gt; |Graph Type|M[[Bar Chart]]\n    id4--&gt; |Graph Type|A[[❤ EDA 1: Population Pyramid]]\n    id4--&gt; |Graph Type|L[[❤ EDA 3: Population Pyramids]]\n\n    H((Age_Numerical))--&gt;|Graph Type|O[[Histogram]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "title": "Take-home_Exercise 1",
    "section": "5.1 Data Cleaning",
    "text": "5.1 Data Cleaning\nVerifying data quality through checking for missing values and duplicates.\n\n5.1.1 Missing Values\n\nThe ResultsThe Code\n\n\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\n\n\nsg_demo_2024[missing(sg_demo_2024),]\n\n\n\n\n\n5.1.2 Duplicates\n\nThe ResultsThe Code\n\n\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\n\n\nsg_demo_2024[duplicated(sg_demo_2024),]\n\n\n\nThere were no missing values or duplicates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-transformation-reduction",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-transformation-reduction",
    "title": "Take-home_Exercise 1",
    "section": "5.2 Data Transformation/ Reduction",
    "text": "5.2 Data Transformation/ Reduction\n\n5.2.1 Data Label Encoding: Changing Age from categorical to numerical type\nAge as a continuous variable will be useful for plotting distributions.\n\nThe Code\n\n\n\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;%\n  mutate(Age_numerical_temp = ifelse(Age == \"90_and_Over\", \"90\", Age)) %&gt;%\n  mutate(Age_numerical = as.numeric(Age_numerical_temp)) %&gt;%\n  select(-Age_numerical_temp) # remove the temporary column\n\n\n\n\n\n\n5.2.2 Discretization: Creation of new Region_type\nThe discretization method splits the continuous data into intervals which reduces the data size and for ease of visualising through smaller segments. There are 55 planning area (PA) and 332 subzone (SZ), referencing Urban Redevelopment Authority (URA), the PA or SZ can be grouped into 5 regions:\n\nCentral Region (CR)\nEast Region (ER)\nNorth Region (NR)\nNorth East Region (NER)\nWest Region (WR)\n\nHence, a new column of Region_type was created to reflect the 5 segmented regions using PA.\n\nThe Code\n\n\n\n# Encoding regions\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;% \n  mutate(Region_type = case_when(\n    `PA` %in% c(\"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\",\n                \"Kallang\",\"Marina East\",\"Marina South\", \"Marine Parade\", \"Museum\",\n                \"Newton\", \"Novena\", \"Orchard\",\"Outram\",\"Queenstown\",\"River Valley\",\n                \"Rochor\",\"Singapore River\",\"Southern Islands\", \"Straits View\",\n                \"Tanglin\",\"Toa Payoh\") ~ \"CR\",\n    `PA` %in% c(\"Bedok\",\"Changi\",\"Changi Bay\",\"Pasir Ris\",\"Paya Lebar\",\"Tampines\") ~ \"ER\",\n    `PA` %in% c(\"Central Water Catchment\",\"Lim Chu Kang\",\"Mandai\",\n                \"Sembawang\", \"Simpang\", \"Sungei Kadut\",\"Woodlands\",\"Yishun\") ~ \"NR\",\n    `PA` %in% c(\"Ang Mo Kio\",\"Hougang\", \"North-Eastern Islands\", \"Punggol\", \n                \"Seletar\", \"Sengkang\", \"Serangoon\") ~ \"NER\",\n    `PA` %in% c(\"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\",\n                \"Clementi\", \"Jurong East\", \"Jurong West\", \"Pioneer\", \"Tengah\",\n                \"Tuas\", \"Western Islands\",\"Western Water Catchment\") ~ \"WR\"\n  ))\n\n\n\n\nThese are the summarised data.\n\nThe DataThe Code\n\n\n\n\n\n\n\n\n\n\n\nRegion_type\nPlanning_Area\n\n\n\n\nCR\nBishan, Bukit Merah, Bukit Timah, Downtown Core, Geylang, Kallang, Marina East, Marina South, Marine Parade, Museum, Newton, Novena, Orchard, Outram, Queenstown, River Valley, Rochor, Singapore River, Southern Islands, Straits View, Tanglin, Toa Payoh\n\n\nER\nBedok, Changi, Changi Bay, Pasir Ris, Paya Lebar, Tampines\n\n\nNER\nAng Mo Kio, Hougang, North-Eastern Islands, Punggol, Seletar, Sengkang, Serangoon\n\n\nNR\nCentral Water Catchment, Lim Chu Kang, Mandai, Sembawang, Simpang, Sungei Kadut, Woodlands, Yishun\n\n\nWR\nBoon Lay, Bukit Batok, Bukit Panjang, Choa Chu Kang, Clementi, Jurong East, Jurong West, Pioneer, Tengah, Tuas, Western Islands, Western Water Catchment\n\n\n\n\n\n\n\npa_mapping&lt;- sg_demo_2024 %&gt;%\n  group_by(`Region_type`) %&gt;%\n  summarize(Planning_Area = paste(unique(`PA`), collapse = \", \"))\n\nkable(pa_mapping, title = \"Mapping of Planning Area to Region \")\n\n\n\n\n\n5.2.3 Discretization: Creation of new Age_Type\nThe ages were binned into Age_type based on Singapore’s Department of Statistics classification.\n\nThe Code\n\n\n\n# Encoding ages\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;% \n  mutate(Age_type = case_when(\n    Age %in% as.character(0:4) ~ \"0-4\",\n    Age %in% as.character(5:9) ~ \"5-9\",\n    Age %in% as.character(10:14) ~ \"10-14\",\n    Age %in% as.character(15:19) ~ \"15-19\",\n    Age %in% as.character(20:24) ~ \"20-24\",\n    Age %in% as.character(25:29) ~ \"25-29\",\n    Age %in% as.character(30:34) ~ \"30-34\",\n    Age %in% as.character(35:39) ~ \"35-39\",\n    Age %in% as.character(40:44) ~ \"40-44\",\n    Age %in% as.character(45:49) ~ \"45-49\",\n    Age %in% as.character(50:54) ~ \"50-54\",\n    Age %in% as.character(55:59) ~ \"55-59\",\n    Age %in% as.character(60:64) ~ \"60-64\",\n    Age %in% as.character(65:69) ~ \"65-69\",\n    Age %in% as.character(70:74) ~ \"70-74\",\n    Age %in% as.character(75:79) ~ \"75-79\",\n    Age %in% as.character(80:84) ~ \"80-84\",\n    Age %in% as.character(85:89) ~ \"85-89\",\n    Age == \"90_and_Over\" ~ \"90 & Over\",\n    TRUE ~ NA_character_\n  ))\n\n\n\n\n\n\n5.2.4 Discretization: Creation of new summarised_ages\nBased on Singapore Department of Statistics’ classification, elderly are persons aged 65 and older. Based on the Ministry of Manpower the working-age population comprises of persons aged 15 and over. Thus, the remaining younger population are classified as young here.\n\nThe Code\n\n\n\n# Encoding summarised_ages\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;% \n  mutate(summarised_ages = case_when(\n    Age %in% as.character(0:14) ~ \"young\",\n    Age %in% as.character(15:64) ~ \"working-age\",\n    Age %in% as.character(65:89) ~ \"eldery\",\n    Age == \"90_and_Over\" ~ \"eldery\",\n    TRUE ~ NA_character_\n  ))\n\n\n\n\n\n\n5.2.5 Discretization: Creation of new pop_by_gender_age dataframe and new total_pop variable\nThere is no need to keep Time, PA, SZ, and Age variables. This helps in data or dimension reduction and reduces computation power.\n\nThe Code\n\n\n\n# Using groupby() and summarise \npop_by_gender_age&lt;- sg_demo_2024 %&gt;%\n  group_by(Sex, Age_numerical, Age_type, Region_type)%&gt;%\n  summarize(total_pop = sum(Pop), .groups = \"drop\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preview-of-reduced-dataframe",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preview-of-reduced-dataframe",
    "title": "Take-home_Exercise 1",
    "section": "5.3 Preview of reduced dataframe",
    "text": "5.3 Preview of reduced dataframe\nDataframes pop_by_gender_age and the original sg_demo_2024 were used to plot graphs in Section 7 and 8.\n\n5.3.1 Composition of pop_by_gender_age dataframe\n\nglimpse(pop_by_gender_age)\n\nRows: 910\nColumns: 5\n$ Sex           &lt;chr&gt; \"Females\", \"Females\", \"Females\", \"Females\", \"Females\", \"…\n$ Age_numerical &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3,…\n$ Age_type      &lt;chr&gt; \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", …\n$ Region_type   &lt;chr&gt; \"CR\", \"ER\", \"NER\", \"NR\", \"WR\", \"CR\", \"ER\", \"NER\", \"NR\", …\n$ total_pop     &lt;dbl&gt; 3040, 2400, 3520, 2260, 3150, 3430, 2650, 3780, 2350, 33…\n\n\n\nThe dataframe has 5 columns and 910 rows. Three of the columns contains categorical data type and the other two are in double/real number data type.\nThe categorical attributes are: Region_type, Age_type, and Sex\nThe numerical attributes are: Age_numerical, and total_pop.\n\n\n\n5.3.2 Understanding the distribution of numerical values\nThe median age here is computed by it’s Age_numerical column and is not a representation of the entire population.\n\nThe DataThe Code\n\n\n\n\n\n\n\n\nAge_numerical\ntotal_pop\n\n\n\n\n\nMin. : 0\nMin. : 220\n\n\n\n1st Qu.:22\n1st Qu.:3340\n\n\n\nMedian :45\nMedian :4625\n\n\n\nMean :45\nMean :4608\n\n\n\n3rd Qu.:68\n3rd Qu.:6190\n\n\n\nMax. :90\nMax. :9100\n\n\n\n\n\n\n\nrealis_num2 &lt;- pop_by_gender_age[,c(\"Age_numerical\", \"total_pop\")]\n  \nkable(summary(realis_num2))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-of-region-by-different-population-age-groups",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-of-region-by-different-population-age-groups",
    "title": "Take-home_Exercise 1",
    "section": "6.1 Bar Chart of Region by Different Population Age Groups",
    "text": "6.1 Bar Chart of Region by Different Population Age Groups\nThe bar chart hows the percentage and absolute figures of the different age group of residents by region\n\nThe Code for Bar Chart on Percentage FiguresThe Code for Bar Chart on Absolute FiguresThe Combined Bar Charts\n\n\n\n# Using groupby() and summarise \npop_by_region&lt;- sg_demo_2024 %&gt;%\n  group_by(summarised_ages, Region_type) %&gt;%\n  summarize(pop_region = sum(Pop), .groups = \"drop\")\n\n# Calculate percentages by summarised_ages\npop_by_region_percent &lt;- pop_by_region %&gt;%\n  group_by(summarised_ages) %&gt;%\n  mutate(percent = pop_region / sum(pop_region)) %&gt;%\n  ungroup()\n\np1 &lt;- ggplot(pop_by_region_percent,\n             aes(x = reorder(Region_type, -pop_region), y = percent,\n                 fill = summarised_ages, # Keep fill for visual distinction\n                 text = paste(\"Age Group:\", summarised_ages, \"&lt;br&gt;\",\n                              \"Region:\", Region_type, \"&lt;br&gt;\",\n                              \"Percent:\", scales::percent(percent, accuracy = 0.1), \"&lt;br&gt;\",\n                              \"Population:\", scales::comma(pop_region)))) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),\n        axis.title.x = element_text(vjust = -1),\n        strip.text = element_text(size = 10),\n        panel.spacing.x = unit(1, \"lines\"),\n        legend.position = \"none\") + \n  labs(x = \"Region\",\n       y = \"Percent per age-group\",\n       title  = \"Population by Age-groups and Regions (Percentage)\") +\n  scale_y_continuous(labels = scales::percent) +\n  facet_wrap(vars(summarised_ages), nrow = 1, scales = \"free_x\") +\n  scale_fill_brewer(palette = \"Set3\") # Use a color palette for regions\n\n# Create an interactive plotly object with hover\nlibrary(plotly)\nggplotly(p1, tooltip = \"text\") %&gt;%\n  style(hoverlabel = list(bgcolor = \"blue\"))\n\n\n\n\npop_by_region &lt;- sg_demo_2024 %&gt;%\n  group_by(summarised_ages, Region_type) %&gt;%\n  summarize(pop_region = sum(Pop), .groups = \"drop\")\n\n# Plot the absolute population figures\np2 &lt;- ggplot(pop_by_region,\n             aes(x = reorder(Region_type, -pop_region), y = pop_region,\n                 fill = summarised_ages, # Fill by region for distinction\n                 text = paste(\"Age Group:\", summarised_ages, \"&lt;br&gt;\",\n                              \"Region:\", Region_type, \"&lt;br&gt;\",\n                              \"Population:\", scales::comma(pop_region)))) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),\n        axis.title.x = element_text(vjust = -1),\n        strip.text = element_text(size = 10),\n        panel.spacing.x = unit(1, \"lines\"),\n        legend.position = \"none\") +\n  labs(x = \"Region\",\n       y = \"Population\",\n       title  = \"Population by Age-groups and Regions (Absolute Figures)\",\n       fill = \"Region\") + # Update legend title\n  scale_y_continuous(labels = scales::comma) +\n  facet_wrap(vars(summarised_ages), nrow = 1, scales = \"free_x\") +\n  scale_fill_brewer(palette = \"Set3\") # Use a color palette for regions\n\n# Create an interactive plotly object with hover\nggplotly(p2, tooltip = \"text\") %&gt;%\n  style(hoverlabel = list(bgcolor = \"blue\"))\n\n\n\n\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\nThere are less residents in the East and North regions, relative to other other regions.\nMost of the population are in the working-age group due to the larger age range (15-64).\nAmong the elderly population, there are significantly more elderly in the central region, compared to other regions. There are less elderly in the northern region, relative to other regions.\nAmong the younger population, there is a younger population in the north eastern region relative to other regions.\nThe population in the working age group are close to evenly distributed in the 3 regions of North-Eastern, Central and Western Regions of Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#stacked-bar-chart-of-region-by-population-with-gender-as-hue",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#stacked-bar-chart-of-region-by-population-with-gender-as-hue",
    "title": "Take-home_Exercise 1",
    "section": "6.2 Stacked Bar chart of Region by Population (with gender as hue)",
    "text": "6.2 Stacked Bar chart of Region by Population (with gender as hue)\n\nThe Stacked Bar ChartThe Code for Stacked bar chart\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_by_region&lt;- sg_demo_2024 %&gt;%\n  group_by(Region_type,Sex) %&gt;%\n  summarize(pop_region = sum(Pop), .groups = \"drop\")\n\n# plot the distribution as percentages\np4&lt;-ggplot(pop_by_region, \n       aes(x = reorder(Region_type, -pop_region), y = pop_region/sum(pop_region),\n           fill=Sex,\n           text = paste(\"Population:\", pop_region,\n                        \"\\nPercent (%):\", round(100 *pop_region / sum(pop_region), digits = 2),\n                        \"\\nGender:\", Sex)))+ \n  geom_bar(stat = \"identity\", color = \"black\") +    \n  theme(plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\")) + \n  labs(x = \"Region\", \n       y = \"Percent\", \n       title  = \"Population of Residents by Region\") +\n  scale_y_continuous(labels = scales::percent)\nggplotly(p4, tooltip = \"text\")%&gt;%\n  style(\n    hoverlabel = list(bgcolor = \"blue\")\n  )\n\n\n\n\nThere is a rather even distribution of gender in each region.\nER and NR have lesser population compared to the other regions, as confirmed in section 6.1."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid",
    "title": "Take-home_Exercise 1",
    "section": "7.1 Population Pyramid",
    "text": "7.1 Population Pyramid\nInstead of the bar chart produced in the earlier univariate/ bivariate analysis, a population pyramid can be produced for clearer visualisation of Age and Gender Structure.\n\nStep 1: Preparatory work\n\nThe Code to create pyramid- run laterThe Code to calculate Total Population and Median AgeThe Code to create Age labels and its plotThe Code to create of new column Age_Type_Ordered\n\n\npop_by_gender_age &lt;-\n  pop_by_gender_age |&gt;\n  mutate(total_pop = if_else(Sex == \"Males\", total_pop, -total_pop))\n\n\nCheck the total population and median ages:\n\nThe total population is around 4,193,530.\nThe median age of the population is around 42 years.\n\n\n# Ensure total_pop is positive for this calculation\npop_for_median &lt;- pop_by_gender_age %&gt;%\n  mutate(abs_total_pop = abs(total_pop))\n\n# Calculate the cumulative population\npop_cumulative &lt;- pop_for_median %&gt;%\n  arrange(Age_numerical) %&gt;%\n  mutate(cumulative_pop = cumsum(abs_total_pop))\n\n# Find the total population\ntotal_population &lt;- sum(pop_cumulative$abs_total_pop)\nprint(paste(\"Total Population:\", total_population))\n\n[1] \"Total Population: 4193530\"\n\n# Determine the median population (half of the total)\nmedian_population_point &lt;- total_population / 2\n\n# Find the age at which the cumulative population crosses the median point\nmedian_age_population &lt;- pop_cumulative %&gt;%\n  filter(cumulative_pop &gt;= median_population_point) %&gt;%\n  slice_head(n = 1) %&gt;%\n  pull(Age_numerical)\n\nprint(paste(\"Median Age of the Population:\", median_age_population))\n\n[1] \"Median Age of the Population: 42\"\n\n\n\n\nAge labels were created for ordered age.\n\n# Creation of age labels\nage_labels &lt;-\n  tibble(\n    Age_type = c(\n      \"0-4\",\n      \"5-9\",\n      \"10-14\",\n      \"15-19\",\n      \"20-24\",\n      \"25-29\",\n      \"30-34\",\n      \"35-39\",\n      \"40-44\",\n      \"45-49\",\n      \"50-54\",\n      \"55-59\",\n      \"60-64\",\n      \"65-69\",\n      \"70-74\",\n      \"75-79\",\n      \"80-84\",\n      \"85-89\",\n      \"90 & Over\"\n    )\n  ) |&gt;\n  mutate(\n    Age_type = fct_inorder(Age_type)\n  )\n\n# age_labels plot only\nage_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text() +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=8,\n                                  face = \"bold\", color = \"black\"))\n\n\n\n\n\n\n\n\n\n\nTo ensure that the Age_type column in pop_by_gender_age is a factor with the levels taken directly from age_labels$Age_type, new column Age_Type_Ordered is created.\n\n# Creation of ordered factor\npop_by_gender_age &lt;- pop_by_gender_age %&gt;%\n  mutate(Age_Type_Ordered = factor(Age_type, levels = age_labels$Age_type))\nprint(levels(pop_by_gender_age$Age_Type_Ordered))\n\n [1] \"0-4\"       \"5-9\"       \"10-14\"     \"15-19\"     \"20-24\"     \"25-29\"    \n [7] \"30-34\"     \"35-39\"     \"40-44\"     \"45-49\"     \"50-54\"     \"55-59\"    \n[13] \"60-64\"     \"65-69\"     \"70-74\"     \"75-79\"     \"80-84\"     \"85-89\"    \n[19] \"90 & Over\"\n\n\n\n# Double checking factor for Age_type matches for pop_by_gender_age and age_labels\nunique_pop_age &lt;- unique(pop_by_gender_age$Age_type)\nprint(\"Unique values in pop_by_gender_age$Age_type:\")\n\n[1] \"Unique values in pop_by_gender_age$Age_type:\"\n\nprint(unique_pop_age)\n\n [1] \"0-4\"       \"5-9\"       \"10-14\"     \"15-19\"     \"20-24\"     \"25-29\"    \n [7] \"30-34\"     \"35-39\"     \"40-44\"     \"45-49\"     \"50-54\"     \"55-59\"    \n[13] \"60-64\"     \"65-69\"     \"70-74\"     \"75-79\"     \"80-84\"     \"85-89\"    \n[19] \"90 & Over\"\n\nunique_labels_age &lt;- unique(age_labels$Age_type)\nprint(\"Unique values in age_labels$Age_type:\")\n\n[1] \"Unique values in age_labels$Age_type:\"\n\nprint(unique_labels_age)\n\n [1] 0-4       5-9       10-14     15-19     20-24     25-29     30-34    \n [8] 35-39     40-44     45-49     50-54     55-59     60-64     65-69    \n[15] 70-74     75-79     80-84     85-89     90 & Over\n19 Levels: 0-4 5-9 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 ... 90 & Over\n\n\n\n\n\n\n\nStep 2: Plotting of Male + Female + Age Label plots\n\nGroup By For new dataframePlot of Females and MalesCode of the plot of Females and Males\n\n\n\n# Using groupby() and summarise \n#popfirt &lt;- pop_by_gender_age %&gt;%\n#  group_by(Sex, Age_Type_Ordered) %&gt;%\n#  summarize(total_pop = sum(total_pop), .groups = \"drop\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Create Pyramid\npop_by_gender_age &lt;-\n  pop_by_gender_age |&gt;\n  mutate(total_pop = if_else(Sex == \"Males\", total_pop, -total_pop))\n\n#one women plot\npopulation_pyramid_women &lt;-\n  pop_by_gender_age |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = total_pop,\n    y = Age_Type_Ordered  \n  )) +\n    geom_col(fill = \"#F8766D\",alpha = 0.8) +\n  annotate(\n  geom = \"label\",\n  x = -120000,\n  y = 19,\n  label = \"Females\",\n  fill = \"#F8766D\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n)+\n  scale_x_continuous(breaks = breaks_pretty(), \n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"))+\n  theme_void()+\n  theme(\n    axis.text.x = element_text(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n# one men plot\npopulation_pyramid_men &lt;-\n  pop_by_gender_age |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = total_pop,\n    y = Age_Type_Ordered \n  )) +\n  geom_col(fill = \"#00BFC4\",alpha = 0.8)+\n  annotate(\n  geom = \"label\",\n  x = 120000,\n  y = 19,\n  label = \"Males\",\n  fill = \"#00BFC4\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n) +\n  scale_x_continuous(breaks = breaks_pretty(), \n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"))+\n  theme_void()+\n  theme(\n    axis.text.x = element_text(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n# Plot age plot\nage_labels_plot &lt;-\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text() +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=10,\n                                  face = \"bold\", color = \"black\"))\n# Combine everything (age + tw0 gender plots)\npopulation_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men\n\n\n\n\n\nFinal Step: View the Population Pyramid Plot\nAfter layout adjustments, the population pyramid was plotted.\n\nPopulation Pyramid- Adjustments madeCode for adjustments\n\n\n\n\n\n\n\n\n\n\n\n\n\np6&lt;-population_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men +\n  plot_layout(\n    widths = c(4.3, 1, 4.3))+ # both sides are 4.3 times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Singapore Resident Population for 2024\", \n    subtitle=\"(Population median age = 42)\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(face = \"bold\", hjust = 0.20), \n                  plot.subtitle = element_text( hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"))\n)\nplot(p6)\n\ngrid.rect(\n  x = unit(0, \"npc\"),  \n  y = unit(1, \"npc\"),  \n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\nThe population pyramid visualises the population’s age and gender distribution. The population size is shown on the x-axis while the age-groups are represented on the middle y-axis. The population numbers are depicted within each age-group bar by gender on the left (Females) and right (Males). The bottom bar represents the youngest age group (0-4) and is incremental in age-group towards the top (90 & Over).\nIt is possible to visualise the regions within each age group as what Michal Palenik produced for three employment statuses. However, this method faces the issue of complexity and difficulty reading in our case due to having 5 regions, with the regions close in region size per age-group.\nSee an example below which visualises the complexity.\n\n\n7.1.1 Comparative Distribution and Structure of Age, Gender, and Population\n\nPopulation Pyramid with RegionCode for Population Pyramid with Region\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Order the data by Region_type within each Age and Gender group. \nsg_demo_2024_reshaped &lt;- sg_demo_2024 %&gt;%\n  arrange(Sex, Age_type, Region_type)\n\n# ordered factor\nsg_demo_2024_reshaped &lt;- sg_demo_2024_reshaped %&gt;%\n  mutate(Age_Type_Ordered2 = factor(Age_type, levels = age_labels$Age_type))\n\n# Create a basic bar chart for one gender\nbasic_plot &lt;-  ggplot(sg_demo_2024_reshaped, \n                      aes(x = Age_Type_Ordered2, \n                          y= ifelse(Sex=='Females', -Pop, Pop), \n                          fill = Region_type)) + \ngeom_bar(stat = \"identity\") \n\n# Create population pyramids for both genders and combine them\npopulation_pyramid &lt;- basic_plot +\n  coord_flip() +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Pastel2\") +\n  labs(\n    x = \"Age_type\",\n    y = \"Pop\",  \n    fill = \"Region_type\",  \n    title = \"Population Pyramid\")  +\n    scale_y_continuous(breaks = breaks_pretty(),\n                       labels = function(y) format(y, scientific = FALSE))+\n  geom_hline(yintercept = 0, color = \"blue\", linetype = \"dashed\", size = 0.5) + # Males and Females separation\n  annotate(geom = \"label\",x = 18, y = -100000,\n           label = \"Females\", fill = \"lightpink\",\n           color = \"black\",label.size = 0)+\n  annotate(geom = \"label\",x = 18, y = 100000,\n           label = \"Males\", fill = \"lightsteelblue\",\n           color = \"black\",label.size = 0)\nprint(population_pyramid) #  Display the plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#histogram",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#histogram",
    "title": "Take-home_Exercise 1",
    "section": "7.2 Histogram",
    "text": "7.2 Histogram\n\nA histogram or density plot is usually used to visualise distributions. However, density plots assumes that each row of data is an independent observation of that variable. In our case, the Pop column was a summation instead of a single observation.\nHere, distribution of Gender population by Age for Regions is visualised.\n\n\nThe HistogramThe Code for HistogramMultiple Histograms\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_by_age_sex_region&lt;- sg_demo_2024 %&gt;%\n  group_by(Age_numerical, Sex, Region_type) %&gt;%\n  summarize(pop_age = sum(Pop), .groups = \"drop\")\n\n# Sort ages\nsorted_ages2 &lt;- sort(unique(pop_by_age_sex_region$Age_numerical))\n\n# Plot the age distribution using a histogram\np7&lt;-ggplot(pop_by_age_sex_region, aes(x = Age_numerical, \n                                      y = pop_age, fill = Sex, \n                           text = paste(\"Age:\", Age_numerical, \"&lt;br&gt;\",\n                              \"Gender:\", Sex, \"&lt;br&gt;\",\n                              \"Population:\", scales::comma(pop_age)))) +\n  geom_bar(stat = \"identity\", color = \"black\", width = 1) +\n  scale_x_continuous(breaks = sorted_ages2,\n                     labels = sorted_ages2) +\n  labs(title = \"Gender population by Age for Regions\",\n       x = \"Age\",\n       y = \"Total Population\") +\n  scale_y_continuous(labels = scales::comma) +  \n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size=5, face = \"bold\"),\n        plot.title = element_text(hjust = 0.5, size = 11, face = \"bold\"),\n        axis.title.x = element_text(size = 8),\n        axis.title.y = element_text(size = 8),\n        axis.text.y = element_text(size = 8),\n        legend.title = element_text(size = 6),\n        legend.text = element_text(size = 6),\n        strip.text = element_text(size = 8))\n\np7\n\n\n\np7+ facet_wrap(vars(Region_type), nrow=5)\n\n\n\n\n\n\n\n\n\n\n\nThe histogram/ stacked bar chart shows the regional population distribution and regional gender distribution/ structure. It is harder to read and discarded."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#demographic-structures-and-distribution-of-singapore-in-2024",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#demographic-structures-and-distribution-of-singapore-in-2024",
    "title": "Take-home_Exercise 1",
    "section": "Demographic structures and distribution of Singapore in 2024",
    "text": "Demographic structures and distribution of Singapore in 2024"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-1",
    "title": "Take-home_Exercise 1",
    "section": "8.1 Population Pyramid",
    "text": "8.1 Population Pyramid\n\nPopulation PyramidThe Code for Population Pyramid\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npopfirt &lt;- pop_by_gender_age %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(total_pop = sum(total_pop), .groups = \"drop\")\n\n# --- Plot for Full  Region (popfirt) ---\n# Initial plot\npopfirt &lt;-\n  popfirt |&gt;\n  mutate(pop_sex  = if_else(Sex == \"Males\", total_pop, -total_pop))\n\n#one women plot\npopulation_pyramid_women &lt;-\n  popfirt |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex ,\n    y = Age_Type_Ordered  \n  )) +\n    geom_col(fill = \"#F8766D\",alpha = 0.8, width=0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex  / 1000,\n                             scientific = FALSE, digits = 3, trim = TRUE), \"K\")),\n    hjust = 0.7, nudge_x = -0.1 * max(abs(popfirt$pop_sex )),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n  geom = \"label\",\n  x = -120000,\n  y = 19,\n  label = \"Females\",\n  fill = \"#F8766D\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(-200000, 0, by = 50000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-200000,0) # Extend to the left for females\n  ) +\n  theme_void()+\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n# one men plot\npopulation_pyramid_men &lt;-\n  popfirt |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered \n  )) +\n  geom_col(fill = \"#00BFC4\",alpha = 0.8, width=0.7)+\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(popfirt, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.11 * max(abs(popfirt$pop_sex)),\n                     0.11 * max(abs(popfirt$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n  geom = \"label\",\n  x = 120000,\n  y = 19,\n  label = \"Males\",\n  fill = \"#00BFC4\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 200000, by = 50000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 200000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n  \n# Plot age plot\nage_labels_plot &lt;-\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size=3) +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=7,\n                                  face = \"bold\", color = \"black\"))\n\n\n# Combine everything (age + tw0 gender plots)\np_full_pyr &lt;-population_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men +\n  plot_layout(\n    widths = c(3, 1, 3)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Singapore Residents (June 2024)\",\n    subtitle = \"Population median age = 42\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 6),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_full_pyr)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\nWhat is a population pyramid?\nPopulation pyramids show the age and gender population distribution. It is useful for studying the effects of armed conflicts, mortality, birth policies and migration.\nWhat are the types of population pyramid?\nThere are three main types: Triangular shape (Expansive), Bell shape (Stationary), Bulb shape (Constrictive).\n\n\n Insights\n\n\nHow about Singapore’s population pyramid?\n\nSingapore has a Constrictive type in year 2024. It is wider in the middle due to larger representation by the middle-age and elderly, but fewer young people. This is corroborated with the median age at 42.\nThe top of the pyramid is wider than other two pyramid types, suggesting longer life expectancy.\nFemales appears to outlive males as they aged, as seen from the longer bars. This difference is more prevalent for older age-groups (75s to more than 90s).\nThis suggests an ageing population and low fertility."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#regional-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#regional-distribution",
    "title": "Take-home_Exercise 1",
    "section": "8.2 Regional Distribution",
    "text": "8.2 Regional Distribution\n\nRegional PopulationThe Code for Regional Population\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_by_sex&lt;- sg_demo_2024 %&gt;%\n  group_by(Sex, Region_type) %&gt;%\n  summarize(pop_sex = sum(Pop), .groups = \"drop\")\n\n# Compute the position of labels\ndata &lt;- pop_by_sex %&gt;%\n  group_by(Region_type) %&gt;% # Group by Region_type first\n  arrange(desc(Sex)) %&gt;%\n  mutate(prop = pop_sex / sum(pop_sex) * 100) %&gt;% # percentage within each region\n  mutate(ypos = cumsum(prop) - 0.5 * prop) #y-positions for labels within each region\n  \n# Calculate total population per region for ordering\nregion_order &lt;- data %&gt;%\n    group_by(Region_type) %&gt;%\n    summarise(total_region_pop = sum(abs(pop_sex))) %&gt;%\n    arrange(total_region_pop) %&gt;%\n    pull(Region_type)\n\n# Order the Region_type factor\ndata$Region_type &lt;- factor(data$Region_type, levels = region_order)\n\n# Plot\nggplot(data, aes(y = Region_type, fill = Sex)) +\n    geom_bar(data = subset(data, Sex == \"Males\"),\n             aes(x = pop_sex),\n             stat = \"identity\", fill = \"#00BFC4\",alpha = 0.8) +\n    geom_label(data = subset(data, Sex == \"Males\"),\n               aes(x = pop_sex,\n                   label = paste0(format(pop_sex, \n                                         scientific = FALSE, big.mark = \",\"))),\n                hjust = 0.5, nudge_x = -0.1 * max(abs(data$pop_sex)), \n               size = 3, color = \"black\", fill = \"grey90\") +\n    geom_bar(data = subset(data, Sex == \"Females\"),\n             aes(x = -pop_sex),\n             stat = \"identity\", fill = \"#F8766D\",alpha = 0.8) +\n    geom_label(data = subset(data, Sex == \"Females\"),\n               aes(x = -pop_sex,\n                   label = paste0(format(abs(pop_sex), \n                                         scientific = FALSE, big.mark = \",\"))),\n                hjust = 0.5, nudge_x = 0.1 * max(abs(data$pop_sex)), \n               size = 3, color = \"black\", fill = \"grey90\") +\nscale_x_continuous(\n    breaks = breaks_pretty(10),\n    labels = function(x) scales::comma(abs(x) / 1000, suffix = \"K\")\n)+\n    annotate(\n        geom = \"label\",\n        x = -max(abs(data$pop_sex)) * 1,\n        y = length(unique(data$Region_type)) + 0.8,\n        label = \"Females\",\n        fill = \"#F8766D\",\n        alpha = 0.8,\n        color = \"black\",\n        label.size = 0,\n        label.padding = unit(0.2, \"lines\"),\n        hjust=-0.8\n    )   +\n    annotate(\n        geom = \"label\",\n        x = max(abs(data$pop_sex)) * 1,\n        y = length(unique(data$Region_type)) + 0.8,\n        label = \"Males\",\n        fill = \"#00BFC4\",\n        alpha = 0.8,\n        color = \"black\",\n        label.size = 0,\n        label.padding = unit(0.2, \"lines\"),\n        hjust=2.5\n    ) +\n    scale_y_discrete(expand = expansion(mult = c(0, 0.3))) +\n    theme_bw() + # Using a clean theme\n    theme(axis.text = element_text(colour = \"black\"),\n          plot.title = element_text(lineheight = 0.8),\n          panel.grid.major.y = element_blank(), # Remove horizontal grid lines\n          panel.grid.minor = element_blank(),\n          legend.position = \"none\") +\n    labs(y = \"Region\", x = \"Population\", fill = \"Sex\")+\n  plot_annotation(title = \"Singapore Resident Population for June 2024, by Region\",\n                  subtitle=\"Relative to other regions, the North-East Region is the region with the most residents, followed closely by the Central Region.\",\n                  caption = \"NER: North-East Region; CR: Central Region; WR: West Region; ER: East Region; NR: North Region\n\n. \\n Data Source: Department of Statistics, Singapore | Designer: AT\",\n                  theme = theme(plot.title = element_text(face = \"bold\", hjust = 0.16), \n                  plot.subtitle = element_text(size=8, hjust = 0.6),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.caption=element_text(size=8)))\n\ngrid.rect(\n  x = unit(0, \"npc\"),  \n  y = unit(1, \"npc\"),  \n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n Insights\n\n\nWhat is the regional-gender population distribution?\n\nMost residents are clustered in NER, CR, and WR. A smaller segment in ER and NR.\nClosely even distribution of genders per region seen by colours and values.\n\n\n\nAbbreviations-&gt; NER: North-East Region; CR: Central Region; WR: West Region; ER: East Region; NR: North Region"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#region-age-gender-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#region-age-gender-distribution",
    "title": "Take-home_Exercise 1",
    "section": "8.3 Region-Age-Gender Distribution",
    "text": "8.3 Region-Age-Gender Distribution\n\nCode for the creation of age labelsCode for creation of blank canvasCode for the creation of each region’s dataframeNorth RegionEast RegionWest RegionCentral RegionNorth East RegionThe Final Combined Plot\n\n\n\n# Creation of age labels\nage_labels &lt;-\n  tibble(\n    Age_type = c(\n      \"0-4\",\n      \"5-9\",\n      \"10-14\",\n      \"15-19\",\n      \"20-24\",\n      \"25-29\",\n      \"30-34\",\n      \"35-39\",\n      \"40-44\",\n      \"45-49\",\n      \"50-54\",\n      \"55-59\",\n      \"60-64\",\n      \"65-69\",\n      \"70-74\",\n      \"75-79\",\n      \"80-84\",\n      \"85-89\",\n      \"90 & Over\"\n    )\n  ) |&gt;\n  mutate(\n    Age_type = fct_inorder(Age_type)\n  )\n\n\n\n\n# Create a blank plot with a blue background\np &lt;- ggplot() +\n  theme_void() +  # Clean\n  theme(plot.background = element_rect(fill = \"#C1D3E5\"),\n        ) # Set the background \n\n# Add text annotation\np &lt;- p +\n  annotate(\n    \"text\",\n    x = 0.5,  # x-coordinate of the text (normalized)\n    y = 0.7,  # y-coordinate of the text (normalized)\n    label = \"Age Pyramids of Resident Population \\n in Singapore Regions (June 2024)\",\n    color = \"black\",           # Color of the text\n    size = 8,                # Size of the text\n    fontface = \"bold\",         # Style of the text\n    hjust = 0.5,             # Horizontal justification (0.5 = center)\n    vjust = 1.3              # Vertical justification (0.5 = center)\n  )+\n    annotate(\n    \"text\",\n    x = 0.5,  # x-coordinate of the second text (normalized)\n    y = 0.4,  # y-coordinate of the second text (normalized)\n    label = \"(West, North, East, North-East, \\n and Central Region)\", \n    color = \"black\",           # Color of the second text\n    size = 6,                # Size of the second text\n    fontface = \"bold\",         # Style of the second text\n    hjust = 0.5,             # Horizontal justification (0.5 = center)\n    vjust = -1.9              # Vertical justification (0.5 = center)\n  )+\n  annotate(\n    \"text\",\n    x = 0.5,  # x-coordinate of the second text (normalized)\n    y = 0.3,  # y-coordinate of the second text (normalized)\n    label = \"Within regions, many residents are aged 25-69, 25-64, or 30-69\",\n    color = \"black\",           # Color of the second text\n    size = 5,                # Size of the second text\n    fontface = \"bold\",         # Style of the second text\n    hjust = 0.5,             # Horizontal justification (0.5 = center)\n    vjust = -1.2             # Vertical justification (0.5 = center)\n  )\n\n# Create the grid.rect grob\nrect_grob &lt;- grid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n# Add the grid.rect grob to the plot's gtable\np &lt;- p + \n  annotation_custom(\n    grob = rect_grob,\n    xmin = -Inf,  # Extend to the edges of the plot panel\n    xmax = Inf,\n    ymin = -Inf,\n    ymax = Inf\n  )\n\n# Print the plot\nplot(p)\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_ner &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"NER\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_er &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"ER\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_wr &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"WR\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_cr &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"CR\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_nr &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"NR\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n\n\n\n# Initial plot\npop_nr &lt;-\n  pop_nr |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\n# One women plot\npopulation_pyramid_women &lt;-\n  pop_nr |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\",alpha=0.8, width=0.7) +\n# Add Labelling  \n    geom_label(\n               aes(x = -pop_sex,\n                    label = paste0(format(pop_sex / 1000, \n                                          scientific = FALSE, digits = 2, trim = TRUE), \"K\")\n    ),\n                hjust = 0.8, nudge_x = -0.1 * max(abs(pop_nr$pop_sex)), \n               size = 2.6, color = \"black\", fill = \"grey90\") +\n# Annotations\n  annotate(\n    geom = \"label\",\n    x = -25000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha=0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  \n  theme_void()+\n  theme(\n    axis.text.x = element_text(size=8,margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n# One men plot\npopulation_pyramid_men &lt;-\n  pop_nr |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\",alpha=0.8, width=0.7)+\n  # Add Labelling  \n    geom_label(\n               aes(x = pop_sex,\n               label = paste0(format(pop_sex / 1000,\n                                      scientific = FALSE,\n                                      digits = 2,\n                                      trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_nr, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.15 * max(abs(pop_nr$pop_sex)), # those less than 1K \n                     0.15 * max(abs(pop_nr$pop_sex))), # others\n               size = 2.6, color = \"black\", fill = \"grey90\") +\n  #Annotations\n  annotate(\n    geom = \"label\",\n    x = 25000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    alpha=0.8,\n    color = \"black\",\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\nscale_y_discrete()+\n  theme_void()+\n  theme(\n    axis.text.x = element_text(size=8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n    )\n  \n\n# Plot age plot\nage_labels_plot &lt;-\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size=3) +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=6,\n                                  face = \"bold\", color = \"black\"))\n\n\np15&lt;-population_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men +\n  plot_layout(\n    widths = c(10, 1.8, 10))+ # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in North Region, 2024\", \n    subtitle=\"Within the region, large number of these residents are aged 25-64\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size=12, face = \"bold\", hjust = 0.1), \n                  plot.caption=element_text(size=5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p15)\n\ngrid.rect(\n  x = unit(0, \"npc\"),  \n  y = unit(1, \"npc\"),  \n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(grid)\n\n# --- Plot for East Region (pop_er) ---\n# Initial plot\npop_er &lt;-\n  pop_er |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\npopulation_pyramid_women_er &lt;-\n  pop_er |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.7, nudge_x = -0.1 * max(abs(pop_er$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -25000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_er &lt;-\n  pop_er |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_er, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.13 * max(abs(pop_er$pop_sex)),\n                     0.13 * max(abs(pop_er$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 25000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_er &lt;- population_pyramid_women_er +\n  age_labels_plot +\n  population_pyramid_men_er +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in East Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 25-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_er)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot for West Region (pop_wr) ---\n# Initial plot\npop_wr &lt;-\n  pop_wr |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\npopulation_pyramid_women_wr &lt;-\n  pop_wr |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.5, nudge_x = -0.1 * max(abs(pop_wr$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -25000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_wr &lt;-\n  pop_wr |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_wr, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.11 * max(abs(pop_wr$pop_sex)),\n                     0.11 * max(abs(pop_wr$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 25000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_wr &lt;- population_pyramid_women_wr +\n  age_labels_plot +\n  population_pyramid_men_wr +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in West Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 25-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_wr)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot for Central Region (pop_cr) ---\n# Initial plot\npop_cr &lt;-\n  pop_cr |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\n\npopulation_pyramid_women_cr &lt;-\n  pop_cr |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.5, nudge_x = -0.1 * max(abs(pop_cr$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -30000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = breaks_pretty(4),\n                     labels = function(x) scales::comma(abs(x) / 1000, suffix = \"K\"),\n                     limits = c(-max(abs(pop_cr$pop_sex)) * 1.3, 0)) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_cr &lt;-\n  pop_cr |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_cr, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.09 * max(abs(pop_cr$pop_sex)),\n                     0.09 * max(abs(pop_cr$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 30000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = breaks_pretty(4),\n                     labels = function(x) scales::comma(abs(x) / 1000, suffix = \"K\"),\n                     limits = c(0, max(abs(pop_cr$pop_sex)) * 1.3)) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_cr &lt;- population_pyramid_women_cr +\n  age_labels_plot +\n  population_pyramid_men_cr +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in Central Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 30-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_cr)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot for North East Region (pop_ner) ---\n# Initial plot\npop_ner &lt;-\n  pop_ner |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\n\npopulation_pyramid_women_ner &lt;-\n  pop_ner |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.5, nudge_x = -0.1 * max(abs(pop_ner$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -30000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )  +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_ner &lt;-\n  pop_ner |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_ner, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.08 * max(abs(pop_ner$pop_sex)),\n                     0.08 * max(abs(pop_ner$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 30000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_ner &lt;- population_pyramid_women_ner +\n  age_labels_plot +\n  population_pyramid_men_ner +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in North-East Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 30-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_ner)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# 2. Save the individual plots as image files\nggsave(\"p_title.png\", p, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_nr.png\", p15, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_er.png\", p_er, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_wr.png\", p_wr, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_ner.png\", p_ner, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_cr.png\", p_cr, width = 8, height = 6, units = \"in\", dpi = 300)\n\n# 3. Read the image files using magick\nimage_p_title &lt;- image_read(\"p_title.png\")\nimage_nr &lt;- image_read(\"p_nr.png\")\nimage_er &lt;- image_read(\"p_er.png\")\nimage_wr &lt;- image_read(\"p_wr.png\")\nimage_ner &lt;- image_read(\"p_ner.png\")\nimage_cr &lt;- image_read(\"p_cr.png\")\n\n# 4. Scale by width\ntarget_width = 550\nimage_p_title &lt;- image_scale(image_p_title, geometry = paste0(target_width, \"x\"))\nimage_nr &lt;- image_scale(image_nr, geometry = paste0(target_width, \"x\"))\nimage_er &lt;- image_scale(image_er, geometry = paste0(target_width, \"x\"))\nimage_wr &lt;- image_scale(image_wr, geometry = paste0(target_width, \"x\"))\nimage_ner &lt;- image_scale(image_ner, geometry = paste0(target_width, \"x\"))\nimage_cr &lt;- image_scale(image_cr, geometry = paste0(target_width, \"x\"))\n\n# 5. Create the rows\nrow1 &lt;- image_append(c(image_p_title, image_wr), stack = FALSE)\nrow2 &lt;- image_append(c(image_nr, image_er), stack = FALSE)\nrow3 &lt;- image_append(c(image_ner, image_cr), stack = FALSE)\n\n# 6. Stack the rows vertically\ncombined_image &lt;- image_append(c(row1, row2, row3), stack = TRUE)\n\n# 7. Save the combined image\nimage_write(combined_image, \"combined_pyramids_2x3.png\")\n\n# 8. Display the combined image in R\nprint(combined_image)\n\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n1 PNG     1100   1239 sRGB       TRUE         0 118x118\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Insights\n\n\nGender, Age and Regional Distributions\n\nWider distribution suggests greater diversity in the population per gender/ region:\n\nFemales have significantly wider distributions than Males for NER, CR, WR.\nRegions NER, CR, WR have wider distributions than ER and NR.\n\nAcross ages, wider gap between both genders’ population count observed for NER, CR, and WR, compared to ER and NR.\nRising numbers from age 0- 35, plateauing around age 35- 60, then dips.\nAround the ages of 0- 30, the population values between genders are close.\nA large population around age 30- 69 suggests an older population.\nAfter age 75, a wider population gap is observed between the higher females compared to males. This is stark for “over-90-years” (especially for CR), suggesting longevity for older females.\nDistribution shape similar within (NER and CR), and (NR, ER, WR)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "title": "Take-home_Exercise 1",
    "section": "9.1 Summary",
    "text": "9.1 Summary\nBased on the EDA above, we can conclude the following about the demographic distribution and structure of Singapore in 2024:\n\nAge and Gender Distribution: The population pyramid displays age-group variation in population. There is an ageing population with residents at a median age of 42. There are lesser younger and elderly from low birth rates and decline due to old-age mortality. There were increasingly more Females compared to Males as the age-group increases, suggesting Females outliving Males which corroborates with general biological and behavioural reasons.\nAge and Gender Distribution, for regions: There is a rather even distribution of genders per region. Also, most residents are clustered in NER, CR and WR. Across different ages, a wider gap between the population count for both genders was observed for NER, CR, and WR as compared to ER and NR. Distribution shape similar within (NER and CR), and (NR, ER, WR)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#future-research",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#future-research",
    "title": "Take-home_Exercise 1",
    "section": "9.2 Future Research",
    "text": "9.2 Future Research\n\nFurther research can be done on the regions where the labour force (age 15 and over) reside in. This might be useful for urban planning of offices.\nWith more data, labour force participation rate per region can be obtained by zooming into the working age groups (15-24, 25-54, 55-64, 65 and over)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task-1",
    "title": "Take-home_Exercise 1",
    "section": "10.1 Background and Task",
    "text": "10.1 Background and Task\nIn Phase 2 of the take home exercise, one submission by a fellow classmate is selected. Three good design principles and three areas for further improvement are provided. The makeover version of the data visualisation is prepared based on the suggestions from the quadrants of achieving both clarity and aesthetics, the components of a graph, having a well-worded title and the right visualisation.\n\nClarity or Aesthetics?Components of a GraphWell-worded titleChoosing the right visualisation\n\n\nThese are what the 4 quadrants measure:\n\nQuadrant 1: Beautiful and Clear\nQuadrant 2: Clear and Ugly\nQuadrant 3: Ugly and Confusing\nQuadrant 4: Beautiful and Confusing\n\n\n\n\nThese are the different components of a graph pointed out by the blue annotations.\n\n\n\nThere is a title in bold followed by subtitles. They provide the background to the chart and assist to tell a data story. There is also a caption to cite the data source.\n\n\n\nHere, the task was to create at most three graphs to display the demographic structures and distributions of a country. The designer may like to look into chart types such as histograms, population pyramids, and boxplots."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#selected-graph-and-feedback",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#selected-graph-and-feedback",
    "title": "Take-home_Exercise 1",
    "section": "10.2 Selected Graph and Feedback",
    "text": "10.2 Selected Graph and Feedback\n\nClick here for the link to the selected graph\n\n\n Constructive Feedback\n\n\n3 Good Design Principles:\nCurrently the selected graph is both beautiful (aesthetic) and clear (clarity) in Quadrant 1.\n\nBeautiful: Overall, the font and palette throughout the chart is easy on the eyes for visual perception. This is done by the designer’s choice of contrasting colours between Males (blue) and Females (red). The colours for both genders also contrast well against the white background colour.\nClear: The targeted audience of the media may not have a statistical background. Thus the population pyramid provides clear graphics, which may be the right choice of visualisation for population distribution intended for the layman. This was also the choice of graph provided by the Department of Statistics Singapore in their Age Pyramid of Resident Population. It can be seen that there were deliberations made by the designer of the selected graph through the clever use of derived values such as totals and percentages to reveal more interesting patterns than values at granular levels. In this case, the designer self-initiated to derive categorical bins of the age groups using total counts and percentages of population for different genders. The population pyramid may then be replicated into regions. Depending on the problem statement, these may provide sufficient levels of analysis for broader information, without drilling down to introduce complexity. This communicates to a wider audience at higher levels compared to navigating selected or numerous areas.\nBeautiful: The soft gridlines and elements are well spaced, and do not distract. The Y-axis follows the conventional pyramid shape of younger to older ages as it rises up the pyramid. This is as the population pyramid derived its name from having a heavy base from a growing population (more babies born than mortality), leading to an upright pyramid or triangular shape.\n\n3 Suggested Areas for Future Improvements:\nMinor adjustments and suggestions to move higher up Quadrant 1.\n\nClear: Further well-worded subtitle, annotations and coloured labels to provide details or tell the data story clearer.\nClear: Caption on data source for credibility and/or credits to the designer may be added.\nClear: Y-Axis may be further improved to expand the age-groups to match common 5-year age-groups standards and Singapore’s census data. The breakdown provides clear details of subtle shifts in trends and patterns of the population structure."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#makeover-of-the-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#makeover-of-the-graph",
    "title": "Take-home_Exercise 1",
    "section": "10.3 Makeover of the Graph",
    "text": "10.3 Makeover of the Graph\nThe makeover attempts to implement the earlier 3 suggested areas which are pointed out by the arrows and corresponding numbers.\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\n\n#--------- Age Groups ----------------\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;%\n  mutate(\n    # Convert age to numeric, handle \"90_and_Over\"\n    Age_num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ suppressWarnings(as.numeric(Age))  # Avoid warnings from \"90_and_Over\"\n    ),\n    \n    # Group into age bands\n    Age_Group = case_when(\n      Age_num &gt;= 0  & Age_num &lt;= 4      ~ \"0-4\",\n      Age_num &gt;= 5  & Age_num &lt;= 9      ~ \"5-9\",\n      Age_num &gt;= 10 & Age_num &lt;= 14     ~ \"10-14\",\n      Age_num &gt;= 15 & Age_num &lt;= 19     ~ \"15-19\",\n      Age_num &gt;= 20 & Age_num &lt;= 24     ~ \"20-24\",\n      Age_num &gt;= 25 & Age_num &lt;= 29     ~ \"25-29\",\n      Age_num &gt;= 30 & Age_num &lt;= 34     ~ \"30-34\",\n      Age_num &gt;= 35 & Age_num &lt;= 39     ~ \"35-39\",\n      Age_num &gt;= 40 & Age_num &lt;= 44     ~ \"40-44\",\n      Age_num &gt;= 45 & Age_num &lt;= 49     ~ \"45-49\",\n      Age_num &gt;= 50 & Age_num &lt;= 54     ~ \"50-54\",\n      Age_num &gt;= 55 & Age_num &lt;= 59     ~ \"55-59\",\n      Age_num &gt;= 60 & Age_num &lt;= 64     ~ \"60-64\",\n      Age_num &gt;= 65 & Age_num &lt;= 69     ~ \"65-69\",\n      Age_num &gt;= 70 & Age_num &lt;= 74     ~ \"70-74\",\n      Age_num &gt;= 75 & Age_num &lt;= 79     ~ \"75-79\",\n      Age_num &gt;= 80 & Age_num &lt;= 84     ~ \"80-84\",\n      Age_num &gt;= 85 & Age_num &lt;= 89     ~ \"85-89\",\n      Age_num &gt;= 90                ~ \"90+\",\n      TRUE                         ~ NA_character_\n    )\n  )\n\n#------------------Pop Pyramid--------------------\n# Summarise and compute plot values\npop_pyramid &lt;- sg_demo_2024 %&gt;%\n  group_by(Age_Group, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(Sex) %&gt;%\n  mutate(Percent = Pop / sum(Pop) * 100) %&gt;%\n  ungroup()\n\n# Order Age_group for proper vertical alignment\nage_levels &lt;- c(\"0-4\",\n                \"5-9\",\n                \"10-14\",\n                \"15-19\",\n                \"20-24\",\n                \"25-29\",\n                \"30-34\",\n                \"35-39\",\n                \"40-44\",\n                \"45-49\",\n                \"50-54\",\n                \"55-59\",\n                \"60-64\",\n                \"65-69\",\n                \"70-74\",\n                \"75-79\",\n                \"80-84\",\n                \"85-89\", \n                \"90+\")\npop_pyramid$Age_Group &lt;- factor(pop_pyramid$Age_Group, levels = age_levels)\n\n# Flip male values to negative\npop_pyramid &lt;- pop_pyramid %&gt;%\n  mutate(Pop_plot = ifelse(Sex == \"Males\", -Pop, Pop),\n         Label = paste0(comma(abs(Pop)), \"  (\", round(abs(Percent), 1), \"%)\"))\n\n# Plot\nggplot(pop_pyramid, aes(x = Age_Group, y = Pop_plot, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8, position = \"identity\") +\n  coord_flip() +\n  geom_text(aes(label = Label),\n            position = position_nudge(y = ifelse(pop_pyramid$Sex == \"Males\", -50000, 10000)),\n            hjust = ifelse(pop_pyramid$Sex == \"Males\", 0, 0.1),\n            size = 1.8, color = 'black') +\n  scale_y_continuous(labels = function(x) comma(abs(x)), expand = expansion(mult = c(0.1, 0.1))) +\n  scale_fill_manual(values = c(\"Males\" = \"#619CFF80\", \"Females\" = \"#F8766D80\")) +\n  labs(title = \"Singapore Population between Genders for Age Groups (2024)\",\n       subtitle = \"Ageing population with a median age at 42\",\n       x = \"Age Group\", \n       y = \"Population Count\") +\n  annotate(\n    geom = \"label\",\n    x = 18,\n    y = 120000,\n    label = \"Females\",\n    fill = \"#F8766D80\",\n    color = \"black\",\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\"),\n    size=3\n  )   +\n  annotate(\n    geom = \"label\",\n    x = 18,\n    y = -115000,\n    label = \"Males\",\n    fill = \"#619CFF80\",\n    color = \"black\",\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\"),\n    size=3\n  )   +  \n  theme_minimal()+\n    labs(caption = \"Data Source: Department of Statistics, Singapore | Designer: XYZ\")+\n    theme(\n    plot.margin = margin(10, 20, 20, 20),  # top, right, bottom, left\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 8),\n    axis.text.y = element_text(size = 8),\n    axis.title.x = element_text(size = 10),\n    axis.title.y = element_text(size = 10),\n    plot.title = element_text(size = 12, face='bold'),\n    plot.subtitle = element_text(size = 10, hjust=0),\n    plot.caption= element_text(size = 6)\n    )+ \n#-------------------------Labelling------------------------------\n# Curve 1\n  geom_curve(\n  aes(x = 17.5, y = -200000, xend = 19, yend = -200000),\n  arrow = arrow(\n    length = unit(0.03, \"npc\"), \n    type=\"closed\" \n  ),\n  colour = \"navyblue\",\n  size = 0.8,\n  angle = 180)+ \n    # Curve 2\n  geom_curve(\n  aes(x = 16, y = -155000, xend = 17, yend = -130000),\n  arrow = arrow(\n    length = unit(0.03, \"npc\"), \n    type=\"closed\" \n  ),\n  colour = \"navyblue\",\n  size = 0.8,\n  angle = 180)+ \n      # Text 1\n  annotate(\n    \"text\",\n    x = 16,         # Same x-coordinate as the arrow's start\n    y = -150000,    # Same y-coordinate as the arrow's start\n    label = \"(1) Edited Title, \\n Added Subtitle\\nand Gender labels\", # The text added\n    hjust = 1.1,      # Adjust horizontal alignment to position the text relative to the point\n    vjust = 0.5,      # Adjust vertical alignment\n    size = 3,\n    colour=\"navyblue\")+ \n  # Curve 3\n  geom_curve(\n  aes(x = 3.5, y =-180000, xend = 5.5, yend = -200000),\n  arrow = arrow(\n    length = unit(0.03, \"npc\"), \n    type=\"closed\" \n  ),\n  colour = \"navyblue\",\n  size = 0.8,\n  angle = 90)+ \n   # Text 3\n  annotate(\n    \"text\",\n    x = 1.5,         # Same x-coordinate as the arrow's start\n    y = -170000,    # Same y-coordinate as the arrow's start\n    label = \"(3) Expanded\\nY-axis\", # The text added\n    hjust = 1.1,      # Adjust horizontal alignment to position the text relative to the point\n    vjust = 0.5,      # Adjust vertical alignment\n    size = 3,\n    colour=\"navyblue\")+ \n  # Curve 4\n  geom_curve(\n  aes(x = 2, y = 180000, xend = 0.1, yend = 160000),\n  arrow = arrow(\n    length = unit(0.03, \"npc\"), \n    type=\"closed\" \n  ),\n  colour = \"navyblue\",\n  size = 0.8,\n  angle = 90)+\n     # Text 4\n  annotate(\n    \"text\",\n    x = 3.1,         # Same x-coordinate as the arrow's start\n    y = 220000,    # Same y-coordinate as the arrow's start\n    label = \"(2) Added\\ncaption\", # The text added\n    hjust = 1.1,      # Adjust horizontal alignment to position the text relative to the point\n    vjust = 0.5,      # Adjust vertical alignment\n    size = 3,\n    colour=\"navyblue\")"
  }
]