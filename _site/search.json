[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Exercise 1",
    "section": "",
    "text": "Aero Media is a local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024. As a graphical editor of the media company (Aero Media), there is a need to prepare at most three non-interactive data visualisation for the daily article. This article aims to explore the distribution and structure of the population age, gender, and regions. Please refer to Section 2 to 7 for the rationalisation and preparation, and Section 8 for this Article. Please refer to Section 11 for the comments and edits for Phase 2 of the task.\n\n\n\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shares by Department of Statistics, Singapore (DOS) is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task",
    "title": "Take-home_Exercise 1",
    "section": "",
    "text": "Aero Media is a local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024. As a graphical editor of the media company (Aero Media), there is a need to prepare at most three non-interactive data visualisation for the daily article. This article aims to explore the distribution and structure of the population age, gender, and regions. Please refer to Section 2 to 7 for the rationalisation and preparation, and Section 8 for this Article. Please refer to Section 11 for the comments and edits for Phase 2 of the task."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home_Exercise 1",
    "section": "",
    "text": "To accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shares by Department of Statistics, Singapore (DOS) is used."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#viewing-data-rows-and-columns-using-glimpse",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#viewing-data-rows-and-columns-using-glimpse",
    "title": "Take-home_Exercise 1",
    "section": "4.1 Viewing Data Rows and Columns using glimpse",
    "text": "4.1 Viewing Data Rows and Columns using glimpse\n\nglimpse(sg_demo_2024)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\nThe data contains data on Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024.\nThe dataframe has 6 columns and 60,424 rows. Four of the columns contains categorical data type and the other two are in double/real number data type.\n\nThe categorical attributes are: PA, SZ, Age and Sex\nThe numerical attributes are: Pop, and Time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-dictionary-for-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-dictionary-for-variables",
    "title": "Take-home_Exercise 1",
    "section": "4.2 Data Dictionary for Variables",
    "text": "4.2 Data Dictionary for Variables\n\n\n\n\n\n\n\n\n\nCategory\nColumn Headers\nType\nDescription\n\n\n\n\nPlanning Area\nPA\nCHAR\n55 area names\n\n\nSubzone\nSZ\nCHAR\n332 area names\n\n\nSingle Year of Age\nAge\nNUM\n0 to 90_and_over (in increments of 1)\n\n\nSex\nSex\nCHAR\nMales; Females\n\n\nResident Count\nPop\nNUM\n0 to 1180 (in multiples of 10, with occasional breaks)\n\n\nTime/Period\nTime\nNUM\n2024\n\n\n\n\n\n\n\n\n\nNote.\n\n\n\n\nFor June 2024, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onward exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10.\nThe data may not add up due to rounding.\nData was generated on 24/9/2024.\n\n\n\n\n4.2.1 Categorical values\nThese are the categorical values within PA and SZ.\n\nThe DataThe Code\n\n\n\n\n\nUnique Categories in Dataset\n\n\n\n\n\n\n\nValues\n\n\n\n\nPA\nAng Mo Kio, Bedok, Bishan, Boon Lay, Bukit Batok, Bukit Merah, Bukit Panjang, Bukit Timah, Central Water Catchment, Changi, Changi Bay, Choa Chu Kang, Clementi, Downtown Core, Geylang, Hougang, Jurong East, Jurong West, Kallang, Lim Chu Kang, Mandai, Marina East, Marina South, Marine Parade, Museum, Newton, North-Eastern Islands, Novena, Orchard, Outram, Pasir Ris, Paya Lebar, Pioneer, Punggol, Queenstown, River Valley, Rochor, Seletar, Sembawang, Sengkang, Serangoon, Simpang, Singapore River, Southern Islands, Straits View, Sungei Kadut, Tampines, Tanglin, Tengah, Toa Payoh, Tuas, Western Islands, Western Water Catchment, Woodlands, Yishun\n\n\nSZ\nAng Mo Kio Town Centre, Cheng San, Chong Boon, Kebun Bahru, Sembawang Hills, Shangri-La, Tagore, Townsville, Yio Chu Kang, Yio Chu Kang East, Yio Chu Kang North, Yio Chu Kang West, Bayshore, Bedok North, Bedok Reservoir, Bedok South, Frankel, Kaki Bukit, Kembangan, Siglap, Bishan East, Marymount, Upper Thomson, Liu Fang, Samulun, Shipyard, Tukang, Brickworks, Bukit Batok Central, Bukit Batok East, Bukit Batok South, Bukit Batok West, Gombak, Guilin, Hillview, Hong Kah North, Alexandra Hill, Alexandra North, Bukit Ho Swee, Bukit Merah, City Terminals, Depot Road, Everton Park, Henderson Hill, Kampong Tiong Bahru, Maritime Square, Redhill, Singapore General Hospital, Telok Blangah Drive, Telok Blangah Rise, Telok Blangah Way, Tiong Bahru, Tiong Bahru Station, Bangkit, Dairy Farm, Fajar, Jelebu, Nature Reserve, Saujana, Senja, Anak Bukit, Coronation Road, Farrer Court, Hillcrest, Holland Road, Leedon Park, Swiss Club, Ulu Pandan, Central Water Catchment, Changi Airport, Changi Point, Changi West, Changi Bay, Choa Chu Kang Central, Choa Chu Kang North, Keat Hong, Peng Siang, Teck Whye, Yew Tee, Clementi Central, Clementi North, Clementi West, Clementi Woods, Faber, Pandan, Sunset Way, Toh Tuck, West Coast, Anson, Bayfront Subzone, Bugis, Cecil, Central Subzone, City Hall, Clifford Pier, Marina Centre, Maxwell, Nicoll, Phillip, Raffles Place, Tanjong Pagar, Aljunied, Geylang East, Kallang Way, Kampong Ubi, Macpherson, Defu Industrial Park, Hougang Central, Hougang East, Hougang West, Kangkar, Kovan, Lorong Ah Soo, Lorong Halus, Tai Seng, Trafalgar, International Business Park, Jurong Gateway, Jurong Port, Jurong River, Lakeside (Business), Lakeside (Leisure), Penjuru Crescent, Teban Gardens, Toh Guan, Yuhua East, Yuhua West, Boon Lay Place, Chin Bee, Hong Kah, Jurong West Central, Kian Teck, Safti, Taman Jurong, Wenya, Yunnan, Bendemeer, Boon Keng, Crawford, Geylang Bahru, Kallang Bahru, Kampong Bugis, Kampong Java, Lavender, Tanjong Rhu, Lim Chu Kang, Mandai East, Mandai Estate, Mandai West, Marina East, Marina South, East Coast, Katong, Marina East (Mp), Marine Parade, Mountbatten, Bras Basah, Dhoby Ghaut, Fort Canning, Cairnhill, Goodwood Park, Istana Negara, Monk’s Hill, Newton Circus, Orange Grove, North-Eastern Islands, Balestier, Dunearn, Malcolm, Moulmein, Mount Pleasant, Boulevard, Somerset, Tanglin, China Square, Chinatown, Pearl’s Hill, People’s Park, Flora Drive, Loyang East, Loyang West, Pasir Ris Central, Pasir Ris Drive, Pasir Ris Park, Pasir Ris Wafer Fab Park, Pasir Ris West, Airport Road, Paya Lebar East, Paya Lebar North, Paya Lebar West, Plab, Benoi Sector, Gul Basin, Gul Circle, Joo Koon, Pioneer Sector, Coney Island, Matilda, Northshore, Punggol Canal, Punggol Field, Punggol Town Centre, Waterway East, Commonwealth, Dover, Ghim Moh, Holland Drive, Kent Ridge, Margaret Drive, Mei Chin, National University Of S’pore, One North, Pasir Panjang 1, Pasir Panjang 2, Port, Queensway, Singapore Polytechnic, Tanglin Halt, Institution Hill, Leonie Hill, One Tree Hill, Oxley, Paterson, Bencoolen, Farrer Park, Kampong Glam, Little India, Mackenzie, Mount Emily, Rochor Canal, Selegie, Sungei Road, Victoria, Pulau Punggol Barat, Pulau Punggol Timor, Seletar, Seletar Aerospace Park, Admiralty, Sembawang Central, Sembawang East, Sembawang North, Sembawang Springs, Sembawang Straits, Senoko North, Senoko South, The Wharves, Anchorvale, Compassvale, Fernvale, Lorong Halus North, Rivervale, Sengkang Town Centre, Sengkang West, Lorong Chuan, Seletar Hills, Serangoon Central, Serangoon Garden, Serangoon North, Serangoon North Ind Estate, Upper Paya Lebar, Pulau Seletar, Simpang North, Simpang South, Tanjong Irau, Boat Quay, Clarke Quay, Robertson Quay, Sentosa, Southern Group, Straits View, Gali Batu, Kranji, Pang Sua, Reservoir View, Turf Club, Simei, Tampines East, Tampines North, Tampines West, Xilin, Chatsworth, Nassim, Ridout, Tyersall, Brickland, Forest Hill, Garden, Park, Plantation, Tengah Industrial Estate, Bidadari, Boon Teck, Braddell, Joo Seng, Kim Keat, Lorong 8 Toa Payoh, Pei Chun, Potong Pasir, Sennett, Toa Payoh Central, Toa Payoh West, Woodleigh, Tengeh, Tuas Bay, Tuas North, Tuas Promenade, Tuas View, Tuas View Extension, Jurong Island And Bukom, Semakau, Sudong, Bahar, Cleantech, Murai, Greenwood Park, Midview, North Coast, Senoko West, Woodgrove, Woodlands East, Woodlands Regional Centre, Woodlands South, Woodlands West, Khatib, Lower Seletar, Nee Soon, Northland, Springleaf, Yishun Central, Yishun East, Yishun South, Yishun West\n\n\nAge\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90_and_Over\n\n\nSex\nMales, Females\n\n\n\n\n\n\n\n# Understanding the unique data values in each column that is categorical.\n\nget_unique_val &lt;- function(df){lapply(df, unique)}\nsg_demo_2024_cat &lt;- sg_demo_2024[,c(\"PA\", \"SZ\", \"Age\", \"Sex\")]\nunique_val &lt;- get_unique_val(sg_demo_2024_cat)\nuni_val_df &lt;- data.frame(\n  Values = sapply(unique_val, paste, collapse = \", \")\n)\n\nkable(uni_val_df, caption = \"Unique Categories in Dataset\", row.names = NA, label = NULL)\n\n\n\n\n\n4.2.2 Statistics of Numerical Variables\nNotice that:\n\nAge variable is not a numerical value but a categorical value.\nThe statistics for Pop variable are not very useful as the values are a summation for each combination of variables in a particular record.\nIn Time variable, there is only one year of data at 2024.\n\n\nThe DataThe Code\n\n\n\n\n\n\n\n\nPop\nTime\n\n\n\n\n\nMin. : 0.0\nMin. :2024\n\n\n\n1st Qu.: 0.0\n1st Qu.:2024\n\n\n\nMedian : 20.0\nMedian :2024\n\n\n\nMean : 69.4\nMean :2024\n\n\n\n3rd Qu.: 90.0\n3rd Qu.:2024\n\n\n\nMax. :1180.0\nMax. :2024\n\n\n\n\n\n\n\n# Understanding the distribution of numerical values \nrealis_num &lt;- sg_demo_2024[,c(\"Pop\", \"Time\")]\n  \nkable(summary(realis_num))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#flowchart-of-data-and-graphs",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#flowchart-of-data-and-graphs",
    "title": "Take-home_Exercise 1",
    "section": "4.3 Flowchart of data and graphs",
    "text": "4.3 Flowchart of data and graphs\nThe flowchart displays the course of action to be undertaken to pre-process the data to produce the eventual graphs.\n\nStarts from the data in cylindrical shape.\nCategorical variables are in rounded edge rectangles.\nNumerical variables are circles.\nDiscretized data are in hexagons.\nGraphs are in a subroutine shape.\n\n\nThe FlowchartThe Code\n\n\n\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n    }\n  }\n}%%\n\nflowchart TD\n    id1[(sg_demo_2024)]--&gt;C((Pop))\n    C((Pop))--&gt;G(Sub_Zone)\n    G(Sub_Zone)--&gt; F(Planning_Area) \n\n    F --&gt;|Discretize| id2{{Region Type - CR, ER, NR, NER, WR}}\n    id2 --&gt;|Filter| D(Sex)\n    D(Sex)--&gt; |Filter| B(Age)\n    D(Sex)--&gt;|Graph Type|K[[❤ EDA 2: Pyramid Bar]] \n\n    D(Sex)--&gt; |Graph Type|N[[Stacked Bar Chart]]\n\n    B(Age) --&gt;|Change Type| H((Age_Numerical))\n    B(Age) --&gt;|Discretize| id3{{summarised_ages - young, working-age, elderly}}\n    B(Age) --&gt;|Discretize| id4{{Age_type - 0-4,5-9,...,90 & Over}}\n\n    id3--&gt; |Graph Type|M[[Bar Chart]]\n    id4--&gt; |Graph Type|A[[❤ EDA 1: Population Pyramid]]\n    id4--&gt; |Graph Type|L[[❤ EDA 3: Population Pyramids]]\n\n    H((Age_Numerical))--&gt;|Graph Type|O[[Histogram]] \n\n \n\n\n\n\n\n\n\n\n\n\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n    }\n  }\n}%%\n\nflowchart TD\n    id1[(sg_demo_2024)]--&gt;C((Pop))\n    C((Pop))--&gt;G(Sub_Zone)\n    G(Sub_Zone)--&gt; F(Planning_Area) \n\n    F --&gt;|Discretize| id2{{Region Type - CR, ER, NR, NER, WR}}\n    id2 --&gt;|Filter| D(Sex)\n    D(Sex)--&gt; |Filter| B(Age)\n    D(Sex)--&gt;|Graph Type|K[[❤ EDA 2: Pyramid Bar]] \n\n    D(Sex)--&gt; |Graph Type|N[[Stacked Bar Chart]]\n\n    B(Age) --&gt;|Change Type| H((Age_Numerical))\n    B(Age) --&gt;|Discretize| id3{{summarised_ages - young, working-age, elderly}}\n    B(Age) --&gt;|Discretize| id4{{Age_type - 0-4,5-9,...,90 & Over}}\n\n    id3--&gt; |Graph Type|M[[Bar Chart]]\n    id4--&gt; |Graph Type|A[[❤ EDA 1: Population Pyramid]]\n    id4--&gt; |Graph Type|L[[❤ EDA 3: Population Pyramids]]\n\n    H((Age_Numerical))--&gt;|Graph Type|O[[Histogram]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "title": "Take-home_Exercise 1",
    "section": "5.1 Data Cleaning",
    "text": "5.1 Data Cleaning\nVerifying data quality through checking for missing values and duplicates.\n\n5.1.1 Missing Values\n\nThe ResultsThe Code\n\n\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\n\n\nsg_demo_2024[missing(sg_demo_2024),]\n\n\n\n\n\n5.1.2 Duplicates\n\nThe ResultsThe Code\n\n\n\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\n\n\nsg_demo_2024[duplicated(sg_demo_2024),]\n\n\n\nThere were no missing values or duplicates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-transformation-reduction",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-transformation-reduction",
    "title": "Take-home_Exercise 1",
    "section": "5.2 Data Transformation/ Reduction",
    "text": "5.2 Data Transformation/ Reduction\n\n5.2.1 Data Label Encoding: Changing Age from categorical to numerical type\nAge as a continuous variable will be useful for plotting distributions.\n\nThe Code\n\n\n\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;%\n  mutate(Age_numerical_temp = ifelse(Age == \"90_and_Over\", \"90\", Age)) %&gt;%\n  mutate(Age_numerical = as.numeric(Age_numerical_temp)) %&gt;%\n  select(-Age_numerical_temp) # remove the temporary column\n\n\n\n\n\n\n5.2.2 Discretization: Creation of new Region_type\nThe discretization method splits the continuous data into intervals which reduces the data size and for ease of visualising through smaller segments. There are 55 planning area (PA) and 332 subzone (SZ), referencing Urban Redevelopment Authority (URA), the PA or SZ can be grouped into 5 regions:\n\nCentral Region (CR)\nEast Region (ER)\nNorth Region (NR)\nNorth East Region (NER)\nWest Region (WR)\n\nHence, a new column of Region_type was created to reflect the 5 segmented regions using PA.\n\nThe Code\n\n\n\n# Encoding regions\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;% \n  mutate(Region_type = case_when(\n    `PA` %in% c(\"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\",\n                \"Kallang\",\"Marina East\",\"Marina South\", \"Marine Parade\", \"Museum\",\n                \"Newton\", \"Novena\", \"Orchard\",\"Outram\",\"Queenstown\",\"River Valley\",\n                \"Rochor\",\"Singapore River\",\"Southern Islands\", \"Straits View\",\n                \"Tanglin\",\"Toa Payoh\") ~ \"CR\",\n    `PA` %in% c(\"Bedok\",\"Changi\",\"Changi Bay\",\"Pasir Ris\",\"Paya Lebar\",\"Tampines\") ~ \"ER\",\n    `PA` %in% c(\"Central Water Catchment\",\"Lim Chu Kang\",\"Mandai\",\n                \"Sembawang\", \"Simpang\", \"Sungei Kadut\",\"Woodlands\",\"Yishun\") ~ \"NR\",\n    `PA` %in% c(\"Ang Mo Kio\",\"Hougang\", \"North-Eastern Islands\", \"Punggol\", \n                \"Seletar\", \"Sengkang\", \"Serangoon\") ~ \"NER\",\n    `PA` %in% c(\"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\",\n                \"Clementi\", \"Jurong East\", \"Jurong West\", \"Pioneer\", \"Tengah\",\n                \"Tuas\", \"Western Islands\",\"Western Water Catchment\") ~ \"WR\"\n  ))\n\n\n\n\nThese are the summarised data.\n\nThe DataThe Code\n\n\n\n\n\n\n\n\n\n\n\nRegion_type\nPlanning_Area\n\n\n\n\nCR\nBishan, Bukit Merah, Bukit Timah, Downtown Core, Geylang, Kallang, Marina East, Marina South, Marine Parade, Museum, Newton, Novena, Orchard, Outram, Queenstown, River Valley, Rochor, Singapore River, Southern Islands, Straits View, Tanglin, Toa Payoh\n\n\nER\nBedok, Changi, Changi Bay, Pasir Ris, Paya Lebar, Tampines\n\n\nNER\nAng Mo Kio, Hougang, North-Eastern Islands, Punggol, Seletar, Sengkang, Serangoon\n\n\nNR\nCentral Water Catchment, Lim Chu Kang, Mandai, Sembawang, Simpang, Sungei Kadut, Woodlands, Yishun\n\n\nWR\nBoon Lay, Bukit Batok, Bukit Panjang, Choa Chu Kang, Clementi, Jurong East, Jurong West, Pioneer, Tengah, Tuas, Western Islands, Western Water Catchment\n\n\n\n\n\n\n\npa_mapping&lt;- sg_demo_2024 %&gt;%\n  group_by(`Region_type`) %&gt;%\n  summarize(Planning_Area = paste(unique(`PA`), collapse = \", \"))\n\nkable(pa_mapping, title = \"Mapping of Planning Area to Region \")\n\n\n\n\n\n5.2.3 Discretization: Creation of new Age_Type\nThe ages were binned into Age_type based on Singapore’s Department of Statistics classification.\n\nThe Code\n\n\n\n# Encoding ages\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;% \n  mutate(Age_type = case_when(\n    Age %in% as.character(0:4) ~ \"0-4\",\n    Age %in% as.character(5:9) ~ \"5-9\",\n    Age %in% as.character(10:14) ~ \"10-14\",\n    Age %in% as.character(15:19) ~ \"15-19\",\n    Age %in% as.character(20:24) ~ \"20-24\",\n    Age %in% as.character(25:29) ~ \"25-29\",\n    Age %in% as.character(30:34) ~ \"30-34\",\n    Age %in% as.character(35:39) ~ \"35-39\",\n    Age %in% as.character(40:44) ~ \"40-44\",\n    Age %in% as.character(45:49) ~ \"45-49\",\n    Age %in% as.character(50:54) ~ \"50-54\",\n    Age %in% as.character(55:59) ~ \"55-59\",\n    Age %in% as.character(60:64) ~ \"60-64\",\n    Age %in% as.character(65:69) ~ \"65-69\",\n    Age %in% as.character(70:74) ~ \"70-74\",\n    Age %in% as.character(75:79) ~ \"75-79\",\n    Age %in% as.character(80:84) ~ \"80-84\",\n    Age %in% as.character(85:89) ~ \"85-89\",\n    Age == \"90_and_Over\" ~ \"90 & Over\",\n    TRUE ~ NA_character_\n  ))\n\n\n\n\n\n\n5.2.4 Discretization: Creation of new summarised_ages\nBased on Singapore Department of Statistics’s classification, elderly are persons aged 65 and older. Based on the Ministry of Manpower the working-age population comprises of persons aged 15 and over. Thus, the remaining younger population are classified as young here.\n\nThe Code\n\n\n\n# Encoding summarised_ages\nsg_demo_2024 &lt;- sg_demo_2024 %&gt;% \n  mutate(summarised_ages = case_when(\n    Age %in% as.character(0:14) ~ \"young\",\n    Age %in% as.character(15:64) ~ \"working-age\",\n    Age %in% as.character(65:89) ~ \"eldery\",\n    Age == \"90_and_Over\" ~ \"eldery\",\n    TRUE ~ NA_character_\n  ))\n\n\n\n\n\n\n5.2.5 Discretization: Creation of new pop_by_gender_age dataframe and new total_pop variable\nThere is no need to keep Time, PA, SZ, and Age variables. This helps in data or dimension reduction and reduces computation power.\n\nThe Code\n\n\n\n# Using groupby() and summarise \npop_by_gender_age&lt;- sg_demo_2024 %&gt;%\n  group_by(Sex, Age_numerical, Age_type, Region_type)%&gt;%\n  summarize(total_pop = sum(Pop), .groups = \"drop\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preview-of-reduced-dataframe",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preview-of-reduced-dataframe",
    "title": "Take-home_Exercise 1",
    "section": "5.3 Preview of reduced dataframe",
    "text": "5.3 Preview of reduced dataframe\nDataframes pop_by_gender_age and the original sg_demo_2024 were used to plot graphs in Section 7 and 8.\n\n5.3.1 Composition of pop_by_gender_age dataframe\n\nglimpse(pop_by_gender_age)\n\nRows: 910\nColumns: 5\n$ Sex           &lt;chr&gt; \"Females\", \"Females\", \"Females\", \"Females\", \"Females\", \"…\n$ Age_numerical &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3,…\n$ Age_type      &lt;chr&gt; \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", \"0-4\", …\n$ Region_type   &lt;chr&gt; \"CR\", \"ER\", \"NER\", \"NR\", \"WR\", \"CR\", \"ER\", \"NER\", \"NR\", …\n$ total_pop     &lt;dbl&gt; 3040, 2400, 3520, 2260, 3150, 3430, 2650, 3780, 2350, 33…\n\n\n\nThe dataframe has 5 columns and 910 rows. Three of the columns contains categorical data type and the other two are in double/real number data type.\nThe categorical attributes are: Region_type, Age_type, and Sex\nThe numerical attributes are: Age_numerical, and total_pop.\n\n\n\n5.3.2 Understanding the distribution of numerical values\nThe median age here is computed by it’s Age_numerical column and is not a representation of the entire population.\n\nThe DataThe Code\n\n\n\n\n\n\n\n\nAge_numerical\ntotal_pop\n\n\n\n\n\nMin. : 0\nMin. : 220\n\n\n\n1st Qu.:22\n1st Qu.:3340\n\n\n\nMedian :45\nMedian :4625\n\n\n\nMean :45\nMean :4608\n\n\n\n3rd Qu.:68\n3rd Qu.:6190\n\n\n\nMax. :90\nMax. :9100\n\n\n\n\n\n\n\nrealis_num2 &lt;- pop_by_gender_age[,c(\"Age_numerical\", \"total_pop\")]\n  \nkable(summary(realis_num2))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-of-region-by-different-population-age-groups",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bar-chart-of-region-by-different-population-age-groups",
    "title": "Take-home_Exercise 1",
    "section": "6.1 Bar Chart of Region by Different Population Age Groups",
    "text": "6.1 Bar Chart of Region by Different Population Age Groups\nThe bar chart hows the percentage and absolute figures of the different age group of residents by region\n\nThe Code for Bar Chart on Percentage FiguresThe Code for Bar Chart on Absolute FiguresThe Combined Bar Charts\n\n\n\n# Using groupby() and summarise \npop_by_region&lt;- sg_demo_2024 %&gt;%\n  group_by(summarised_ages, Region_type) %&gt;%\n  summarize(pop_region = sum(Pop), .groups = \"drop\")\n\n# Calculate percentages by summarised_ages\npop_by_region_percent &lt;- pop_by_region %&gt;%\n  group_by(summarised_ages) %&gt;%\n  mutate(percent = pop_region / sum(pop_region)) %&gt;%\n  ungroup()\n\np1 &lt;- ggplot(pop_by_region_percent,\n             aes(x = reorder(Region_type, -pop_region), y = percent,\n                 fill = summarised_ages, # Keep fill for visual distinction\n                 text = paste(\"Age Group:\", summarised_ages, \"&lt;br&gt;\",\n                              \"Region:\", Region_type, \"&lt;br&gt;\",\n                              \"Percent:\", scales::percent(percent, accuracy = 0.1), \"&lt;br&gt;\",\n                              \"Population:\", scales::comma(pop_region)))) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),\n        axis.title.x = element_text(vjust = -1),\n        strip.text = element_text(size = 10),\n        panel.spacing.x = unit(1, \"lines\"),\n        legend.position = \"none\") + \n  labs(x = \"Region\",\n       y = \"Percent per age-group\",\n       title  = \"Population by Age-groups and Regions (Percentage)\") +\n  scale_y_continuous(labels = scales::percent) +\n  facet_wrap(vars(summarised_ages), nrow = 1, scales = \"free_x\") +\n  scale_fill_brewer(palette = \"Set3\") # Use a color palette for regions\n\n# Create an interactive plotly object with hover\nlibrary(plotly)\nggplotly(p1, tooltip = \"text\") %&gt;%\n  style(hoverlabel = list(bgcolor = \"blue\"))\n\n\n\n\npop_by_region &lt;- sg_demo_2024 %&gt;%\n  group_by(summarised_ages, Region_type) %&gt;%\n  summarize(pop_region = sum(Pop), .groups = \"drop\")\n\n# Plot the absolute population figures\np2 &lt;- ggplot(pop_by_region,\n             aes(x = reorder(Region_type, -pop_region), y = pop_region,\n                 fill = summarised_ages, # Fill by region for distinction\n                 text = paste(\"Age Group:\", summarised_ages, \"&lt;br&gt;\",\n                              \"Region:\", Region_type, \"&lt;br&gt;\",\n                              \"Population:\", scales::comma(pop_region)))) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  theme(plot.title = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),\n        axis.title.x = element_text(vjust = -1),\n        strip.text = element_text(size = 10),\n        panel.spacing.x = unit(1, \"lines\"),\n        legend.position = \"none\") +\n  labs(x = \"Region\",\n       y = \"Population\",\n       title  = \"Population by Age-groups and Regions (Absolute Figures)\",\n       fill = \"Region\") + # Update legend title\n  scale_y_continuous(labels = scales::comma) +\n  facet_wrap(vars(summarised_ages), nrow = 1, scales = \"free_x\") +\n  scale_fill_brewer(palette = \"Set3\") # Use a color palette for regions\n\n# Create an interactive plotly object with hover\nggplotly(p2, tooltip = \"text\") %&gt;%\n  style(hoverlabel = list(bgcolor = \"blue\"))\n\n\n\n\np1/p2\n\n\n\n\n\n\n\n\n\n\n\n\nThere are less residents in the East and North regions, relative to other other regions.\nMost of the population are in the working-age group due to the larger age range (15-64).\nAmong the elderly population, there are significantly more elderly in the central region, compared to other regions. There are less elderly in the northern region, relative to other regions.\nAmong the younger population, there is a younger population in the north eastern region relative to other regions.\nThe population in the working age group are close to evenly distributed in the 3 regions of North-Eastern, Central and Western Regions of Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#stacked-bar-chart-of-region-by-population-with-gender-as-hue",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#stacked-bar-chart-of-region-by-population-with-gender-as-hue",
    "title": "Take-home_Exercise 1",
    "section": "6.2 Stacked Bar chart of Region by Population (with gender as hue)",
    "text": "6.2 Stacked Bar chart of Region by Population (with gender as hue)\n\nThe Stacked Bar ChartThe Code for Stacked bar chart\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_by_region&lt;- sg_demo_2024 %&gt;%\n  group_by(Region_type,Sex) %&gt;%\n  summarize(pop_region = sum(Pop), .groups = \"drop\")\n\n# plot the distribution as percentages\np4&lt;-ggplot(pop_by_region, \n       aes(x = reorder(Region_type, -pop_region), y = pop_region/sum(pop_region),\n           fill=Sex,\n           text = paste(\"Population:\", pop_region,\n                        \"\\nPercent (%):\", round(100 *pop_region / sum(pop_region), digits = 2),\n                        \"\\nGender:\", Sex)))+ \n  geom_bar(stat = \"identity\", color = \"black\") +    \n  theme(plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\")) + \n  labs(x = \"Region\", \n       y = \"Percent\", \n       title  = \"Population of Residents by Region\") +\n  scale_y_continuous(labels = scales::percent)\nggplotly(p4, tooltip = \"text\")%&gt;%\n  style(\n    hoverlabel = list(bgcolor = \"blue\")\n  )\n\n\n\n\nThere is a rather even distribution of gender in each region.\nER and NR have lesser population compared to the other regions, as confirmed in section 6.1."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid",
    "title": "Take-home_Exercise 1",
    "section": "7.1 Population Pyramid",
    "text": "7.1 Population Pyramid\nInstead of the histogram produced in the earlier univariate/ bivariate analysis, a population pyramid can be produced for clearer visualisation of Age and Gender Structure.\n\nStep 1: Preparatory work\n\nThe Code to create pyramid- run laterThe Code to calculate Total Population and Median AgeThe Code to create Age labels and its plotThe Code to create of new column Age_Type_Ordered\n\n\npop_by_gender_age &lt;-\n  pop_by_gender_age |&gt;\n  mutate(total_pop = if_else(Sex == \"Males\", total_pop, -total_pop))\n\n\nCheck the total population and median ages:\n\nThe total population is around 4,193,530.\nThe median age of the population is around 42 years.\n\n\n# Ensure total_pop is positive for this calculation\npop_for_median &lt;- pop_by_gender_age %&gt;%\n  mutate(abs_total_pop = abs(total_pop))\n\n# Calculate the cumulative population\npop_cumulative &lt;- pop_for_median %&gt;%\n  arrange(Age_numerical) %&gt;%\n  mutate(cumulative_pop = cumsum(abs_total_pop))\n\n# Find the total population\ntotal_population &lt;- sum(pop_cumulative$abs_total_pop)\nprint(paste(\"Total Population:\", total_population))\n\n[1] \"Total Population: 4193530\"\n\n# Determine the median population (half of the total)\nmedian_population_point &lt;- total_population / 2\n\n# Find the age at which the cumulative population crosses the median point\nmedian_age_population &lt;- pop_cumulative %&gt;%\n  filter(cumulative_pop &gt;= median_population_point) %&gt;%\n  slice_head(n = 1) %&gt;%\n  pull(Age_numerical)\n\nprint(paste(\"Median Age of the Population:\", median_age_population))\n\n[1] \"Median Age of the Population: 42\"\n\n\n\n\nAge labels were created for ordered age.\n\n# Creation of age labels\nage_labels &lt;-\n  tibble(\n    Age_type = c(\n      \"0-4\",\n      \"5-9\",\n      \"10-14\",\n      \"15-19\",\n      \"20-24\",\n      \"25-29\",\n      \"30-34\",\n      \"35-39\",\n      \"40-44\",\n      \"45-49\",\n      \"50-54\",\n      \"55-59\",\n      \"60-64\",\n      \"65-69\",\n      \"70-74\",\n      \"75-79\",\n      \"80-84\",\n      \"85-89\",\n      \"90 & Over\"\n    )\n  ) |&gt;\n  mutate(\n    Age_type = fct_inorder(Age_type)\n  )\n\n# age_labels plot only\nage_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text() +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=8,\n                                  face = \"bold\", color = \"black\"))\n\n\n\n\n\n\n\n\n\n\nTo ensure that the Age_type column in pop_by_gender_age is a factor with the levels taken directly from age_labels$Age_type, new column Age_Type_Ordered is created.\n\n# Creation of ordered factor\npop_by_gender_age &lt;- pop_by_gender_age %&gt;%\n  mutate(Age_Type_Ordered = factor(Age_type, levels = age_labels$Age_type))\nprint(levels(pop_by_gender_age$Age_Type_Ordered))\n\n [1] \"0-4\"       \"5-9\"       \"10-14\"     \"15-19\"     \"20-24\"     \"25-29\"    \n [7] \"30-34\"     \"35-39\"     \"40-44\"     \"45-49\"     \"50-54\"     \"55-59\"    \n[13] \"60-64\"     \"65-69\"     \"70-74\"     \"75-79\"     \"80-84\"     \"85-89\"    \n[19] \"90 & Over\"\n\n\n\n# Double checking factor for Age_type matches for pop_by_gender_age and age_labels\nunique_pop_age &lt;- unique(pop_by_gender_age$Age_type)\nprint(\"Unique values in pop_by_gender_age$Age_type:\")\n\n[1] \"Unique values in pop_by_gender_age$Age_type:\"\n\nprint(unique_pop_age)\n\n [1] \"0-4\"       \"5-9\"       \"10-14\"     \"15-19\"     \"20-24\"     \"25-29\"    \n [7] \"30-34\"     \"35-39\"     \"40-44\"     \"45-49\"     \"50-54\"     \"55-59\"    \n[13] \"60-64\"     \"65-69\"     \"70-74\"     \"75-79\"     \"80-84\"     \"85-89\"    \n[19] \"90 & Over\"\n\nunique_labels_age &lt;- unique(age_labels$Age_type)\nprint(\"Unique values in age_labels$Age_type:\")\n\n[1] \"Unique values in age_labels$Age_type:\"\n\nprint(unique_labels_age)\n\n [1] 0-4       5-9       10-14     15-19     20-24     25-29     30-34    \n [8] 35-39     40-44     45-49     50-54     55-59     60-64     65-69    \n[15] 70-74     75-79     80-84     85-89     90 & Over\n19 Levels: 0-4 5-9 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 ... 90 & Over\n\n\n\n\n\n\n\nStep 2: Plotting of Male + Female + Age Label plots\n\nGroup By For new dataframePlot of Females and MalesCode of the plot of Females and Males\n\n\n\n# Using groupby() and summarise \n#popfirt &lt;- pop_by_gender_age %&gt;%\n#  group_by(Sex, Age_Type_Ordered) %&gt;%\n#  summarize(total_pop = sum(total_pop), .groups = \"drop\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Create Pyramid\npop_by_gender_age &lt;-\n  pop_by_gender_age |&gt;\n  mutate(total_pop = if_else(Sex == \"Males\", total_pop, -total_pop))\n\n#one women plot\npopulation_pyramid_women &lt;-\n  pop_by_gender_age |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = total_pop,\n    y = Age_Type_Ordered  \n  )) +\n    geom_col(fill = \"#F8766D\",alpha = 0.8) +\n  annotate(\n  geom = \"label\",\n  x = -120000,\n  y = 19,\n  label = \"Females\",\n  fill = \"#F8766D\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n)+\n  scale_x_continuous(breaks = breaks_pretty(), \n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"))+\n  theme_void()+\n  theme(\n    axis.text.x = element_text(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n# one men plot\npopulation_pyramid_men &lt;-\n  pop_by_gender_age |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = total_pop,\n    y = Age_Type_Ordered \n  )) +\n  geom_col(fill = \"#00BFC4\",alpha = 0.8)+\n  annotate(\n  geom = \"label\",\n  x = 120000,\n  y = 19,\n  label = \"Males\",\n  fill = \"#00BFC4\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n) +\n  scale_x_continuous(breaks = breaks_pretty(), \n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"))+\n  theme_void()+\n  theme(\n    axis.text.x = element_text(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n# Plot age plot\nage_labels_plot &lt;-\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text() +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=10,\n                                  face = \"bold\", color = \"black\"))\n# Combine everything (age + tw0 gender plots)\npopulation_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men\n\n\n\n\n\nFinal Step: View the Population Pyramid Plot\nAfter layout adjustments, the population pyramid was plotted.\n\nPopulation Pyramid- Adjustments madeCode for adjustments\n\n\n\n\n\n\n\n\n\n\n\n\n\np6&lt;-population_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men +\n  plot_layout(\n    widths = c(4.3, 1, 4.3))+ # both sides are 4.3 times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Singapore Resident Population for 2024\", \n    subtitle=\"(Population median age = 42)\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(face = \"bold\", hjust = 0.20), \n                  plot.subtitle = element_text( hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"))\n)\nplot(p6)\n\ngrid.rect(\n  x = unit(0, \"npc\"),  \n  y = unit(1, \"npc\"),  \n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\nThe population pyramid visualises the population’s age and gender distribution. The population size is shown on the x-axis while the age-groups are represented on the middle y-axis. The population numbers are depicted within each age-group bar by gender on the left (Females) and right (Males). The bottom bar represents the youngest age group (0-4) and is incremental in age-group towards the top (90 & Over).\nIt is possible to visualise the regions within each age group as what Michal Palenik produced for three employment statuses. However, this method faces the issue of complexity and difficulty reading in our case due to having 5 regions, with the regions close in region size per age-group.\nSee an example below which visualises the complexity.\n\n\n7.1.1 Comparative Distribution and Structure of Age, Gender, and Population\n\nPopulation Pyramid with RegionCode for Population Pyramid with Region\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Order the data by Region_type within each Age and Gender group. \nsg_demo_2024_reshaped &lt;- sg_demo_2024 %&gt;%\n  arrange(Sex, Age_type, Region_type)\n\n# ordered factor\nsg_demo_2024_reshaped &lt;- sg_demo_2024_reshaped %&gt;%\n  mutate(Age_Type_Ordered2 = factor(Age_type, levels = age_labels$Age_type))\n\n# Create a basic bar chart for one gender\nbasic_plot &lt;-  ggplot(sg_demo_2024_reshaped, \n                      aes(x = Age_Type_Ordered2, \n                          y= ifelse(Sex=='Females', -Pop, Pop), \n                          fill = Region_type)) + \ngeom_bar(stat = \"identity\") \n\n# Create population pyramids for both genders and combine them\npopulation_pyramid &lt;- basic_plot +\n  coord_flip() +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Pastel2\") +\n  labs(\n    x = \"Age_type\",\n    y = \"Pop\",  \n    fill = \"Region_type\",  \n    title = \"Population Pyramid\")  +\n    scale_y_continuous(breaks = breaks_pretty(),\n                       labels = function(y) format(y, scientific = FALSE))+\n  geom_hline(yintercept = 0, color = \"blue\", linetype = \"dashed\", size = 0.5) + # Males and Females separation\n  annotate(geom = \"label\",x = 18, y = -100000,\n           label = \"Females\", fill = \"lightpink\",\n           color = \"black\",label.size = 0)+\n  annotate(geom = \"label\",x = 18, y = 100000,\n           label = \"Males\", fill = \"lightsteelblue\",\n           color = \"black\",label.size = 0)\nprint(population_pyramid) #  Display the plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#histogram",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#histogram",
    "title": "Take-home_Exercise 1",
    "section": "7.2 Histogram",
    "text": "7.2 Histogram\n\nA histogram or density plot is usually used to visualise distributions. However, density plots assumes that each row of data is an independent observation of that variable. In our case, the Pop column was a summation instead of a single observation.\nHere, distribution of Gender population by Age for Regions is visualised.\n\n\nThe HistogramThe Code for HistogramMultiple Histograms\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_by_age_sex_region&lt;- sg_demo_2024 %&gt;%\n  group_by(Age_numerical, Sex, Region_type) %&gt;%\n  summarize(pop_age = sum(Pop), .groups = \"drop\")\n\n# Sort ages\nsorted_ages2 &lt;- sort(unique(pop_by_age_sex_region$Age_numerical))\n\n# Plot the age distribution using a histogram\np7&lt;-ggplot(pop_by_age_sex_region, aes(x = Age_numerical, \n                                      y = pop_age, fill = Sex, \n                           text = paste(\"Age:\", Age_numerical, \"&lt;br&gt;\",\n                              \"Gender:\", Sex, \"&lt;br&gt;\",\n                              \"Population:\", scales::comma(pop_age)))) +\n  geom_bar(stat = \"identity\", color = \"black\", width = 1) +\n  scale_x_continuous(breaks = sorted_ages2,\n                     labels = sorted_ages2) +\n  labs(title = \"Gender population by Age for Regions\",\n       x = \"Age\",\n       y = \"Total Population\") +\n  scale_y_continuous(labels = scales::comma) +  \n  theme(axis.text.x = element_text(angle = 90, hjust = 1, size=5, face = \"bold\"),\n        plot.title = element_text(hjust = 0.5, size = 11, face = \"bold\"),\n        axis.title.x = element_text(size = 8),\n        axis.title.y = element_text(size = 8),\n        axis.text.y = element_text(size = 8),\n        legend.title = element_text(size = 6),\n        legend.text = element_text(size = 6),\n        strip.text = element_text(size = 8))\n\np7\n\n\n\np7+ facet_wrap(vars(Region_type), nrow=5)\n\n\n\n\n\n\n\n\n\n\n\nThe histogram/ stacked bar chart shows the regional population distribution and regional gender distribution/ structure. It is harder to read and discarded."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#demographic-structures-and-distribution-of-singapore-in-2024",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#demographic-structures-and-distribution-of-singapore-in-2024",
    "title": "Take-home_Exercise 1",
    "section": "Demographic structures and distribution of Singapore in 2024",
    "text": "Demographic structures and distribution of Singapore in 2024"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-pyramid-1",
    "title": "Take-home_Exercise 1",
    "section": "8.1 Population Pyramid",
    "text": "8.1 Population Pyramid\n\nPopulation PyramidThe Code for Population Pyramid\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npopfirt &lt;- pop_by_gender_age %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(total_pop = sum(total_pop), .groups = \"drop\")\n\n# --- Plot for Full  Region (popfirt) ---\n# Initial plot\npopfirt &lt;-\n  popfirt |&gt;\n  mutate(pop_sex  = if_else(Sex == \"Males\", total_pop, -total_pop))\n\n#one women plot\npopulation_pyramid_women &lt;-\n  popfirt |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex ,\n    y = Age_Type_Ordered  \n  )) +\n    geom_col(fill = \"#F8766D\",alpha = 0.8, width=0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex  / 1000,\n                             scientific = FALSE, digits = 3, trim = TRUE), \"K\")),\n    hjust = 0.7, nudge_x = -0.1 * max(abs(popfirt$pop_sex )),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n  geom = \"label\",\n  x = -120000,\n  y = 19,\n  label = \"Females\",\n  fill = \"#F8766D\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(-200000, 0, by = 50000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-200000,0) # Extend to the left for females\n  ) +\n  theme_void()+\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n# one men plot\npopulation_pyramid_men &lt;-\n  popfirt |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered \n  )) +\n  geom_col(fill = \"#00BFC4\",alpha = 0.8, width=0.7)+\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(popfirt, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.11 * max(abs(popfirt$pop_sex)),\n                     0.11 * max(abs(popfirt$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n  geom = \"label\",\n  x = 120000,\n  y = 19,\n  label = \"Males\",\n  fill = \"#00BFC4\",\n  alpha = 0.8,\n  color = \"black\",\n  label.size = 0,\n  label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 200000, by = 50000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 200000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n  \n# Plot age plot\nage_labels_plot &lt;-\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size=3) +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=7,\n                                  face = \"bold\", color = \"black\"))\n\n\n# Combine everything (age + tw0 gender plots)\np_full_pyr &lt;-population_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men +\n  plot_layout(\n    widths = c(3, 1, 3)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Singapore Residents (June 2024)\",\n    subtitle = \"Population median age = 42\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 6),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_full_pyr)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\nWhat is a population pyramid?\nPopulation pyramids show the age and gender population distribution. It is useful for studying the effects of armed conflicts, mortality, birth policies and migration.\nWhat are the types of population pyramid?\nThere are three main types: Triangular shape (Expansive), Bell shape (Stationary), Bulb shape (Constrictive).\n\n\n Insights\n\n\nHow about Singapore’s population pyramid?\n\nSingapore has a Constrictive type in year 2024. It is wider in the middle due to larger representation by the middle-age and elderly, but fewer young people. This is corroborated with the median age at 42.\nThe top of the pyramid is wider than other two pyramid types, suggesting longer life expectancy.\nFemales appears to outlive males as they aged, as seen from the longer bars. This difference is more prevalent for older age-groups (75s to more than 90s).\nThis suggests an ageing population and low fertility."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#regional-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#regional-distribution",
    "title": "Take-home_Exercise 1",
    "section": "8.2 Regional Distribution",
    "text": "8.2 Regional Distribution\n\nRegional PopulationThe Code for Regional Population\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_by_sex&lt;- sg_demo_2024 %&gt;%\n  group_by(Sex, Region_type) %&gt;%\n  summarize(pop_sex = sum(Pop), .groups = \"drop\")\n\n# Compute the position of labels\ndata &lt;- pop_by_sex %&gt;%\n  group_by(Region_type) %&gt;% # Group by Region_type first\n  arrange(desc(Sex)) %&gt;%\n  mutate(prop = pop_sex / sum(pop_sex) * 100) %&gt;% # percentage within each region\n  mutate(ypos = cumsum(prop) - 0.5 * prop) #y-positions for labels within each region\n  \n# Calculate total population per region for ordering\nregion_order &lt;- data %&gt;%\n    group_by(Region_type) %&gt;%\n    summarise(total_region_pop = sum(abs(pop_sex))) %&gt;%\n    arrange(total_region_pop) %&gt;%\n    pull(Region_type)\n\n# Order the Region_type factor\ndata$Region_type &lt;- factor(data$Region_type, levels = region_order)\n\n# Plot\nggplot(data, aes(y = Region_type, fill = Sex)) +\n    geom_bar(data = subset(data, Sex == \"Males\"),\n             aes(x = pop_sex),\n             stat = \"identity\", fill = \"#00BFC4\",alpha = 0.8) +\n    geom_label(data = subset(data, Sex == \"Males\"),\n               aes(x = pop_sex,\n                   label = paste0(format(pop_sex, \n                                         scientific = FALSE, big.mark = \",\"))),\n                hjust = 0.5, nudge_x = -0.1 * max(abs(data$pop_sex)), \n               size = 3, color = \"black\", fill = \"grey90\") +\n    geom_bar(data = subset(data, Sex == \"Females\"),\n             aes(x = -pop_sex),\n             stat = \"identity\", fill = \"#F8766D\",alpha = 0.8) +\n    geom_label(data = subset(data, Sex == \"Females\"),\n               aes(x = -pop_sex,\n                   label = paste0(format(abs(pop_sex), \n                                         scientific = FALSE, big.mark = \",\"))),\n                hjust = 0.5, nudge_x = 0.1 * max(abs(data$pop_sex)), \n               size = 3, color = \"black\", fill = \"grey90\") +\nscale_x_continuous(\n    breaks = breaks_pretty(10),\n    labels = function(x) scales::comma(abs(x) / 1000, suffix = \"K\")\n)+\n    annotate(\n        geom = \"label\",\n        x = -max(abs(data$pop_sex)) * 1,\n        y = length(unique(data$Region_type)) + 0.8,\n        label = \"Females\",\n        fill = \"#F8766D\",\n        alpha = 0.8,\n        color = \"black\",\n        label.size = 0,\n        label.padding = unit(0.2, \"lines\"),\n        hjust=-0.8\n    )   +\n    annotate(\n        geom = \"label\",\n        x = max(abs(data$pop_sex)) * 1,\n        y = length(unique(data$Region_type)) + 0.8,\n        label = \"Males\",\n        fill = \"#00BFC4\",\n        alpha = 0.8,\n        color = \"black\",\n        label.size = 0,\n        label.padding = unit(0.2, \"lines\"),\n        hjust=2.5\n    ) +\n    scale_y_discrete(expand = expansion(mult = c(0, 0.3))) +\n    theme_bw() + # Using a clean theme\n    theme(axis.text = element_text(colour = \"black\"),\n          plot.title = element_text(lineheight = 0.8),\n          panel.grid.major.y = element_blank(), # Remove horizontal grid lines\n          panel.grid.minor = element_blank(),\n          legend.position = \"none\") +\n    labs(y = \"Region\", x = \"Population\", fill = \"Sex\")+\n  plot_annotation(title = \"Singapore Resident Population for June 2024, by Region\",\n                  subtitle=\"Relative to other regions, the North-East Region is the region with the most residents, followed closely by the Central Region.\",\n                  caption = \"NER: North-East Region; CR: Central Region; WR: West Region; ER: East Region; NR: North Region\n\n. \\n Data Source: Department of Statistics, Singapore | Designer: AT\",\n                  theme = theme(plot.title = element_text(face = \"bold\", hjust = 0.16), \n                  plot.subtitle = element_text(size=8, hjust = 0.6),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.caption=element_text(size=8)))\n\ngrid.rect(\n  x = unit(0, \"npc\"),  \n  y = unit(1, \"npc\"),  \n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n Insights\n\n\nWhat is the regional-gender population distribution?\n\nMost residents are clustered in NER, CR, and WR. A smaller segment in ER and NR.\nClosely even distribution of genders per region seen by colours and values.\n\n\n\nAbbreviations-&gt; NER: North-East Region; CR: Central Region; WR: West Region; ER: East Region; NR: North Region"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#region-age-gender-distribution",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#region-age-gender-distribution",
    "title": "Take-home_Exercise 1",
    "section": "8.3 Region-Age-Gender Distribution",
    "text": "8.3 Region-Age-Gender Distribution\n\nCode for the creation of age labelsCode for creation of blank canvasCode for the creation of each region’s dataframeNorth RegionEast RegionWest RegionCentral RegionNorth East RegionThe Final Combined Plot\n\n\n\n# Creation of age labels\nage_labels &lt;-\n  tibble(\n    Age_type = c(\n      \"0-4\",\n      \"5-9\",\n      \"10-14\",\n      \"15-19\",\n      \"20-24\",\n      \"25-29\",\n      \"30-34\",\n      \"35-39\",\n      \"40-44\",\n      \"45-49\",\n      \"50-54\",\n      \"55-59\",\n      \"60-64\",\n      \"65-69\",\n      \"70-74\",\n      \"75-79\",\n      \"80-84\",\n      \"85-89\",\n      \"90 & Over\"\n    )\n  ) |&gt;\n  mutate(\n    Age_type = fct_inorder(Age_type)\n  )\n\n\n\n\n# Create a blank plot with a blue background\np &lt;- ggplot() +\n  theme_void() +  # Clean\n  theme(plot.background = element_rect(fill = \"#C1D3E5\"),\n        ) # Set the background \n\n# Add text annotation\np &lt;- p +\n  annotate(\n    \"text\",\n    x = 0.5,  # x-coordinate of the text (normalized)\n    y = 0.7,  # y-coordinate of the text (normalized)\n    label = \"Age Pyramids of Resident Population \\n in Singapore Regions (June 2024)\",\n    color = \"black\",           # Color of the text\n    size = 8,                # Size of the text\n    fontface = \"bold\",         # Style of the text\n    hjust = 0.5,             # Horizontal justification (0.5 = center)\n    vjust = 1.3              # Vertical justification (0.5 = center)\n  )+\n    annotate(\n    \"text\",\n    x = 0.5,  # x-coordinate of the second text (normalized)\n    y = 0.4,  # y-coordinate of the second text (normalized)\n    label = \"(West, North, East, North-East, \\n and Central Region)\", \n    color = \"black\",           # Color of the second text\n    size = 6,                # Size of the second text\n    fontface = \"bold\",         # Style of the second text\n    hjust = 0.5,             # Horizontal justification (0.5 = center)\n    vjust = -1.9              # Vertical justification (0.5 = center)\n  )+\n  annotate(\n    \"text\",\n    x = 0.5,  # x-coordinate of the second text (normalized)\n    y = 0.3,  # y-coordinate of the second text (normalized)\n    label = \"Within regions, many residents are aged 25-69, 25-64, or 30-69\",\n    color = \"black\",           # Color of the second text\n    size = 5,                # Size of the second text\n    fontface = \"bold\",         # Style of the second text\n    hjust = 0.5,             # Horizontal justification (0.5 = center)\n    vjust = -1.2             # Vertical justification (0.5 = center)\n  )\n\n# Create the grid.rect grob\nrect_grob &lt;- grid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n# Add the grid.rect grob to the plot's gtable\np &lt;- p + \n  annotation_custom(\n    grob = rect_grob,\n    xmin = -Inf,  # Extend to the edges of the plot panel\n    xmax = Inf,\n    ymin = -Inf,\n    ymax = Inf\n  )\n\n# Print the plot\nplot(p)\n\n\n\n\n\n\n\n\n\n\n\n# Using groupby() and summarise \npop_ner &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"NER\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_er &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"ER\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_wr &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"WR\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_cr &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"CR\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n# Using groupby() and summarise \npop_nr &lt;- pop_by_gender_age %&gt;%\n  filter(Region_type == \"NR\") %&gt;%\n  group_by(Sex, Age_Type_Ordered) %&gt;%\n  summarize(pop_sex = sum(total_pop), .groups = \"drop\")\n\n\n\n\n# Initial plot\npop_nr &lt;-\n  pop_nr |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\n# One women plot\npopulation_pyramid_women &lt;-\n  pop_nr |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\",alpha=0.8, width=0.7) +\n# Add Labelling  \n    geom_label(\n               aes(x = -pop_sex,\n                    label = paste0(format(pop_sex / 1000, \n                                          scientific = FALSE, digits = 2, trim = TRUE), \"K\")\n    ),\n                hjust = 0.8, nudge_x = -0.1 * max(abs(pop_nr$pop_sex)), \n               size = 2.6, color = \"black\", fill = \"grey90\") +\n# Annotations\n  annotate(\n    geom = \"label\",\n    x = -25000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha=0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  \n  theme_void()+\n  theme(\n    axis.text.x = element_text(size=8,margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\n\n# One men plot\npopulation_pyramid_men &lt;-\n  pop_nr |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\",alpha=0.8, width=0.7)+\n  # Add Labelling  \n    geom_label(\n               aes(x = pop_sex,\n               label = paste0(format(pop_sex / 1000,\n                                      scientific = FALSE,\n                                      digits = 2,\n                                      trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_nr, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.15 * max(abs(pop_nr$pop_sex)), # those less than 1K \n                     0.15 * max(abs(pop_nr$pop_sex))), # others\n               size = 2.6, color = \"black\", fill = \"grey90\") +\n  #Annotations\n  annotate(\n    geom = \"label\",\n    x = 25000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    alpha=0.8,\n    color = \"black\",\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\nscale_y_discrete()+\n  theme_void()+\n  theme(\n    axis.text.x = element_text(size=8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n    )\n  \n\n# Plot age plot\nage_labels_plot &lt;-\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size=3) +\n  theme_void()+\n  ggtitle(\"Age Group\\n(Years)\")+\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size=6,\n                                  face = \"bold\", color = \"black\"))\n\n\np15&lt;-population_pyramid_women +\n  age_labels_plot +\n  population_pyramid_men +\n  plot_layout(\n    widths = c(10, 1.8, 10))+ # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in North Region, 2024\", \n    subtitle=\"Within the region, large number of these residents are aged 25-64\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size=12, face = \"bold\", hjust = 0.1), \n                  plot.caption=element_text(size=5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p15)\n\ngrid.rect(\n  x = unit(0, \"npc\"),  \n  y = unit(1, \"npc\"),  \n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(grid)\n\n# --- Plot for East Region (pop_er) ---\n# Initial plot\npop_er &lt;-\n  pop_er |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\npopulation_pyramid_women_er &lt;-\n  pop_er |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.7, nudge_x = -0.1 * max(abs(pop_er$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -25000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_er &lt;-\n  pop_er |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_er, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.13 * max(abs(pop_er$pop_sex)),\n                     0.13 * max(abs(pop_er$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 25000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_er &lt;- population_pyramid_women_er +\n  age_labels_plot +\n  population_pyramid_men_er +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in East Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 25-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_er)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot for West Region (pop_wr) ---\n# Initial plot\npop_wr &lt;-\n  pop_wr |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\npopulation_pyramid_women_wr &lt;-\n  pop_wr |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.5, nudge_x = -0.1 * max(abs(pop_wr$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -25000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_wr &lt;-\n  pop_wr |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_wr, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.11 * max(abs(pop_wr$pop_sex)),\n                     0.11 * max(abs(pop_wr$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 25000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_wr &lt;- population_pyramid_women_wr +\n  age_labels_plot +\n  population_pyramid_men_wr +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in West Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 25-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_wr)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot for Central Region (pop_cr) ---\n# Initial plot\npop_cr &lt;-\n  pop_cr |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\n\npopulation_pyramid_women_cr &lt;-\n  pop_cr |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.5, nudge_x = -0.1 * max(abs(pop_cr$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -30000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = breaks_pretty(4),\n                     labels = function(x) scales::comma(abs(x) / 1000, suffix = \"K\"),\n                     limits = c(-max(abs(pop_cr$pop_sex)) * 1.3, 0)) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_cr &lt;-\n  pop_cr |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_cr, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.09 * max(abs(pop_cr$pop_sex)),\n                     0.09 * max(abs(pop_cr$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 30000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  ) +\n  scale_x_continuous(breaks = breaks_pretty(4),\n                     labels = function(x) scales::comma(abs(x) / 1000, suffix = \"K\"),\n                     limits = c(0, max(abs(pop_cr$pop_sex)) * 1.3)) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_cr &lt;- population_pyramid_women_cr +\n  age_labels_plot +\n  population_pyramid_men_cr +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in Central Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 30-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_cr)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# --- Plot for North East Region (pop_ner) ---\n# Initial plot\npop_ner &lt;-\n  pop_ner |&gt;\n  mutate(pop_sex = if_else(Sex == \"Males\", pop_sex, -pop_sex))\n\n\npopulation_pyramid_women_ner &lt;-\n  pop_ner |&gt;\n  filter(Sex == \"Females\") |&gt;\n  ggplot(aes(\n    x = -pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#F8766D\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = -pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    hjust = 0.5, nudge_x = -0.1 * max(abs(pop_ner$pop_sex)),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = -30000,\n    y = 19,\n    label = \"Females\",\n    fill = \"#F8766D\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )  +\n  scale_x_continuous(breaks = seq(-50000, 0, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(-50000,0) # Extend to the left for females\n  ) +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\npopulation_pyramid_men_ner &lt;-\n  pop_ner |&gt;\n  filter(Sex == \"Males\") |&gt;\n  ggplot(aes(\n    x = pop_sex,\n    y = Age_Type_Ordered\n  )) +\n  geom_col(fill = \"#00BFC4\", alpha = 0.8, width = 0.7) +\n  geom_label(\n    aes(x = pop_sex,\n        label = paste0(format(pop_sex / 1000,\n                             scientific = FALSE, digits = 2, trim = TRUE), \"K\")),\n    nudge_x = ifelse(subset(pop_ner, Sex == \"Males\")$Age_Type_Ordered %in% c(\"90 & Over\", \"85-89\"),\n                     0.08 * max(abs(pop_ner$pop_sex)),\n                     0.08 * max(abs(pop_ner$pop_sex))),\n    size = 2.6, color = \"black\", fill = \"grey90\"\n  ) +\n  annotate(\n    geom = \"label\",\n    x = 30000,\n    y = 19,\n    label = \"Males\",\n    fill = \"#00BFC4\",\n    color = \"black\",\n    alpha = 0.8,\n    label.size = 0,\n    label.padding = unit(0.3, \"lines\")\n  )   +\n  scale_x_continuous(breaks = seq(0, 50000, by = 10000),\n                     labels=function(x) scales::comma(abs(x)/ 1000, suffix = \"K\"),\n    limits = c(0, 50000) # Extend to the right for males\n  ) +\n  scale_y_discrete() +\n  theme_void() +\n  theme(\n    axis.text.x = element_text(size = 8, margin = margin(t = 10)),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n\nage_labels_plot &lt;- # Assuming this is already defined\n  age_labels |&gt;\n  ggplot(\n    aes(\n      x = 1,\n      y = Age_type,\n      label = Age_type\n    )\n  ) +\n  geom_text(size = 3) +\n  theme_void() +\n  ggtitle(\"Age Group\\n(Years)\") +\n  theme(plot.title = element_text(hjust = 0.5, vjust = 2, size = 6,\n                                  face = \"bold\", color = \"black\"))\n\np_ner &lt;- population_pyramid_women_ner +\n  age_labels_plot +\n  population_pyramid_men_ner +\n  plot_layout(\n    widths = c(10, 1.8, 10)) + # both sides are x times the age_label_plot\n  plot_annotation(\n    title = \"Age Pyramid of Resident in North-East Region, 2024\",\n    subtitle = \"Within the region, large number of these residents are aged 30-69\",\n    caption = \"Data Source: Department of Statistics, Singapore | Designer: AT\",\n    theme = theme(plot.title = element_text(size = 12, face = \"bold\", hjust = 0.1),\n                  plot.caption = element_text(size = 5),\n                  plot.subtitle = element_text(hjust = 0.08),\n                  plot.background = element_rect(fill = \"#C1D3E5\"),\n                  plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), \"cm\")))\n\nplot(p_ner)\n\ngrid.rect(\n  x = unit(0, \"npc\"),\n  y = unit(1, \"npc\"),\n  width = unit(0.05, \"npc\"),\n  height = unit(0.025, \"npc\"),\n  just = c(\"left\", \"top\"),\n  gp = gpar(fill = \"#e5001c\", lwd = 0)\n)\n\n\n\n\n\n\n\n\n\n\n\n# 2. Save the individual plots as image files\nggsave(\"p_title.png\", p, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_nr.png\", p15, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_er.png\", p_er, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_wr.png\", p_wr, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_ner.png\", p_ner, width = 8, height = 6, units = \"in\", dpi = 300)\nggsave(\"p_cr.png\", p_cr, width = 8, height = 6, units = \"in\", dpi = 300)\n\n# 3. Read the image files using magick\nimage_p_title &lt;- image_read(\"p_title.png\")\nimage_nr &lt;- image_read(\"p_nr.png\")\nimage_er &lt;- image_read(\"p_er.png\")\nimage_wr &lt;- image_read(\"p_wr.png\")\nimage_ner &lt;- image_read(\"p_ner.png\")\nimage_cr &lt;- image_read(\"p_cr.png\")\n\n# 4. Scale by width\ntarget_width = 550\nimage_p_title &lt;- image_scale(image_p_title, geometry = paste0(target_width, \"x\"))\nimage_nr &lt;- image_scale(image_nr, geometry = paste0(target_width, \"x\"))\nimage_er &lt;- image_scale(image_er, geometry = paste0(target_width, \"x\"))\nimage_wr &lt;- image_scale(image_wr, geometry = paste0(target_width, \"x\"))\nimage_ner &lt;- image_scale(image_ner, geometry = paste0(target_width, \"x\"))\nimage_cr &lt;- image_scale(image_cr, geometry = paste0(target_width, \"x\"))\n\n# 5. Create the rows\nrow1 &lt;- image_append(c(image_p_title, image_wr), stack = FALSE)\nrow2 &lt;- image_append(c(image_nr, image_er), stack = FALSE)\nrow3 &lt;- image_append(c(image_ner, image_cr), stack = FALSE)\n\n# 6. Stack the rows vertically\ncombined_image &lt;- image_append(c(row1, row2, row3), stack = TRUE)\n\n# 7. Save the combined image\nimage_write(combined_image, \"combined_pyramids_2x3.png\")\n\n# 8. Display the combined image in R\nprint(combined_image)\n\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  &lt;chr&gt;  &lt;int&gt;  &lt;int&gt; &lt;chr&gt;      &lt;lgl&gt;    &lt;int&gt; &lt;chr&gt;  \n1 PNG     1100   1239 sRGB       TRUE         0 118x118\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Insights\n\n\nGender, Age and Regional Distributions\n\nWider distribution suggests greater diversity in the population per gender/ region:\n\nFemales have significantly wider distributions than Males for NER, CR, WR.\nRegions NER, CR, WR have wider distributions than ER and NR.\n\nAcross ages, wider gap between both genders’ population count observed for NER, CR, and WR, compared to ER and NR.\nRising numbers from age 0- 35, plateauing around age 35- 60, then dips.\nAround the ages of 0- 30, the population values between genders are close.\nA large population around age 30- 69 suggests an older population.\nAfter age 75, a wider population gap is observed between the higher females compared to males. This is stark for “over-90-years” (especially for CR), suggesting longevity for older females.\nDistribution shape similar within (NER and CR), and (NR, ER, WR)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "title": "Take-home_Exercise 1",
    "section": "9.1 Summary",
    "text": "9.1 Summary\nBased on the EDA above, we can conclude the following about the demographic distribution and structure of Singapore in 2024:\n\nAge and Gender Distribution: The population pyramid displays age-group variation in population. There is an ageing population with residents at a median age of 42. There are lesser younger and elderly from low birth rates and decline due to old-age mortality. There were increasingly more Females compared to Males as the age-group increases, suggesting Females outliving Males which corroborates with general biological and behavioural reasons.\nAge and Gender Distribution, for regions: There is a rather even distribution of genders per region. Also, most residents are clustered in NER, CR and WR. Across different ages, a wider gap between the population count for both genders was observed for NER, CR, and WR as compared to ER and NR. Distribution shape similar within (NER and CR), and (NR, ER, WR)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#future-research",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#future-research",
    "title": "Take-home_Exercise 1",
    "section": "9.2 Future Research",
    "text": "9.2 Future Research\n\nFurther research can be done on the regions where the labour force (age 15 and over) reside in. This might be useful for urban planning of offices.\nWith more data, labour force participation rate per region can be obtained by zooming into the working age groups (15-24, 25-54, 55-64, 65 and over)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-and-task-1",
    "title": "Take-home_Exercise 1",
    "section": "11.1 Background and Task",
    "text": "11.1 Background and Task\nIn Phase 2 of the exercise, one submission by a classmate is selected. Three good design principles and three areas for further improvement are provided. With reference to the comment, the makeover version of the data visualisation is prepared."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#selected-graph",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#selected-graph",
    "title": "Take-home_Exercise 1",
    "section": "11.2 Selected Graph",
    "text": "11.2 Selected Graph"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "View my Tableau profile :"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#installing-and-loading-the-packages",
    "title": "4c. Visualising Uncertainty",
    "section": "4.2.1 Installing and loading the packages",
    "text": "4.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, magick,\n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#data-import",
    "title": "4c. Visualising Uncertainty",
    "section": "4.2.2 Data import",
    "text": "4.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#plotting-standard-error-bars-of-point-estimates",
    "title": "4c. Visualising Uncertainty",
    "section": "4.3.1 Plotting standard error bars of point estimates",
    "text": "4.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n::: callout- Things to learn from the code chunk above - The error bars are computed by using the formula mean+/-se. - For geom_point(), it is important to indicate stat=“identity”. :::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#plotting-confidence-interval-of-point-estimates",
    "title": "4c. Visualising Uncertainty",
    "section": "4.3.2 Plotting confidence interval of point estimates",
    "text": "4.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n::: callout-Things to learn from the code chunk above - The confidence intervals are computed by using the formula mean+/-1.96*se. - The error bars is sorted by using the average maths scores. - labs() argument of ggplot2 is used to change the x-axis label :::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "4c. Visualising Uncertainty",
    "section": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "4c. Visualising Uncertainty",
    "section": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "4c. Visualising Uncertainty",
    "section": "4.4.3 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.3 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#installing-ungeviz-package",
    "title": "4c. Visualising Uncertainty",
    "section": "4.5.1 Installing ungeviz package",
    "text": "4.5.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: You only need to perform this step once."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#launch-the-application-in-r",
    "title": "4c. Visualising Uncertainty",
    "section": "4.5.2 Launch the application in R",
    "text": "4.5.2 Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04c/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "4c. Visualising Uncertainty",
    "section": "4.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "4.5.3 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nNext, the code chunk below will be used to build the HOPs.\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#installing-and-loading-the-packages",
    "title": "4a. Visualisation Distribution",
    "section": "4.2.1 Installing and loading the packages",
    "text": "4.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#data-import",
    "title": "4a. Visualisation Distribution",
    "section": "4.2.2 Data import",
    "text": "4.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#plotting-ridgeline-graph-ggridges-method",
    "title": "4a. Visualisation Distribution",
    "section": "4.3.1 Plotting ridgeline graph: ggridges method",
    "text": "4.3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 5,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", 0.5),\n    color = \"#7097BB\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges(grid = FALSE)\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n4.3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#mapping-the-probabilities-directly-onto-colour",
    "title": "4a. Visualisation Distribution",
    "section": "4.3.3 Mapping the probabilities directly onto colour",
    "text": "4.3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#plotting-a-half-eye-graph",
    "title": "4a. Visualisation Distribution",
    "section": "4.4.1 Plotting a Half Eye graph",
    "text": "4.4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#adding-the-boxplot-with-geom_boxplot",
    "title": "4a. Visualisation Distribution",
    "section": "4.4.2 Adding the boxplot with geom_boxplot()",
    "text": "4.4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#adding-the-dot-plots-with-stat_dots",
    "title": "4a. Visualisation Distribution",
    "section": "4.4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code Chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html#finishing-touch",
    "title": "4a. Visualisation Distribution",
    "section": "4.4.4 Finishing touch",
    "text": "4.4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n  ggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts.\n\nFirst, an ggplot object will be created.\nNext, girafe() of ggiraph will be used to create an interactive svg object.\n\n\n# First part: ggplot object\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID), #Student's ID\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\n# Next part: ggiraph\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved.\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph.\nThen, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n# Customising the tooltip\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # Student's ID\n  \"\\n Class = \", exam_data$CLASS)) # Student's Class\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#customising-tooltip-style",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\n\nTooltip: Black Background and White Bolded Font\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n# Customising Tooltip style\ntooltip_css &lt;- \"background-color:black; #&lt;&lt;\nfont-style:bold; color:white;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\nTooltip: White Background and Black Bolded Font\nNotice that the earlier background colour of the tooltip is black and the font colour is white and bold.\nWe can change it to a White Background and Black fonts here:\n\n\n\n\n\n\n\n\nTooltip: Pink Background with Rounded Borders and White Fonts\nNotice that the background colour of the tooltip is pink with round borders and the font colour is white.\nThe student’s ID and Class will be displayed.\n\n# Customising Tooltip style\ntooltip_css &lt;- \"background-color:#d8118c;color:white;padding:5px;border-radius:3px;\"\n\n# Combined Student ID and Class \nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         # Student's ID\n  \"\\n Class = \", exam_data$CLASS)) # Student's Class\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = exam_data$tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+  \n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip. The bar charts are also sorted by ascending math scores.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\n# Reorder RACE by mean MATHS score\nexam_data &lt;- exam_data %&gt;%\n  group_by(RACE) %&gt;%\n  mutate(mean_math = mean(MATHS, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(RACE = reorder(RACE, mean_math))\n\n# Plot\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,\n    fill=\"aquamarine2\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )+  \n  ggtitle(\"Maths scores by Races\")\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),        # data_id added here to Class     \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n    options = list(\n    opts_hover(css = \"fill:black;\")\n  )\n)    \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;” but black has been used here for better contrast."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#styling-hover-effect",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #333333;\"),  #CSS codes here for Color Hex Gray20\n    opts_hover_inv(css = \"opacity:0.2;\") #CSS codes here for opaque\n  )                                        \n)       \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\nThere are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS,           # tooltip added here to Class   \n        data_id = CLASS),          # data_id added here to Class      \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #000080;\"),  #CSS Codes here for color hex NavyBlue\n    opts_hover_inv(css = \"opacity:0.2;\") #CSS Codes here for opaque\n  )                                        \n)     \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#click-effect-with-onclick",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+\n  scale_fill_manual(values = c(\"Female\" = \"#e8a9e4\", \"Male\" = \"#92e8e8\"))+\n  ggtitle(\"Dotplot of Maths scores\") \n\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nClick actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+ \n  theme_dark()+\n  ggtitle(\"Dotplot of Math scores\") \n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH, fill=GENDER)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)+ \n  theme_dark()+\n  ggtitle(\"Dotplot of English scores\") \n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\n\nColour and Colour Palette\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE). Colour palette is customised as well with Set2.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,         \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\")\n\n\n\n\n\nData Labels on Hover\nGender and Science scores may be added on Hover.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\",\n        #Hover text\n        text=~paste(\"Gender: \", GENDER, \"&lt;br&gt;Science: \", SCIENCE))\n\n\n\n\n\nChart Title\nChart title may be added\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        type= \"scatter\", \n        mode=\"markers\",\n        color = ~RACE,\n        colors=\"Set2\",\n        #Hover text\n        text=~paste(\"Gender: \", GENDER, \"&lt;br&gt;Science: \", SCIENCE))%&gt;%\n  layout(title = \"Scatterplot of English by Math Scores\")  # Title"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH, fill=GENDER)) +\n  geom_point(size=2) +\n  ggtitle(\"Scatterplot of Math by English Scores\") + \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH, fill=GENDER)) +\n  geom_point(size=2) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE, fill=GENDER)) +\n  geom_point(size=2) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))%&gt;%\nlayout(\n    showlegend = FALSE)\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk.\n\n\nCustomisation of Main Title and Axis\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\n# First plot (MATHS vs ENGLISH)\np1 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point(size = 2) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + \n  labs(\n    title = \"MATHS by ENGLISH\",\n    x = \"MATH\",  # Shared X-axis label\n    y = \"ENGLISH\"\n  ) \n\n# Second plot (MATHS by SCIENCE)\np2 &lt;- ggplot(data = d, \n             aes(x = MATHS, y = SCIENCE, fill = GENDER)) +\n  geom_point(size = 2) +  \n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + \n  labs(\n    title = \"MATHS by SCIENCE\",\n    x = \"MATH\",  # Shared X-axis label\n    y = \"SCIENCE\"\n  ) \n\n# Convert ggplot to plotly objects\np1_plotly &lt;- ggplotly(p1)\np2_plotly &lt;- ggplotly(p2)\n\n# Combine the plots using subplot\nsubplot(p1_plotly, p2_plotly, nrows = 1, shareX = TRUE, shareY = FALSE) %&gt;%\n  layout(\n    title = \"Scatterplot Comparison\",\n    showlegend = FALSE,\n    xaxis = list(title = \"MATH\"),  # Shared X-axis label\n    yaxis = list(title = \"ENGLISH\"),  \n    yaxis2 = list(title = \"SCIENCE\"), \n    margin = list(t = 80),  # Adjust space\n    autosize = TRUE,  # Allow auto resizing\n    xaxis2 = list(domain = c(0.6, 1)),  # The second plot (SCIENCE) starts here\n    yaxis2 = list(domain = c(0, 1))  # The second plot takes full height\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-sunburst",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-sunburst",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.7.5 Interactive Sunburst",
    "text": "3.7.5 Interactive Sunburst\nIn the code chunk, levels are created for each Subject (Maths, English, Science):\n\nLevel 1: Pass/Fail\nLevel 2: Passing Grades (A*, A, B, C)\nLevel 3: Race Breakdown (Chinese, Malay, Indian, Others)\nLevel 4: Class (3A to 3I)\n\nInstead of a typical sunburst, this interactive sunburst allows user interaction on clicks. Hover effects have been added as well.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# Function to prepare data for plotly sunburst with RACE and CLASS\nprepare_plotly_interactive_data_actual &lt;- function(df, subject_col) {\n  df_processed &lt;- df %&gt;%\n    mutate(\n      Subject = subject_col,\n      PassFail = ifelse(.data[[subject_col]] &gt;= 50, \"Pass\", \"Fail\"),\n      Grade = case_when(\n        .data[[subject_col]] &lt; 50 ~ \"Fail\",\n        .data[[subject_col]] &gt;= 50 & .data[[subject_col]] &lt; 60 ~ \"C\",\n        .data[[subject_col]] &gt;= 60 & .data[[subject_col]] &lt; 70 ~ \"B\",\n        .data[[subject_col]] &gt;= 70 & .data[[subject_col]] &lt; 90 ~ \"A\",\n        .data[[subject_col]] &gt;= 90 ~ \"A*\"\n      )\n    )\n\n  # Prepare data for the first level (Subject -&gt; Pass/Fail)\n  level1 &lt;- df_processed %&gt;%\n    group_by(Subject, PassFail) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, sep = \"-\"),\n      parents = Subject,\n      labels = PassFail\n    )\n\n  # Prepare data for the second level (Pass -&gt; Grade)\n  level2_pass &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, sep = \"-\"),\n      parents = paste(Subject, PassFail, sep = \"-\"),\n      labels = Grade\n    )\n\n  # Prepare data for the third level (Grade -&gt; RACE)\n  level3_race &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, sep = \"-\"),\n      labels = RACE\n    )\n\n  # Prepare data for the fourth level (RACE -&gt; CLASS)\n  level4_class &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE, CLASS) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      labels = CLASS\n    )\n\n  # Root level\n  root &lt;- data.frame(\n    ids = unique(df_processed$Subject),\n    labels = unique(df_processed$Subject),\n    parents = NA,\n    Count = n_distinct(df_processed$ID)\n  )\n\n  plotly_df &lt;- bind_rows(root, level1, level2_pass, level3_race, level4_class)\n  return(plotly_df)\n}\n\n# Define the subjects to visualize\nsubjects_to_visualize &lt;- c(\"MATHS\", \"ENGLISH\", \"SCIENCE\")\nplot_titles &lt;- c(\"Maths\", \"English\", \"Science\")\n\n# Create the plotly figure\nfig_interactive_actual &lt;- plot_ly()\n\n# Add sunburst for the first subject (MATHS)\ninteractive_data_subject1 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject1,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 0),\n    maxdepth = 2,\n    name = plot_titles[1] # Subtitle\n  )\n\n# Add sunburst for the second subject (ENGLISH)\ninteractive_data_subject2 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject2,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 1),\n    maxdepth = 2,\n    name = plot_titles[2] # Subtitle\n  )\n\n# Add sunburst for the third subject (SCIENCEC)\ninteractive_data_subject3 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject3,\n    ids = ~ids,\n    labels = ~labels,\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 2),\n    maxdepth = 2,\n    name = plot_titles[3] # Subtitle\n  )\n\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  layout(\n    title = \"Performance Breakdown by Subject\", # Main title\n    grid = list(columns = 3, rows = 1),\n    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title\n    sunburstcolorway = c(\n      \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n      \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\",\n      \"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\n      \"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"\n    ),\n    extendsunburstcolors = TRUE\n  )\n\nfig_interactive_actual\n\n\n\nHow to use the interactive chart to drill deeper?:\n\nChoose a Subject, click “Pass”.\nClick a grade (from A*, A, B, C).\nClick a race (from Chinese, Malay, Indian, Others).\nClick a class (from 3A to 3I).\n\nClicking on the middle circle at any level after the root level will allow you to exit one level.\n\n3.7.5.1 Adding Percentage Figures\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# Function to prepare data for plotly sunburst with RACE and CLASS\nprepare_plotly_interactive_data_actual &lt;- function(df, subject_col) {\n  df_processed &lt;- df %&gt;%\n    mutate(\n      Subject = subject_col,\n      PassFail = ifelse(.data[[subject_col]] &gt;= 50, \"Pass\", \"Fail\"),\n      Grade = case_when(\n        .data[[subject_col]] &lt; 50 ~ \"Fail\",\n        .data[[subject_col]] &gt;= 50 & .data[[subject_col]] &lt; 60 ~ \"C\",\n        .data[[subject_col]] &gt;= 60 & .data[[subject_col]] &lt; 70 ~ \"B\",\n        .data[[subject_col]] &gt;= 70 & .data[[subject_col]] &lt; 90 ~ \"A\",\n        .data[[subject_col]] &gt;= 90 ~ \"A*\"\n      )\n    )\n\n  # Prepare data for the first level (Subject -&gt; Pass/Fail)\n  level1 &lt;- df_processed %&gt;%\n    group_by(Subject, PassFail) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, sep = \"-\"),\n      parents = Subject,\n      labels = PassFail\n    )\n\n  # Prepare data for the second level (Pass -&gt; Grade)\n  level2_pass &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, sep = \"-\"),\n      parents = paste(Subject, PassFail, sep = \"-\"),\n      labels = Grade\n    )\n\n  # Prepare data for the third level (Grade -&gt; RACE)\n  level3_race &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, sep = \"-\"),\n      labels = RACE\n    )\n\n  # Prepare data for the fourth level (RACE -&gt; CLASS)\n  level4_class &lt;- df_processed %&gt;%\n    filter(PassFail == \"Pass\") %&gt;%\n    group_by(Subject, PassFail, Grade, RACE, CLASS) %&gt;%\n    summarise(Count = n_distinct(ID), .groups = \"drop\") %&gt;%\n    mutate(\n      ids = paste(Subject, PassFail, Grade, RACE, CLASS, sep = \"-\"),\n      parents = paste(Subject, PassFail, Grade, RACE, sep = \"-\"),\n      labels = CLASS\n    )\n\n  # Root level\n  root &lt;- data.frame(\n    ids = unique(df_processed$Subject),\n    labels = paste0(unique(df_processed$Subject), \"\\n \"), \n    parents = NA,\n    Count = n_distinct(df_processed$ID)\n  )\n\n  plotly_df &lt;- bind_rows(root, level1, level2_pass, level3_race, level4_class) %&gt;%\n    group_by(parents) %&gt;%\n    mutate(percentage = Count / sum(Count, na.rm = TRUE)) %&gt;%\n    ungroup()\n\n  return(plotly_df)\n}\n\n# Define the subjects to visualize\nsubjects_to_visualize &lt;- c(\"MATHS\", \"ENGLISH\", \"SCIENCE\")\nplot_titles &lt;- c(\"Maths\", \"ENG\", \"SCI\")\n\n# Create the plotly figure\nfig_interactive_actual &lt;- plot_ly()\n\n# Add sunburst for the first subject (MATHS)\ninteractive_data_subject1 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[1])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject1,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 0),\n    maxdepth = 2,\n    name = plot_titles[1]\n  )\n\n# Add sunburst for the second subject (ENGLISH)\ninteractive_data_subject2 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[2])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject2,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 1),\n    maxdepth = 2,\n    name = plot_titles[2]\n  )\n\n# Add sunburst for the second subject (SCIENCE)\ninteractive_data_subject3 &lt;- prepare_plotly_interactive_data_actual(exam_data, subjects_to_visualize[3])\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  add_trace(\n    data = interactive_data_subject3,\n    ids = ~ids,\n    labels = ~paste0(labels, \" (\", round(percentage * 100, 1), \"%)\"),\n    parents = ~parents,\n    values = ~Count,\n    type = 'sunburst',\n    domain = list(column = 2),\n    maxdepth = 2,\n    name = plot_titles[3]\n  )\n\nfig_interactive_actual &lt;- fig_interactive_actual %&gt;%\n  layout(\n    title = \"Performance Breakdown by Subject\",\n    grid = list(columns = 3, rows = 1),\n    margin = list(l = 0, r = 0, b = 0, t = 50), # Adjust top margin for title\n    sunburstcolorway = c(\n      \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n      \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\",\n      \"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\n      \"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\"#cab2d6\",\"#6a3d9a\"\n    ),\n    extendsunburstcolors = TRUE\n  )\n\nfig_interactive_actual"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS, fill=GENDER)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)     \n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#ggiraph",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.9.1 ggiraph",
    "text": "3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03a/Hands-on_Ex03a.html#plotly-for-r",
    "title": "3a. Programming Interactive Data Visualisation with R",
    "section": "3.9.2 plotly for R",
    "text": "3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\nMarginal Histograms — They’re Not Just for Scatterplots"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2.1 Install and launching R packages",
    "text": "1.2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\nLoad the required libraries\n\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(magick)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2.2 Importing the data",
    "text": "1.2.2 Importing the data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package and stores it in exam_data in R Studio.\n\nexam_data &lt;-read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\n\nThe data consists of year end examination grades of a cohort of primary 3 students from a local school.\nThe dataframe has 7 columns and 322 rows. Four of the columns contains categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nR Graphics is the built-in R plotting method. By comparing the plots between R Graphics and ggplot via a histogram, we see some differences.\n\nR GraphicsGGPLOT2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\nThe code is simpler for R Graphics as compared to ggplot.\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 10,\n                 boundary = 100,\n                 color = \"black\",\n                 fill=\"mediumorchid\")+\n  ggtitle(\"Distribution of Maths Scores\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nHowever, here are a few advantages of ggplot2:\n\nNo need to make own legends.\nAble to perform faceting (1.9 Essential Grammatical Elements in ggplot2: Facets) to display data in multiple subplots.\nAble to use tidydata to do exploratory data analysis through data.table or dplyr.\nggplot2 looks better\n\nAs pointed out by Hadley Wickham :\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5)+\nggtitle(\"Barplot of Races by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, fill = \"darkseagreen1\")+  \nggtitle(\"Dotplot of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n1) scale_y_continuous() is used to turn off the y-axis, and\n2) binwidth argument is used to change the binwidth to 2.5.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5, fill = \"darkseagreen1\", alpha = 0.5) +\nggtitle(\"Dotplot of Maths Scores\")+\nscale_y_continuous(NULL, breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"darkorchid2\") +  \nggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic(). R Color Brewer is used to set a palette colour called Set2.\n\n\nhst&lt;-ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") +  \n  ggtitle(\"Distribution of Maths Scores by Gender\")\nhst + scale_fill_brewer(palette = \"Set2\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_density",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6 Geometric Objects: geom_density",
    "text": "1.7.6 Geometric Objects: geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()  +  \nggtitle(\"Density plot of Maths Scores\")\n\n\n\n\n\n\n\n\n\nTwo density lines\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Density plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot(aes(fill = GENDER), alpha = 0.5)  +  \nggtitle(\"Boxplot of Maths Scores by Gender\")\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5, notch=TRUE)+  \nggtitle(\"Notched plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Violin plot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH,\n           color=GENDER)) +\n  geom_point(aes(fill = GENDER), alpha = 0.5) +  \nggtitle(\"Scatter plot of Maths by English Scores with Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data = exam_data, \n       aes(x = GENDER, y = MATHS)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +   # color-filled \n  geom_jitter(aes(color = GENDER),              \n              width = 0.2, size = 0.8, alpha = 0.7) +\n  ggtitle(\"Maths Scores by Gender\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5)+\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)    +\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(aes(fill = GENDER), alpha = 0.5) +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) +\n  ggtitle(\"Boxplot of Maths Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(size=0.5) +\n  ggtitle(\"Scatter plot of Maths by English Scores by Gender\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\n\nOverriding best fit smoothing method\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, \n              linewidth=0.5)+\n  ggtitle(\"Scatter plot of Maths by English Scores by Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,aes(fill = GENDER), alpha = 0.5) +\n    facet_wrap(~ CLASS)       +\n  ggtitle(\"Trellis plot of Maths Scores for different Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,aes(fill = GENDER), alpha = 0.5) +\n    facet_grid(~ CLASS)      +\n  ggtitle(\"Trellis plot of Maths Scores for different Classes\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5)    +\n  ggtitle(\"Bar plot for Races\") \n\n\n\n\n\n\n\n\n\nFlipping into horizontal bar chart\nThe code chunk below flips the vertical bar chart into horizontal bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(aes(fill = GENDER), alpha = 0.5) +\n  coord_flip() +\n  ggtitle(\"Bar plot for Races\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, linewidth=0.5)  +\n  ggtitle(\"Scatter plot of Math by English Scores with Gender\") \n\n\n\n\n\n\n\n\n\nStarting the axis ranges from 0-100\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point(aes(color = GENDER), alpha = 0.5) +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"Scatter plot of Math by English Scores with Gender\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "1. A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\n\nGray\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\nClassic\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nMinimal\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nBlack and White\nThe code chunk below plot a horizontal bar chart using theme_bw()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications homepage. In this website, you will find my coursework prepared for this course.   These are my posts for Hands-On Exercises:\n\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Published - Oldest\n      \n      \n        Published - Newest\n      \n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nPublished\n\n\n\n\n\n\n\n\n1. A Layered Grammar of Graphics: ggplot2 methods\n\n\nApr 18, 2025\n\n\n\n\n\n\n2. Beyond ggplot2 Fundamentals\n\n\nApr 24, 2025\n\n\n\n\n\n\n3a. Programming Interactive Data Visualisation with R\n\n\nMay 1, 2025\n\n\n\n\n\n\n3b. Programming Animated Statistical Graphics with R\n\n\nMay 1, 2025\n\n\n\n\n\n\n4a. Visualisation Distribution\n\n\nMay 4, 2025\n\n\n\n\n\n\n4b. Visual Statistical Analysis\n\n\nMay 4, 2025\n\n\n\n\n\n\n4c. Visualising Uncertainty\n\n\nMay 4, 2025\n\n\n\n\n\n\n4d. Funnel Plots for Fair Comparisons\n\n\nMay 5, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, my name is Audrey!\nEducation\nSingapore Management University\nMasters of IT in Business (Data Science & Analytics)\nExperience\nAnalytics | Finance | Risk & Compliance\nCPA certified\nEnjoys\nCoffee"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, other R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nploty: an R package for creating interactive web-based graphs.\ndplyr: an R package for data manipulation using a consistent grammar of data transformation. Part of tidyverse and used for filtering, selecting, mutating, summarizing, and joining data.\nggplot2: an R package for creating data visualizations using the Grammar of Graphics.\nRColorBrewer: an R package for creating color palettes\nmagick: an R package for image processing to read, edit, compose, and convert images easily.\nggdist: an R package for visualizing distributions and uncertainty. It provides tools like stat_halfeye(), stat_pointinterval(), etc., for making raincloud plots.\ncowplot: an R package for enhancing ggplot2 output, especially when combining multiple plots.\nggExtra: an R package for arranging multiple grid-based plots into a single view.\n\nCode chunk below checks if these packages have been installed and also will load them onto the working R environment.\n\npacman::p_load(\n  ggrepel, ggthemes,\n  hrbrthemes, patchwork,\n  tidyverse, plotly,\n  gridExtra, dplyr,\n  ggplot2, RColorBrewer,\n  magick, ggdist,\n  cowplot, ggExtra\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package and stores it in exam_data in R Studio.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\nThe code chunk below allows a glimpse into exam_data by their 7 column headers.\n\n# Display the structure of your exam_data\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nExample for geom_label_repel\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(color= \"darkblue\") +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label_repel(aes(label = ID, \n                   colour = GENDER),\n                   fontface = \"bold\")+\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nThe Economist Theme\nIn the example below, The Economist theme is used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\",\n                 fill=\"cyan3\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nWall Street Journal Theme\nIn the example below, The Wall Street Journal theme is used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np&lt;-ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"cyan3\") +\n  theme_wsj()\n\n# Add title\np &lt;- p + labs(title = \"Distribution of English Scores\")\np + theme(\n  plot.title = element_text(color = \"black\", size = 15, face = \"bold\")\n)\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n             aes(x = MATHS,\n                 fill=GENDER)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\") +\n  ggtitle(\"Distribution of Maths scores by Gender\") +\n  theme_ipsum(base_family = \"sans\") \n\n# Add color palette\np + scale_fill_brewer(palette = \"Pastel1\")\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nIncrease font size/ axis label/ remove grid lines/ add subtitle\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n             aes(x = MATHS,\n                 fill=GENDER)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\", base_family = \"sans\")\n\n# Add color palette and titles\np + scale_fill_brewer(palette = \"Pastel1\") + \n  labs(title = \"Distribution of Math Scores\",\n              subtitle = \"(by gender)\") + \n  theme(\n  plot.title = element_text(color = \"black\", size = 15, face = \"bold\"),\n  plot.subtitle = element_text(color = \"grey34\"),\n)\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nRoman Numerals- Uppercase\n‘I’ for uppercase and ‘i’ for lower case roman numerals\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\nLatin Letters- Uppercase\n‘A’ for uppercase and ‘a’ for lower case Latin letters\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\nArabic Numerals\n‘1’ for Arabic numerals\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nInsert P2 to Top Left\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\nInsert P1 to Bottom Right\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p1, \n                   left = 0.6, \n                   bottom = 0, \n                   right = 1, \n                   top = 0.4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()&\n  theme(\n    plot.title = element_text(size = 8),       # Adjust main patchwork title size\n    plot.subtitle = element_text(size = 8),    # Adjust main patchwork subtitle size \n    plot.caption = element_text(size = 7),     # Adjust main patchwork caption size \n    strip.text = element_text(size = 8),        # Adjust facet label sizes \n    axis.title.x = element_text(size = 8),       # Adjust x-axis label sizes\n    axis.title.y = element_text(size = 8)        # Adjust y-axis label sizes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visualising-patterns-andor-distributions",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#visualising-patterns-andor-distributions",
    "title": "Hands-on Exercise 2",
    "section": "2.5.7 Visualising Patterns and/or Distributions",
    "text": "2.5.7 Visualising Patterns and/or Distributions\n\n2.5.7.1 Creating a Highlight Table\n\nThe highlight table/ heatmap, uses colour coding to allow quick identification of numbers within a table. It presents patterns, trends, and relationships within the data.\n\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculate percentage scores\nexam_data_percentage &lt;- exam_data %&gt;%\n  mutate(\n    ENGLISH_PERCENT = (ENGLISH / 100) * 100,\n    MATHS_PERCENT = (MATHS / 100) * 100,\n    SCIENCE_PERCENT = (SCIENCE / 100) * 100\n  )\n\n# Create the highlight table data\nhighlight_table_data &lt;- exam_data_percentage %&gt;%\n  group_by(CLASS) %&gt;%\n  summarise(\n    MATHS = round(mean(MATHS_PERCENT), 1),\n    ENGLISH = round(mean(ENGLISH_PERCENT), 1),\n    SCIENCE = round(mean(SCIENCE_PERCENT), 1)\n  ) %&gt;%\n  pivot_longer(cols = c(ENGLISH, MATHS, SCIENCE), \n               names_to = \"Subject\", \n               values_to = \"Average_Percentage\") %&gt;%\n  pivot_wider(names_from = \"Subject\", \n              values_from = \"Average_Percentage\")\n\n# Create the highlight table using ggplot2\nhighlight_table_plot &lt;- ggplot(highlight_table_data %&gt;%\n                                pivot_longer(\n                                  cols = c(ENGLISH, \n                                           MATHS,\n                                           SCIENCE),\n                                  names_to = \"Subject\",\n                                  values_to= \"Average_Percentage\"),\n                               aes(x = Subject, \n                                    y = factor(CLASS, levels = rev(c(\"3A\", \"3B\", \"3C\", \"3D\", \"3E\", \"3F\", \"3G\", \"3H\", \"3I\"))), \n                                   fill= Average_Percentage)) +\n  geom_tile(color = \"white\") +\n  geom_text(aes(label = Average_Percentage), color = \"black\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"royalblue3\") +\n  labs(\n    title = \"Average Percentage Scores of Subjects by Class\", \n    fill = \"Avg. Percentage\") +\n  theme_minimal() +\n  theme(axis.title = element_blank(),\n        panel.grid = element_blank(),\n        panel.background = element_blank(),\n        axis.ticks = element_blank())\nprint(highlight_table_plot)\n\n\n\nThe highlight table here shows the average scores for each class by their subject. The colour gradient shows the scores from low (lighter colour) to high (darker colour).\nWe may infer that the average percentage scores for each subject from the students in Class 3A (darker blue) are higher than in 3I (lighter blue). We may continue to compare between subjects and classes in this manner.\n\n\n2.5.7.2 Combining Scatterplot with Marginal Histograms\nA highlight table or scatterplot can be combined with marginal histograms.\n\nHere, the scatterplot visualizes the relationship between two subjects.\nThe marginal histogram provides a side-by-side view of the distribution of each subject in the scatterplot.\n\n\nMaths vs Science: Code & PlotMaths vs English: Code & PlotEnglish vs Science: Code & Plot\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x = MATHS, \n                           y = SCIENCE))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"Maths vs Science Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x = MATHS, \n                           y = ENGLISH))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"Maths vs English Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n# Save the scatter plot in a variable\np &lt;- ggplot(exam_data, aes(x =ENGLISH, \n                           y =SCIENCE))+\n  geom_point(color = \"navyblue\")+ \n  labs(title = \"English vs Science Scores\")\n\n# Plot the scatter plot with marginal histograms\nggMarginal(p, type = \"histogram\",\n           fill='cyan3')\n\n\n\n\n\n\n\n\n\n\n\n\nTrend: There appears to be a positive trend for each subject. Students that do well in one appear to do well in the other.\nSkewness: Slightly negatively skewed distribution (longer left tail) for Math, Science and English.\nData concentration: Math [75-90 range], Science [50-75], English [60-80]. Fewer students at both ends of higher and lower scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-raincloud-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-raincloud-plots",
    "title": "Hands-on Exercise 2",
    "section": "2.5.8 Creating Raincloud plots",
    "text": "2.5.8 Creating Raincloud plots\nShortcomings of barplots:\nThe barplot with whisker error bars to visualise the mean or median and the standard error may be prone to distortion, fail to represent underlying data parameter inferences, lead to misleading inferences of magnitude of difference between conditions, and may obscure difference in distributions (Allen et al., 2021).\nRemedies:\n\nAdd jittered raw data points to the standard boxplot and +/- standard error scheme.\nAdd dotplots tosupplement visualizations of central tendency and error, but at the risk of added complexity due to the dependence of such plots on choices such as bin-width and dot size, and the risk of reading issues when there are many observations.\nViolin plot overlaid with boxplots or similar. However, there is little to be gained statistically, by mirroring the violin plot, and therefore violating the philosophy of minimising the “data-ink ratio” (Allen et al., 2021; Tufte, 1983).\n\nClick to see detailed information on shortcomings and remedies of barplot.\nSolution to limitations:\nThe raincloud plot combines various plots, to address the aforementioned limitations in an intuitive, modular, and statistically robust format. Raincloud plots combine a ‘split-half violin’, raw jittered data points, and a standard visualization of central tendency (i.e., mean or median) and error, such as a boxplot (Allen et al., 2021).\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n# plot\np4 &lt;- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +\n  geom_flat_violin(\n    position = position_nudge(x = 0.25),\n    adjust = 2,\n    trim = TRUE\n  ) +\n  geom_point(\n    position = position_jitter(width = 0.15),\n    size = 0.25\n  ) +\n  geom_boxplot(\n    aes(x = as.numeric(group) + 0.25, y = score),\n    outlier.shape = NA,\n    alpha = 0.3,\n    width = 0.1,\n    colour = \"BLACK\",\n    position = position_nudge(x = 0)\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +  # palette for the fill\n  scale_color_brewer(palette = \"Set2\") +  # palette for the color\n  guides(fill = \"none\", colour = \"none\") +\n  ylab(\"Score\") +\n  xlab(\"Subject\") +\n  theme_cowplot() +\n  coord_flip() +\n  ggtitle(\"Raincloud Plot\")\n\nsuppressWarnings(plot(p4))  # Suppress warnings\n\n\n\nThe raincloud plot above visualised the following elements:\n\nSplit-half violin (density plot): Distribution of the data for each subject, filled with color, and is a smoothed density estimate of the data.\nBoxplot: Overlaid on top of the violin, showing the quartiles, median, and outliers for the data.\nRaw jittered data points (“rain”): Individual data points (“raindrop”) shown as small, scattered dots. Shows the data points distribution within each subject.\n\n\n2.5.8.1 Drilling Deeper into Interactive Rain Points\nWe may dissect the plot without the violin density plot. Then using tooltip we can hover over each individual “raindrop” to show the student’s ID and Class per subject, in an interactive manner.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n# tooltip\nsimdat$tooltip &lt;- paste0(\"ID = \", simdat$ID, \"\\nClass = \", simdat$CLASS)\n\n# Create the plot\np4_interactive &lt;- suppressWarnings({\n  p4 &lt;- ggplot(simdat, aes(x = group, y = score, fill = group, colour = group)) +  geom_point(\n      aes(text = tooltip),  # Add tooltip in the 'text' aesthetic\n      position = position_jitter(width = 0.15),\n      size = 0.25\n    ) +\n    geom_boxplot(\n      aes(x = as.numeric(group) + 0.25, y = score),\n      outlier.shape = NA,\n      alpha = 0.3,\n      width = 0.1,\n      colour = \"BLACK\",\n      position = position_nudge(x = 0)\n    ) +\n    scale_fill_brewer(palette = \"Set2\") +  # palette for the fill\n    scale_color_brewer(palette = \"Set2\") +  # palette for the color\n    guides(fill = \"none\", colour = \"none\") +\n    ylab(\"Score\") +\n    xlab(\"Subject\") +\n    theme_cowplot() +\n    coord_flip() +\n    ggtitle(\"Dissected Raincloud Plot\")\n\n  # Convert to interactive plotly plot with the tooltip\n  ggplotly(p4, tooltip = \"text\")  # Use 'text' for hover tooltip\n})\n\n# Display the interactive plot\np4_interactive\n\n\n\nIt is interesting to note that Student 36 from class 3A scored top for Science, Math, and English."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.1.1 Basic concepts of animation",
    "text": "3.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#terminology",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.1.2 Terminology",
    "text": "3.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore making animated graphs, ask the question: Does it makes sense to go through the effort?\n\nIf conducting an exploratory data analysis, a animated graphic may not be worth the time investment.\nHowever, when giving a presentation, a few well-placed animated graphics can help an audience connect with the topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.2.1 Loading the R packages",
    "text": "3.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#importing-the-data",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.2.2 Importing the data",
    "text": "3.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.undefined\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.3.1 Building a static population bubble plot",
    "text": "3.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-the-animated-bubble-plot",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.3.2 Building the animated bubble plot",
    "text": "3.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\nString literal interpolation in title is also used to dynamically update the plot information based on the frame.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\nThe animated bubble chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-multiple-animated-subplots",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-multiple-animated-subplots",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.3.3 Building multiple animated subplots",
    "text": "3.3.3 Building multiple animated subplots\nWe can also create multiple animated bubble subplots by Continent.\nIn the code chunk below,\n\nfacet_warp() is used on Continent.\n\n\nggplot(globalPop, aes(Old, Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~Continent) +\n  # gganimate\n  labs(title = 'Year: {frame_time}', , \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')\n\nThe animated bubble charts"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "3.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03b/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "3b. Programming Animated Statistical Graphics with R",
    "section": "3.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "3.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, we create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#installing-and-loading-the-packages",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.1 Installing and loading the packages",
    "text": "4.3.1 Installing and loading the packages\nIn this exercise, ggstatsplot and tidyverse will be used.\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#data-import",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.2 Data import",
    "text": "4.3.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#one-sample-test-gghistostats-method",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.3 One-sample test: gghistostats() method",
    "text": "4.3.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#unpacking-the-bayes-factor",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.4 Unpacking the Bayes Factor",
    "text": "4.3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\n\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#how-to-interpret-bayes-factor",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.5 How to interpret Bayes Factor",
    "text": "4.3.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#two-sample-mean-test-ggbetweenstats",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.6 Two-sample mean test: ggbetweenstats()",
    "text": "4.3.6 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#oneway-anova-test-ggbetweenstats-method",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.7 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "4.3.7 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n4.3.7.1 ggbetweenstats - Summary of tests"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#significant-test-of-correlation-ggscatterstats",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "4.3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "4b. Visual Statistical Analysis",
    "section": "4.3.9 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "4.3.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association.\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, the learning objectives are:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\",show_col_types = FALSE) %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this section, we will be building funnel plots step-by-step by using ggplot2. It aims to enhance our working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#importing-data",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\",show_col_types = FALSE) %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnelplotr-methods",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "FunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\n\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this section, we will be building funnel plots step-by-step by using ggplot2. It aims to enhance our working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\n\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\n\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#references",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "funnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class_Ex03",
    "section": "",
    "text": "View my Tableau profile :"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04b/Hands-on_Ex04b.html",
    "title": "4b. Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, the learning outcomes are:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04a/Hands-on_Ex04a.html",
    "title": "4a. Visualisation Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04d/Hands-on_Ex04d.html#overview",
    "title": "4d. Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, the learning objectives are:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  }
]